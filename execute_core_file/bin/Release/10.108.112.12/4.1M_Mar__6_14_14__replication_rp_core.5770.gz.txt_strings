X,$(
X,$)
X,$*
)I&_
)I&`
)I&a
)I&b
QI&b
yI&b
FJ&b
sJ&b
1.(b
1.(c
1.(d
1.(e
6w%h
f]&h
.W*h
Pw$!
CORE
/home/kos/kashya/home/kos/kashya/archive/bin/release/replication
kvol=@/home/kos/kvol.txt boxRo
CORE
CORE
H)l$
CORE
+HZ 
CORE
ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
CORE
CORE
CORE
CORE
CORE
CORE
t_propertiesRefr
tion],[t_dynamicsyncTime => NoOpmicDontChangeToAoOption],[t_dynaolAllStream => N
CORE
CORE
[MB] shrMemory = = 87.3438 [MB] UTC
CORE
CORE
uspected at N6Kashya31AccumulatorManagerTimer_AO_IMPLE, pid=5781/5770, config=(a
CORE
CORE
CORE
CORE
CORE
CORE
^t>Ce
6%5M
CORE
CORE
%%%%%%%%%%%%%%%%
CORE
CORE
calling run_reveUTC
uchar
al14TentativeVal
CORE
CORE
CORE
CORE
t in grace perioperiod. ignoringUTC
uchar
al14TentativeVal
CORE
CORE
CORE
CORE
Threshold=0,fulleshold=0,full=1)UTC
teUID(0x1f1f99f3d17c5330)_KBox2)912_KBox2:  switchTo_GettingSess
CORE
CORE
reshold=0,full=1eshold=0,full=1)gistr N6Kashya30ConfigSettingsNotifier_AO_IMPLE, pid=5790/5770, config=(alertThreshold=10,alertL
CORE
CORE
CORE
CORE
CORE
CORE
CORE
CORE
CORE
CORE
CORE
CORE
LinuxAIOResultAgResultAggregator0
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5797/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5798/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5799/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5800/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5801/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5802/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5803/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5804/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5805/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5806/5770, config=(alertThreshold=10,alert
CORE
CORE
00,coreThresholdeshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5808/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5809/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5810/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5811/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5812/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5813/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5814/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5815/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5816/5770, config=(alertThreshold=10,alert
CORE
CORE
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5817/5770, config=(alertThreshold=10,alert
CORE
CORE
7200,coreThreshoeshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
CORE
CORE
RejectedLRsSet_iperiodicClearRejUTC
CORE
CORE
200,coreThresholeshold=0,full=1)UTC
Port=(0xf0de2fb7d33c4fbe,e_iSCSI),ifaceName=iface1,iqn=iqn.1992-
CORE
CORE
CORE
CORE
CORE
CORE
CORE
CORE
CORE
CORE
old=3600,full=1)
registr gistr N6Kashya26InitiatorRegulator_AO_IMPLE, pid=5862/5770, config=(alertThreshold=10,alertLevel
CORE
CORE
old=3600,full=1)
registr gistr N6Kashya26InitiatorRegulator_AO_IMPLE, pid=5863/5770, config=(alertThreshold=10,alertLevel
CORE
CORE
CORE
CORE
 PID: 5770 Info:
CORE
CORE
andle_sendResulthandle_sendResulUTC
Reactor.cc PID: 06 File Portableed: false Line 1g=Assertion fail
CORE
CORE
3000,bDynamicByTrAsync=3000,bDyncation=0,__futurtion),useDedupliuture_use__=NoOp_=NoOption)),__f00,__future_use_hputForAsync=350
CORE
CORE
yt_defaultTimeRP
pTaskID=(sessionID=330453115,replicationLinkID=(kVolSlot=1046948
CORE
CORE
00,bDynamicByThrsync=3000,bDynamon),useDeduplicaure_use__=NoOptiNoOption)),__fut,__future_use__=utForAsync=350005000,minThroughp
CORE
CORE
periodicVerifier
oupCopyRID=(kVolSlot=1552325066,globalCopyID=GlobalCopy(SiteUID(0x1f1f99f3d17c53
CORE
CORE
x5189db8372028e55) using 0 credit 0 min 2500 max 1024000 counter
CORE
CORE
yt_defaultTimeRP
T_STARTED groupCopyRID = (kVolSlot=1296285775,globalCopyID=Globa
CORE
CORE
CORE
CORE
D=GlobalCopy(Sit5816395,srcCopyIroupTaskID=(sessh() = 3 taskIF->
CORE
CORE
 = e_consistencyncyVerifierLightption,initFromSnapTag=NoOption,isMirrorLink=0,hideSnapshot=0,__future_use__=NoOption) verifierPo
CORE
CORE
yt_defaultTimeRP
yID=GlobalCopy(S330) 0) ,destCop
CORE
CORE
0,bDynamicByThroync=3000,bDynamin),useDeduplicatre_use__=NoOptiooOption)),__futu__future_use__=NtForAsync=35000,000,minThroughpu
CORE
CORE
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
CORE
CORE
3000,bDynamicByTrAsync=3000,bDyncation=0,__futurtion),useDedupliuture_use__=NoOp_=NoOption)),__f00,__future_use_hputForAsync=350
CORE
CORE
0,bDynamicByThroync=3000,bDynamin),useDeduplicatre_use__=NoOptiooOption)),__futu__future_use__=NtForAsync=35000,000,minThroughpu
CORE
CORE
000,bDynamicByThAsync=3000,bDynaation=0,__futureion),useDeduplicture_use__=NoOpt=NoOption)),__fu0,__future_use__putForAsync=3500
CORE
CORE
yt_defaultTimeRP
 SiteUID(0x1f1f9pCopy(1046948393ID = Option(Grou) 0) ) groupCopy
CORE
CORE
D=GlobalCopy(Sit4100552,srcCopyIroupTaskID=(sessh() = 3 taskIF->
CORE
CORE
T_STARTED groupCopyRID = (kVolSlot=1091437263,globalCopyID=Globa
CORE
CORE
replProcessCpuUslProcessCpuUsage
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
CORE
CORE
yt_defaultTimeRP
ntPipeRole=e_asyncPipe,manualInitPercent=NoOption,manualInitPace
CORE
CORE
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
CORE
CORE
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
CORE
CORE
yt_defaultTimeRP
D=GlobalCopy(Sit1697416,srcCopyIroupTaskID=(sessh() = 3 taskIF->
CORE
CORE
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
CORE
CORE
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
CORE
CORE
CORE
CORE
3000,bDynamicByTrAsync=3000,bDyncation=0,__futurtion),useDedupliuture_use__=NoOp_=NoOption)),__f00,__future_use_hputForAsync=350
CORE
CORE
T_STARTED groupCopyRID = (kVolSlot=107521471,globalCopyID=Global
CORE
CORE
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
CORE
CORE
yt_defaultTimeRP
8372028e55) 0) )SiteUID(0x5189dbpyID=GlobalCopy(5330) 0) ,destCo
CORE
CORE
8888576 maxmem =6 maxmem = 12800UTC
skID=(sessionID=738358216,replicationLinkID=(kVolSlot=1754504586
CORE
CORE
iteUID(0x1f1f99fCopy(316184507 SD = Option(Group 0) ) groupCopyI
CORE
CORE
registr N6Kashya
registr gistr N6Kashya25CopyTaskWithinRep_AO_IMPLE, pid=5900/5770, config=(alertThreshold=10,alertLevel=
CORE
CORE
is_lock_free() =_lock_free() = 1UTC
ReadBufSize = 13t_IPTargetStaticBufSize = 65536 TargetRecvSocket
CORE
CORE
memoryManagerStr
CORE
CORE
CORE
CORE
CORE
CORE
Non grid group -group - continueUTC
30) 0) ,destCopy0x1f1f99f3d17c53balCopy(SiteUID(28,srcCopyID=Glo
CORE
CORE
gridTargetSequenrgetSequenceData7,replicationLinkID=(kVolSlot=953668218,srcCopyInter=5516309168409158023,timeCouactionCounter=75
CORE
CORE
ld=0,coreThreshoeshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
old=0,coreThresheshold=0,full=1)UTC
al10TypedValueIiN15xParam_internceIDE
CORE
CORE
 taskID = (groupb8372028e55) 0) (SiteUID(0x5189dopyID=GlobalCopyc5330) 0) ,destCID(0x1f1f99f3d17GlobalCopy(SiteU
CORE
CORE
lobalCopy(SiteUID(0x5189db8372028e55) 0) )),gridCopyID=0) m_mark
rtyCountImproved
CORE
CORE
roupTaskID=(sessionID=924208973,replicationLinkID=(kVolSlot=7536
rtyCountImproved
CORE
CORE
GlobalCopy(SiteUID(0x5189db8372028e55) 0) )),gridCopyID=0) m_mar
rtyCountImproved
CORE
CORE
srcCopyID=GloballSlot=433933344,ationLinkID=(kVo468088759,replic
rtyCountImproved
CORE
CORE
GlobalCopy(SiteUID(0x5189db8372028e55) 0) )),gridCopyID=0) m_mar
rtyCountImproved
CORE
CORE
gistr N6Kashya16registr N6KashyaUTC
merRequestResult> Kashya::MemoryManager::registerConsumerAsync(K
CORE
CORE
 a_status = e_SEsetStatus:  a_stntext.msgId = 27th = NoOption coc9abd context.pa = 0xed5bcddb7beion context.guidtender optimizat
CORE
CORE
 = (groupTaskID=(sessionID=1194680084,replicationLinkID=(kVolSlot=1389836367,src
CORE
CORE
CORE
CORE
pTaskID=(sessionID=1194680084,re
CORE
CORE
CORE
CORE
uchar
al14TentativeVal
CORE
CORE
uchar
al14TentativeVal
CORE
CORE
uchar
al14TentativeVal
CORE
CORE
uchar
al14TentativeVal
CORE
CORE
uchar
al14TentativeVal
CORE
CORE
uchar
al14TentativeVal
CORE
CORE
uchar
al14TentativeVal
CORE
CORE
uchar
al14TentativeVal
CORE
CORE
uchar
al14TentativeVal
CORE
CORE
EWOC:[BURST](7):017/03/01 15:59:UTC
uchar
al14TentativeVal
CORE
CORE
(0x7f940fbef700)0x7f940fbef700)
uchar
al14TentativeVal
CORE
CORE
7483648 m_currenntMemory = 28476ory = 2147483648 m_currentMemory = 28476,])
 siteUID = SiteUID(0x5189db8372028e55), ewocHandshak
CORE
CORE
d=0,coreThresholeshold=0,full=1)UTC
CORE
CORE
d=0,coreThresholeshold=0,full=1)UTC
CORE
CORE
d=0,coreThresholeshold=0,full=1)UTC
CORE
CORE
d=0,coreThresholeshold=0,full=1)UTC
CORE
CORE
= Pair(10240000000000,128000000)UTC
CORE
CORE
getDigest: creat
Manager::registerConsumerAsync(K
CORE
CORE
getDigest: creat
Manager::registerConsumerAsync(K
CORE
CORE
getDigest: creat
Manager::registerConsumerAsync(K
CORE
CORE
getDigest: creat
Manager::registerConsumerAsync(K
CORE
CORE
getDigest: creat
Manager::registerConsumerAsync(K
CORE
CORE
CORE
CORE
a29InstantRecoveregistr N6KashyaUTC
uchar
al14TentativeVal
CORE
CORE
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
old=0,coreThresheshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
CORE
CORE
CORE
CORE
CORE
CORE
r N6Kashya20XDisregistr N6KashyaUTC
merRequestResult> Kashya::MemoryManager::registerConsumerAsync(K
CORE
CORE
CORE
CORE
 N6Kashya21DDDisregistr N6KashyaUTC
merRequestResult> Kashya::MemoryManager::registerConsumerAsync(K
CORE
CORE
CORE
CORE
leTimer_i called handleTimer_i cUTC
CORE
CORE
CORE
CORE
CORE
CORE
CORE
CORE
d=0,coreThresholeshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
tr N6Kashya19Mirregistr N6KashyaUTC
uchar
al14TentativeVal
CORE
CORE
onSnapTagInfo=NoplicationSnapTag88438992066163,son,systemTime=14on),event=NoOptigPipeInfo=NoOption,flushMirrorinapAuxInfo=NoOpti
CORE
CORE
highLoadDiskMana	
State = (manualInitEndTimeStamp=(transactionCounter=18446744073709551615,timeCou
CORE
CORE
rierInternal-SiteUID(0x5189db8372028e55) : reqs=0 queues=0
GATE KEEPER : (GateKe
CORE
CORE
emptyMemoryAllocMemoryAllocationUTC
uchar
al14TentativeVal
CORE
CORE
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
feature disabledIMPL::openTask_iUTC
iodicVerifierPinger_AO_IMPL::openTask_i(const Kashya::GroupGridT
CORE
CORE
D=(kVolSlot=8415replicationLinkIionID=870125276,
CORE
CORE
CORE
CORE
CORE
CORE
CORE
CORE
7200,coreThreshoeshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
)registered in mistered in map. =GlobalCopy(SiteUID(0x1f1f99f3d17c5330) 0) ,deststerPipePhase2_i(const Kashya::S
CORE
@I~ 
CORE
CORE
CORE
ned; entering maain working loopUTC
  t_diskManagerHighLoadDelayTime = 300000000  t_diskManagerHighL
CORE
CORE
ned; entering maain working loopUTC
  t_diskManagerHighLoadDelayTime = 300000000  t_diskManagerHighL
CORE
CORE
N6Kashya18Kashyaregistr N6KashyaUTC
  t_diskManagerHighLoadDelayTime = 300000000  t_diskManagerHighL
CORE
CORE
highLoadDiskMana
rID=115537413494emory SubConsumeoupInfo = GroupMulated() = 0 *griteMetaData.bReg
CORE
CORE
highLoadDiskMana
CORE
CORE
tr N6Kashya19Asyregistr N6KashyaUTC
uchar
al14TentativeVal
CORE
CORE
reThreshold=0,fueshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
tr N6Kashya19Asyregistr N6KashyaUTC
uchar
al14TentativeVal
CORE
CORE
g finised m_nameclosing finised D(0x1f1f99f3d17clobalCopy(SiteUI5,globalCopyID=GolSlot=128474342groupCopyRID=(kVStreamReleaser#(
CORE
CORE
g finised m_nameclosing finised D(0x1f1f99f3d17clobalCopy(SiteUI6,globalCopyID=GolSlot=187428361groupCopyRID=(kVStreamReleaser#(
CORE
CORE
g finised m_nameclosing finised (0x1f1f99f3d17c5obalCopy(SiteUID,globalCopyID=GlolSlot=800836368groupCopyRID=(kVStreamReleaser#(
CORE
CORE
g finised m_nameclosing finised (0x1f1f99f3d17c5obalCopy(SiteUID,globalCopyID=GlolSlot=731212328groupCopyRID=(kVStreamReleaser#(
CORE
CORE
g finised m_nameclosing finised (0x1f1f99f3d17c5obalCopy(SiteUID,globalCopyID=GlolSlot=753668574groupCopyRID=(kVStreamReleaser#(
CORE
CORE
olSlot=197480512groupCopyRID=(kVStreamReleaser#(
CORE
CORE
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
CORE
CORE
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
CORE
CORE
11566828308062536682830806253568UTC
uchar
al14TentativeVal
CORE
CORE
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
CORE
CORE
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
CORE
CORE
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
CORE
CORE
gridSourceSequenurceSequenceDatae=14884389918876Option,systemTimOption),event=NooringPipeInfo=NoOption,flushMirrn,snapAuxInfo=No
CORE
CORE
d17c5330) 0) ),gteUID(0x1f1f99f3ID=GlobalCopy(Si43425,globalCopy
CORE
CORE
SanDiscoveryBoxMProxyManager<SanUTC
1SanDiscoveryBoxMgrProxy_AO_IMPLE, pid=28760/5770, config=(alert
CORE
CORE
egistr N6Kashya1registr N6Kashyashold=7200,coreTLevel=0,killThrereshold=10,alert config=(alertTh pid=13070/5770,ontrol_AO_IMPLE,
CORE
CORE
egistr N6Kashya1registr N6KashyaThreshold=7200,clertLevel=0,killrtThreshold=10,a770, config=(alePLE, pid=13097/5er14Ponger_AO_IM
Qk/NjyJ
CORE
CORE
egistr N6Kashya1registr N6KashyaThreshold=7200,clertLevel=0,killrtThreshold=10,a770, config=(alePLE, pid=13098/5er14Pinger_AO_IM
CORE
CORE
reThreshold=0,fueshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader29InitDMContentProvider_AO_IMPLE, pid=13099/5770, config=(aler
CORE
CORE
oreThreshold=0,feshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader30InitDMContentRetriever_AO_IMPLE, pid=13100/5770, config=(ale
CORE
CORE
coreThreshold=0,eshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader15Chunker_AO_IMPLE, pid=13101/5770, config=(alertThreshold=10,
[{X#
CORE
CORE
egistr N6Kashya1registr N6KashyallThreshold=7200,alertLevel=0,kilertThreshold=10/5770, config=(aIMPLE, pid=13102er16Receiver_AO_
CORE
CORE
egistr N6Kashya1registr N6Kashya,killThreshold=7=10,alertLevel=0=(alertThreshold104/5770, configAO_IMPLE, pid=13er19Transmitter_
CORE
CORE
egistr N6Kashya1registr N6Kashyaold=7200,coreThrvel=0,killThreshshold=10,alertLeonfig=(alertThreid=13105/5770, civer_AO_IMPLE, p
E1!B{
CORE
CORE
egistr N6Kashya1registr N6KashyakillThreshold=7210,alertLevel=0,(alertThreshold=06/5770, config=O_IMPLE, pid=131FlowController_A
{dR7
CORE
CORE
egistr N6Kashya1registr N6Kashyashold=7200,coreTLevel=0,killThrereshold=10,alert config=(alertTh pid=13107/5770,roller_AO_IMPLE,
CORE
CORE
egistr N6Kashya1registr N6KashyaThreshold=7200,clertLevel=0,killrtThreshold=10,a770, config=(alePLE, pid=13108/5fierPinger_AO_IM
CORE
CORE
oreThreshold=0,feshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader30PeriodicVerifierPonger_AO_IMPLE, pid=13109/5770, config=(ale
/lib64/ld-linux-x86-64.so.2
 g~ 
@wl#
@g~ 
`I~ 
@e~ 
PJy&
`;Z 
0|T(
 AU 
 LZ 
pIZ 
0YZ 
P\y&
`My&
@[U 
 )U 
GOT-/lib64/ld-linux-x86-64.so.2
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
GOT-/home/kos/kashya/archive/cst/libCSP-HTTP.so
[stack]
GOT-/home/kos/kashya/archive/cst/libccme_asym.so
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
/home/kos/kashya/archive/cst/libCSP-HTTP.so
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
GOT-/home/kos/kashya/archive/cst/libcryptocme.so
GOT-/home/kos/kashya/archive/cst/libccme_base.so
GOT-/home/kos/kashya/archive/cst/libccme_base_non_fips.so
GOT-/home/kos/kashya/archive/cst/libccme_asym.so
GOT-/home/kos/kashya/archive/cst/libCSP-Security.so
GOT-/home/kos/kashya/archive/cst/libCSP-HTTP.so
GOT-/home/kos/kashya/archive/cst/libcryptocme.so
GOT-/home/kos/kashya/archive/cst/libccme_base.so
GOT-/home/kos/kashya/archive/cst/libCSP-Security.so
GOT-/home/kos/kashya/archive/cst/libccme_base_non_fips.so
/home/kos/kashya/archive/cst/libCSP-Security.so
/home/kos/kashya/archive/cst/libccme_asym.so
[stack]
[stack]
[stack]
[stack]
[stack]
[stack]
/home/kos/kashya/archive/cst/libccme_base_non_fips.so
/home/kos/kashya/archive/cst/libccme_base.so
/home/kos/kashya/archive/cst/libcryptocme.so
[stack]
[stack]
[stack]
[stack]
/usr/lib/libstorssl64.so
GOT-/usr/lib/libstorssl64.so
GOT-/usr/lib/libstorssl64.so
/home/kos/kashya/archive/cst/libCSP-lb.so
/home/kos/kashya/archive/cst/libosysrtxml.so
/home/kos/kashya/archive/cst/libCSP-XML.so
/lib/x86_64-linux-gnu/libaudit.so.1
/lib/x86_64-linux-gnu/libtinfo.so.5
/lib/x86_64-linux-gnu/libncurses.so.5
/usr/kashya/lib/libasan.so.1
/usr/lib/x86_64-linux-gnu/libssl.so.1.0.0
/lib/x86_64-linux-gnu/libkeyutils.so.1
/usr/lib/x86_64-linux-gnu/libkrb5support.so.0
/usr/lib/x86_64-linux-gnu/libk5crypto.so.3
/usr/lib/x86_64-linux-gnu/libkrb5.so.3
/usr/lib/libstorpds64.so
/usr/lib/libstorcore64.so
/lib/x86_64-linux-gnu/libutil.so.1
/lib/x86_64-linux-gnu/libz.so.1
/home/kos/boost/libboost_chrono.so.1.61.0
/home/kos/kashya/archive/cst/libCSP-RT.so
/home/kos/kashya/archive/cst/libCSP.so
/lib/x86_64-linux-gnu/libpam.so.0
/home/kos/kashya/archive/clp/libelmtvcsd3_4_0.so
/home/kos/kashya/archive/clp/libelmtracesd3_4_0.so
/home/kos/kashya/archive/clp/libelmcsd3_4_0.so
/usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0
/lib/x86_64-linux-gnu/libcrypt.so.1
/home/kos/boost/libboost_timer.so.1.61.0
/home/kos/boost/libboost_thread.so.1.61.0
/lib/x86_64-linux-gnu/libaio.so.1
/usr/lib/libOpenIPMIutils.so.0
/usr/lib/libOpenIPMIposix.so.0
/usr/lib/libOpenIPMI.so.0
/home/kos/kashya/archive/cst/libCST-Admin.so
/home/kos/kashya/archive/cst/libCSPJNIWrappers.so
/home/kos/kashya/archive/cst/libCSP-C.so
/home/kos/kashya/archive/lib/libngs-release.so
/home/kos/kashya/archive/lib/libmpi_tls_sw-release.so
/home/kos/kashya/archive/lib/libmpi_tls_fips-release.so
/home/kos/kashya/archive/lib/libcrypto_services-release.so
/usr/kashya/lib/libcurl.so.4
/usr/kashya/lib/libxmlrpc_xmltok.so.3
/usr/kashya/lib/libxmlrpc_xmlparse.so.3
/usr/kashya/lib/libxmlrpc_util.so.3
/usr/kashya/lib/libxmlrpc_client.so.3
/usr/kashya/lib/libxmlrpc.so.3
/usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2
/lib/x86_64-linux-gnu/libcom_err.so.2
/lib/x86_64-linux-gnu/libresolv.so.2
/lib/x86_64-linux-gnu/librt.so.1
/lib/x86_64-linux-gnu/libdl.so.2
/home/kos/boost/libboost_system.so.1.61.0
/usr/kashya/lib/libewoc.so
/lib/x86_64-linux-gnu/libc.so.6
/lib/x86_64-linux-gnu/libpthread.so.0
/lib/x86_64-linux-gnu/libgcc_s.so.1
/lib/x86_64-linux-gnu/libm.so.6
/usr/kashya/lib/libstdc++.so.6
/home/kos/kashya/archive/lib/libxparam-release.so
/home/kos/kashya/archive/lib/libtransmitter_versions-release.so
Pw$!
/home/kos/kashya/archive/lib/libtransmitter-release.so
/home/kos/kashya/archive/lib/libsymm_splitter-release.so
/home/kos/kashya/archive/lib/libreplication_libs-release.so
/home/kos/kashya/archive/lib/libreceiver_versions-release.so
/home/kos/kashya/archive/lib/libreceiver-release.so
/usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0
/home/kos/kashya/archive/lib/libmpi_kashya_global-release.so
/usr/kashya/lib/libjemalloc.so.1
/home/kos/kashya/archive/lib/libewoc_rp-release.so
/usr/kashya/lib/libddvdisk.so
/home/kos/boost/libboost_wserialization.so.1.61.0
/home/kos/boost/libboost_serialization.so.1.61.0
/home/kos/kashya/archive/lib/libarray_infra-release.so
/usr/kashya/lib/libDDBoost.so
/usr/kashya/lib/libACE.so.6.3.3
pthread-internal-user
GOT-/home/kos/kashya/archive/cst/libCSP-lb.so
GOT-/lib/x86_64-linux-gnu/libaudit.so.1
GOT-/home/kos/kashya/archive/cst/libCSP-XML.so
GOT-/home/kos/kashya/archive/cst/libCSP-XML.so
GOT-/home/kos/kashya/archive/cst/libosysrtxml.so
GOT-/home/kos/kashya/archive/cst/libosysrtxml.so
GOT-/home/kos/kashya/archive/cst/libCSP-lb.so
GOT-/lib/x86_64-linux-gnu/libncurses.so.5
GOT-/lib/x86_64-linux-gnu/libncurses.so.5
GOT-/lib/x86_64-linux-gnu/libtinfo.so.5
GOT-/lib/x86_64-linux-gnu/libtinfo.so.5
GOT-/lib/x86_64-linux-gnu/libaudit.so.1
GOT-/usr/lib/x86_64-linux-gnu/libssl.so.1.0.0
GOT-/usr/lib/x86_64-linux-gnu/libssl.so.1.0.0
GOT-/usr/kashya/lib/libasan.so.1
GOT-/usr/kashya/lib/libasan.so.1
GOT-/usr/lib/x86_64-linux-gnu/libk5crypto.so.3
GOT-/usr/lib/x86_64-linux-gnu/libkrb5support.so.0
GOT-/usr/lib/x86_64-linux-gnu/libkrb5support.so.0
GOT-/lib/x86_64-linux-gnu/libkeyutils.so.1
GOT-/lib/x86_64-linux-gnu/libkeyutils.so.1
GOT-/usr/lib/libstorpds64.so
GOT-/usr/lib/x86_64-linux-gnu/libkrb5.so.3
GOT-/usr/lib/x86_64-linux-gnu/libkrb5.so.3
GOT-/usr/lib/x86_64-linux-gnu/libk5crypto.so.3
GOT-/lib/x86_64-linux-gnu/libutil.so.1
GOT-/usr/lib/libstorcore64.so
GOT-/usr/lib/libstorcore64.so
GOT-/usr/lib/libstorpds64.so
GOT-/home/kos/boost/libboost_chrono.so.1.61.0
GOT-/lib/x86_64-linux-gnu/libz.so.1
GOT-/lib/x86_64-linux-gnu/libz.so.1
GOT-/lib/x86_64-linux-gnu/libutil.so.1
GOT-/lib/x86_64-linux-gnu/libpam.so.0
GOT-/home/kos/kashya/archive/cst/libCSP.so
GOT-/home/kos/kashya/archive/cst/libCSP.so
GOT-/home/kos/kashya/archive/cst/libCSP-RT.so
GOT-/home/kos/kashya/archive/cst/libCSP-RT.so
GOT-/home/kos/boost/libboost_chrono.so.1.61.0
GOT-/home/kos/kashya/archive/clp/libelmcsd3_4_0.so
GOT-/home/kos/kashya/archive/clp/libelmtracesd3_4_0.so
GOT-/home/kos/kashya/archive/clp/libelmtracesd3_4_0.so
GOT-/home/kos/kashya/archive/clp/libelmtvcsd3_4_0.so
GOT-/home/kos/kashya/archive/clp/libelmtvcsd3_4_0.so
GOT-/lib/x86_64-linux-gnu/libpam.so.0
GOT-/home/kos/boost/libboost_timer.so.1.61.0
GOT-/lib/x86_64-linux-gnu/libcrypt.so.1
GOT-/lib/x86_64-linux-gnu/libcrypt.so.1
GOT-/usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0
GOT-/usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0
GOT-/home/kos/kashya/archive/clp/libelmcsd3_4_0.so
GOT-/usr/lib/libOpenIPMIutils.so.0
GOT-/lib/x86_64-linux-gnu/libaio.so.1
GOT-/lib/x86_64-linux-gnu/libaio.so.1
GOT-/home/kos/boost/libboost_thread.so.1.61.0
GOT-/home/kos/boost/libboost_thread.so.1.61.0
GOT-/home/kos/boost/libboost_timer.so.1.61.0
GOT-/home/kos/kashya/archive/cst/libCST-Admin.so
GOT-/usr/lib/libOpenIPMI.so.0
GOT-/usr/lib/libOpenIPMI.so.0
GOT-/usr/lib/libOpenIPMIposix.so.0
GOT-/usr/lib/libOpenIPMIposix.so.0
GOT-/usr/lib/libOpenIPMIutils.so.0
GOT-/home/kos/kashya/archive/lib/libngs-release.so
GOT-/home/kos/kashya/archive/cst/libCSP-C.so
GOT-/home/kos/kashya/archive/cst/libCSP-C.so
GOT-/home/kos/kashya/archive/cst/libCSPJNIWrappers.so
GOT-/home/kos/kashya/archive/cst/libCSPJNIWrappers.so
GOT-/home/kos/kashya/archive/cst/libCST-Admin.so
GOT-/home/kos/kashya/archive/lib/libcrypto_services-release.so
GOT-/home/kos/kashya/archive/lib/libmpi_tls_fips-release.so
GOT-/home/kos/kashya/archive/lib/libmpi_tls_fips-release.so
GOT-/home/kos/kashya/archive/lib/libmpi_tls_sw-release.so
GOT-/home/kos/kashya/archive/lib/libmpi_tls_sw-release.so
GOT-/home/kos/kashya/archive/lib/libngs-release.so
GOT-/usr/kashya/lib/libxmlrpc_xmltok.so.3
GOT-/usr/kashya/lib/libcurl.so.4
GOT-/usr/kashya/lib/libcurl.so.4
GOT-/home/kos/kashya/archive/lib/libcrypto_services-release.so
GOT-/usr/kashya/lib/libxmlrpc_client.so.3
GOT-/usr/kashya/lib/libxmlrpc_util.so.3
GOT-/usr/kashya/lib/libxmlrpc_util.so.3
GOT-/usr/kashya/lib/libxmlrpc_xmlparse.so.3
GOT-/usr/kashya/lib/libxmlrpc_xmlparse.so.3
GOT-/usr/kashya/lib/libxmlrpc_xmltok.so.3
/usr/lib/libsymapi64.so
GOT-/usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2
GOT-/usr/lib/libsymapi64.so
GOT-/usr/lib/libsymapi64.so
GOT-/usr/kashya/lib/libxmlrpc.so.3
GOT-/usr/kashya/lib/libxmlrpc.so.3
GOT-/usr/kashya/lib/libxmlrpc_client.so.3
GOT-/lib/x86_64-linux-gnu/librt.so.1
GOT-/lib/x86_64-linux-gnu/libresolv.so.2
GOT-/lib/x86_64-linux-gnu/libresolv.so.2
GOT-/lib/x86_64-linux-gnu/libcom_err.so.2
GOT-/lib/x86_64-linux-gnu/libcom_err.so.2
GOT-/usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2
GOT-/usr/kashya/lib/libewoc.so
GOT-/home/kos/boost/libboost_system.so.1.61.0
GOT-/home/kos/boost/libboost_system.so.1.61.0
GOT-/lib/x86_64-linux-gnu/libdl.so.2
GOT-/lib/x86_64-linux-gnu/libdl.so.2
GOT-/lib/x86_64-linux-gnu/librt.so.1
GOT-/lib/x86_64-linux-gnu/libgcc_s.so.1
GOT-/lib/x86_64-linux-gnu/libpthread.so.0
GOT-/lib/x86_64-linux-gnu/libpthread.so.0
GOT-/lib/x86_64-linux-gnu/libc.so.6
GOT-/lib/x86_64-linux-gnu/libc.so.6
GOT-/usr/kashya/lib/libewoc.so
GOT-/home/kos/kashya/archive/lib/libxparam-release.so
GOT-/usr/kashya/lib/libstdc++.so.6
GOT-/usr/kashya/lib/libstdc++.so.6
GOT-/lib/x86_64-linux-gnu/libm.so.6
GOT-/lib/x86_64-linux-gnu/libm.so.6
GOT-/lib/x86_64-linux-gnu/libgcc_s.so.1
GOT-/home/kos/kashya/archive/lib/libsymm_splitter-release.so
GOT-/home/kos/kashya/archive/lib/libtransmitter-release.so
GOT-/home/kos/kashya/archive/lib/libtransmitter-release.so
GOT-/home/kos/kashya/archive/lib/libtransmitter_versions-releas
GOT-/home/kos/kashya/archive/lib/libtransmitter_versions-releas
GOT-/home/kos/kashya/archive/lib/libxparam-release.so
GOT-/home/kos/kashya/archive/lib/libreceiver-release.so
GOT-/home/kos/kashya/archive/lib/libreceiver_versions-release.s
GOT-/home/kos/kashya/archive/lib/libreceiver_versions-release.s
GOT-/home/kos/kashya/archive/lib/libreplication_libs-release.so
GOT-/home/kos/kashya/archive/lib/libreplication_libs-release.so
GOT-/home/kos/kashya/archive/lib/libsymm_splitter-release.so
GOT-/usr/kashya/lib/libjemalloc.so.1
GOT-/home/kos/kashya/archive/lib/libmpi_kashya_global-release.s
GOT-/home/kos/kashya/archive/lib/libmpi_kashya_global-release.s
GOT-/usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0
GOT-/usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0
GOT-/home/kos/kashya/archive/lib/libreceiver-release.so
GOT-/home/kos/boost/libboost_wserialization.so.1.61.0
GOT-/usr/kashya/lib/libddvdisk.so
GOT-/usr/kashya/lib/libddvdisk.so
GOT-/home/kos/kashya/archive/lib/libewoc_rp-release.so
GOT-/home/kos/kashya/archive/lib/libewoc_rp-release.so
GOT-/usr/kashya/lib/libjemalloc.so.1
GOT-/usr/kashya/lib/libDDBoost.so
GOT-/home/kos/kashya/archive/lib/libarray_infra-release.so
GOT-/home/kos/kashya/archive/lib/libarray_infra-release.so
GOT-/home/kos/boost/libboost_serialization.so.1.61.0
GOT-/home/kos/boost/libboost_serialization.so.1.61.0
GOT-/home/kos/boost/libboost_wserialization.so.1.61.0
GOT-/usr/kashya/lib/libACE.so.6.3.3
GOT-/usr/kashya/lib/libACE.so.6.3.3
GOT-/usr/kashya/lib/libDDBoost.so
/lib64/ld-linux-x86-64.so.2
GOT-
GOT-
GOT-linux-vdso.so.1
GOT-linux-vdso.so.1
[stack]
[vdso]
[stack]
[vdso]
/home/kos/kashya/home/kos/kashya/archive/bin/release/replication
kvol=@/home/kos/kvol.txt boxRo
H)l$
+HZ 
ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
t_propertiesRefr
tion],[t_dynamicsyncTime => NoOpmicDontChangeToAoOption],[t_dynaolAllStream => N
[MB] shrMemory = = 87.3438 [MB] UTC
uspected at N6Kashya31AccumulatorManagerTimer_AO_IMPLE, pid=5781/5770, config=(a
^t>Ce
6%5M
%%%%%%%%%%%%%%%%
calling run_reveUTC
uchar
al14TentativeVal
t in grace perioperiod. ignoringUTC
uchar
al14TentativeVal
Threshold=0,fulleshold=0,full=1)UTC
teUID(0x1f1f99f3d17c5330)_KBox2)912_KBox2:  switchTo_GettingSess
reshold=0,full=1eshold=0,full=1)gistr N6Kashya30ConfigSettingsNotifier_AO_IMPLE, pid=5790/5770, config=(alertThreshold=10,alertL
LinuxAIOResultAgResultAggregator0
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5797/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5798/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5799/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5800/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5801/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5802/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5803/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5804/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5805/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5806/5770, config=(alertThreshold=10,alert
00,coreThresholdeshold=0,full=1)UTC
uchar
al14TentativeVal
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5808/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5809/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5810/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5811/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5812/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5813/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5814/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5815/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5816/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5817/5770, config=(alertThreshold=10,alert
7200,coreThreshoeshold=0,full=1)UTC
uchar
al14TentativeVal
RejectedLRsSet_iperiodicClearRejUTC
200,coreThresholeshold=0,full=1)UTC
Port=(0xf0de2fb7d33c4fbe,e_iSCSI),ifaceName=iface1,iqn=iqn.1992-
old=3600,full=1)
registr gistr N6Kashya26InitiatorRegulator_AO_IMPLE, pid=5862/5770, config=(alertThreshold=10,alertLevel
old=3600,full=1)
registr gistr N6Kashya26InitiatorRegulator_AO_IMPLE, pid=5863/5770, config=(alertThreshold=10,alertLevel
 PID: 5770 Info:
andle_sendResulthandle_sendResulUTC
Reactor.cc PID: 06 File Portableed: false Line 1g=Assertion fail
3000,bDynamicByTrAsync=3000,bDyncation=0,__futurtion),useDedupliuture_use__=NoOp_=NoOption)),__f00,__future_use_hputForAsync=350
yt_defaultTimeRP
pTaskID=(sessionID=330453115,replicationLinkID=(kVolSlot=1046948
00,bDynamicByThrsync=3000,bDynamon),useDeduplicaure_use__=NoOptiNoOption)),__fut,__future_use__=utForAsync=350005000,minThroughp
periodicVerifier
oupCopyRID=(kVolSlot=1552325066,globalCopyID=GlobalCopy(SiteUID(0x1f1f99f3d17c53
x5189db8372028e55) using 0 credit 0 min 2500 max 1024000 counter
yt_defaultTimeRP
T_STARTED groupCopyRID = (kVolSlot=1296285775,globalCopyID=Globa
D=GlobalCopy(Sit5816395,srcCopyIroupTaskID=(sessh() = 3 taskIF->
 = e_consistencyncyVerifierLightption,initFromSnapTag=NoOption,isMirrorLink=0,hideSnapshot=0,__future_use__=NoOption) verifierPo
yt_defaultTimeRP
yID=GlobalCopy(S330) 0) ,destCop
0,bDynamicByThroync=3000,bDynamin),useDeduplicatre_use__=NoOptiooOption)),__futu__future_use__=NtForAsync=35000,000,minThroughpu
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
3000,bDynamicByTrAsync=3000,bDyncation=0,__futurtion),useDedupliuture_use__=NoOp_=NoOption)),__f00,__future_use_hputForAsync=350
0,bDynamicByThroync=3000,bDynamin),useDeduplicatre_use__=NoOptiooOption)),__futu__future_use__=NtForAsync=35000,000,minThroughpu
000,bDynamicByThAsync=3000,bDynaation=0,__futureion),useDeduplicture_use__=NoOpt=NoOption)),__fu0,__future_use__putForAsync=3500
yt_defaultTimeRP
 SiteUID(0x1f1f9pCopy(1046948393ID = Option(Grou) 0) ) groupCopy
D=GlobalCopy(Sit4100552,srcCopyIroupTaskID=(sessh() = 3 taskIF->
T_STARTED groupCopyRID = (kVolSlot=1091437263,globalCopyID=Globa
replProcessCpuUslProcessCpuUsage
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
yt_defaultTimeRP
ntPipeRole=e_asyncPipe,manualInitPercent=NoOption,manualInitPace
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
yt_defaultTimeRP
D=GlobalCopy(Sit1697416,srcCopyIroupTaskID=(sessh() = 3 taskIF->
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
3000,bDynamicByTrAsync=3000,bDyncation=0,__futurtion),useDedupliuture_use__=NoOp_=NoOption)),__f00,__future_use_hputForAsync=350
T_STARTED groupCopyRID = (kVolSlot=107521471,globalCopyID=Global
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
yt_defaultTimeRP
8372028e55) 0) )SiteUID(0x5189dbpyID=GlobalCopy(5330) 0) ,destCo
8888576 maxmem =6 maxmem = 12800UTC
skID=(sessionID=738358216,replicationLinkID=(kVolSlot=1754504586
iteUID(0x1f1f99fCopy(316184507 SD = Option(Group 0) ) groupCopyI
registr N6Kashya
registr gistr N6Kashya25CopyTaskWithinRep_AO_IMPLE, pid=5900/5770, config=(alertThreshold=10,alertLevel=
is_lock_free() =_lock_free() = 1UTC
ReadBufSize = 13t_IPTargetStaticBufSize = 65536 TargetRecvSocket
memoryManagerStr
Non grid group -group - continueUTC
30) 0) ,destCopy0x1f1f99f3d17c53balCopy(SiteUID(28,srcCopyID=Glo
gridTargetSequenrgetSequenceData7,replicationLinkID=(kVolSlot=953668218,srcCopyInter=5516309168409158023,timeCouactionCounter=75
ld=0,coreThreshoeshold=0,full=1)UTC
uchar
al14TentativeVal
old=0,coreThresheshold=0,full=1)UTC
al10TypedValueIiN15xParam_internceIDE
 taskID = (groupb8372028e55) 0) (SiteUID(0x5189dopyID=GlobalCopyc5330) 0) ,destCID(0x1f1f99f3d17GlobalCopy(SiteU
lobalCopy(SiteUID(0x5189db8372028e55) 0) )),gridCopyID=0) m_mark
rtyCountImproved
roupTaskID=(sessionID=924208973,replicationLinkID=(kVolSlot=7536
rtyCountImproved
GlobalCopy(SiteUID(0x5189db8372028e55) 0) )),gridCopyID=0) m_mar
rtyCountImproved
srcCopyID=GloballSlot=433933344,ationLinkID=(kVo468088759,replic
rtyCountImproved
GlobalCopy(SiteUID(0x5189db8372028e55) 0) )),gridCopyID=0) m_mar
rtyCountImproved
gistr N6Kashya16registr N6KashyaUTC
merRequestResult> Kashya::MemoryManager::registerConsumerAsync(K
 a_status = e_SEsetStatus:  a_stntext.msgId = 27th = NoOption coc9abd context.pa = 0xed5bcddb7beion context.guidtender optimizat
 = (groupTaskID=(sessionID=1194680084,replicationLinkID=(kVolSlot=1389836367,src
pTaskID=(sessionID=1194680084,re
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
EWOC:[BURST](7):017/03/01 15:59:UTC
uchar
al14TentativeVal
(0x7f940fbef700)0x7f940fbef700)
uchar
al14TentativeVal
7483648 m_currenntMemory = 28476ory = 2147483648 m_currentMemory = 28476,])
 siteUID = SiteUID(0x5189db8372028e55), ewocHandshak
d=0,coreThresholeshold=0,full=1)UTC
d=0,coreThresholeshold=0,full=1)UTC
d=0,coreThresholeshold=0,full=1)UTC
d=0,coreThresholeshold=0,full=1)UTC
= Pair(10240000000000,128000000)UTC
getDigest: creat
Manager::registerConsumerAsync(K
getDigest: creat
Manager::registerConsumerAsync(K
getDigest: creat
Manager::registerConsumerAsync(K
getDigest: creat
Manager::registerConsumerAsync(K
getDigest: creat
Manager::registerConsumerAsync(K
a29InstantRecoveregistr N6KashyaUTC
uchar
al14TentativeVal
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
old=0,coreThresheshold=0,full=1)UTC
uchar
al14TentativeVal
r N6Kashya20XDisregistr N6KashyaUTC
merRequestResult> Kashya::MemoryManager::registerConsumerAsync(K
 N6Kashya21DDDisregistr N6KashyaUTC
merRequestResult> Kashya::MemoryManager::registerConsumerAsync(K
leTimer_i called handleTimer_i cUTC
d=0,coreThresholeshold=0,full=1)UTC
uchar
al14TentativeVal
tr N6Kashya19Mirregistr N6KashyaUTC
uchar
al14TentativeVal
onSnapTagInfo=NoplicationSnapTag88438992066163,son,systemTime=14on),event=NoOptigPipeInfo=NoOption,flushMirrorinapAuxInfo=NoOpti
highLoadDiskMana	
State = (manualInitEndTimeStamp=(transactionCounter=18446744073709551615,timeCou
rierInternal-SiteUID(0x5189db8372028e55) : reqs=0 queues=0
GATE KEEPER : (GateKe
emptyMemoryAllocMemoryAllocationUTC
uchar
al14TentativeVal
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
feature disabledIMPL::openTask_iUTC
iodicVerifierPinger_AO_IMPL::openTask_i(const Kashya::GroupGridT
D=(kVolSlot=8415replicationLinkIionID=870125276,
7200,coreThreshoeshold=0,full=1)UTC
uchar
al14TentativeVal
)registered in mistered in map. =GlobalCopy(SiteUID(0x1f1f99f3d17c5330) 0) ,deststerPipePhase2_i(const Kashya::S
@I~ 
ned; entering maain working loopUTC
  t_diskManagerHighLoadDelayTime = 300000000  t_diskManagerHighL
ned; entering maain working loopUTC
  t_diskManagerHighLoadDelayTime = 300000000  t_diskManagerHighL
N6Kashya18Kashyaregistr N6KashyaUTC
  t_diskManagerHighLoadDelayTime = 300000000  t_diskManagerHighL
highLoadDiskMana
rID=115537413494emory SubConsumeoupInfo = GroupMulated() = 0 *griteMetaData.bReg
highLoadDiskMana
tr N6Kashya19Asyregistr N6KashyaUTC
uchar
al14TentativeVal
reThreshold=0,fueshold=0,full=1)UTC
uchar
al14TentativeVal
tr N6Kashya19Asyregistr N6KashyaUTC
uchar
al14TentativeVal
g finised m_nameclosing finised D(0x1f1f99f3d17clobalCopy(SiteUI5,globalCopyID=GolSlot=128474342groupCopyRID=(kVStreamReleaser#(
g finised m_nameclosing finised D(0x1f1f99f3d17clobalCopy(SiteUI6,globalCopyID=GolSlot=187428361groupCopyRID=(kVStreamReleaser#(
g finised m_nameclosing finised (0x1f1f99f3d17c5obalCopy(SiteUID,globalCopyID=GlolSlot=800836368groupCopyRID=(kVStreamReleaser#(
g finised m_nameclosing finised (0x1f1f99f3d17c5obalCopy(SiteUID,globalCopyID=GlolSlot=731212328groupCopyRID=(kVStreamReleaser#(
g finised m_nameclosing finised (0x1f1f99f3d17c5obalCopy(SiteUID,globalCopyID=GlolSlot=753668574groupCopyRID=(kVStreamReleaser#(
olSlot=197480512groupCopyRID=(kVStreamReleaser#(
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
11566828308062536682830806253568UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
gridSourceSequenurceSequenceDatae=14884389918876Option,systemTimOption),event=NooringPipeInfo=NoOption,flushMirrn,snapAuxInfo=No
d17c5330) 0) ),gteUID(0x1f1f99f3ID=GlobalCopy(Si43425,globalCopy
SanDiscoveryBoxMProxyManager<SanUTC
1SanDiscoveryBoxMgrProxy_AO_IMPLE, pid=28760/5770, config=(alert
egistr N6Kashya1registr N6Kashyashold=7200,coreTLevel=0,killThrereshold=10,alert config=(alertTh pid=13070/5770,ontrol_AO_IMPLE,
egistr N6Kashya1registr N6KashyaThreshold=7200,clertLevel=0,killrtThreshold=10,a770, config=(alePLE, pid=13097/5er14Ponger_AO_IM
Qk/NjyJ
egistr N6Kashya1registr N6KashyaThreshold=7200,clertLevel=0,killrtThreshold=10,a770, config=(alePLE, pid=13098/5er14Pinger_AO_IM
reThreshold=0,fueshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader29InitDMContentProvider_AO_IMPLE, pid=13099/5770, config=(aler
oreThreshold=0,feshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader30InitDMContentRetriever_AO_IMPLE, pid=13100/5770, config=(ale
coreThreshold=0,eshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader15Chunker_AO_IMPLE, pid=13101/5770, config=(alertThreshold=10,
[{X#
egistr N6Kashya1registr N6KashyallThreshold=7200,alertLevel=0,kilertThreshold=10/5770, config=(aIMPLE, pid=13102er16Receiver_AO_
egistr N6Kashya1registr N6Kashya,killThreshold=7=10,alertLevel=0=(alertThreshold104/5770, configAO_IMPLE, pid=13er19Transmitter_
egistr N6Kashya1registr N6Kashyaold=7200,coreThrvel=0,killThreshshold=10,alertLeonfig=(alertThreid=13105/5770, civer_AO_IMPLE, p
E1!B{
egistr N6Kashya1registr N6KashyakillThreshold=7210,alertLevel=0,(alertThreshold=06/5770, config=O_IMPLE, pid=131FlowController_A
{dR7
egistr N6Kashya1registr N6Kashyashold=7200,coreTLevel=0,killThrereshold=10,alert config=(alertTh pid=13107/5770,roller_AO_IMPLE,
egistr N6Kashya1registr N6KashyaThreshold=7200,clertLevel=0,killrtThreshold=10,a770, config=(alePLE, pid=13108/5fierPinger_AO_IM
oreThreshold=0,feshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader30PeriodicVerifierPonger_AO_IMPLE, pid=13109/5770, config=(ale
CORE
Pwl#
digest
bsafe
datacache
track
default
wireindex
memory
default
/home/kos/kashya/home/kos/kashya/archive/bin/release/replication
kvol=@/home/kos/kvol.txt boxRo
H)l$
+HZ 
ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
t_propertiesRefr
tion],[t_dynamicsyncTime => NoOpmicDontChangeToAoOption],[t_dynaolAllStream => N
[MB] shrMemory = = 87.3438 [MB] UTC
uspected at N6Kashya31AccumulatorManagerTimer_AO_IMPLE, pid=5781/5770, config=(a
^t>Ce
6%5M
%%%%%%%%%%%%%%%%
calling run_reveUTC
uchar
al14TentativeVal
t in grace perioperiod. ignoringUTC
uchar
al14TentativeVal
Threshold=0,fulleshold=0,full=1)UTC
teUID(0x1f1f99f3d17c5330)_KBox2)912_KBox2:  switchTo_GettingSess
reshold=0,full=1eshold=0,full=1)gistr N6Kashya30ConfigSettingsNotifier_AO_IMPLE, pid=5790/5770, config=(alertThreshold=10,alertL
LinuxAIOResultAgResultAggregator0
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5797/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5798/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5799/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5800/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5801/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5802/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5803/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5804/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5805/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5806/5770, config=(alertThreshold=10,alert
00,coreThresholdeshold=0,full=1)UTC
uchar
al14TentativeVal
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5808/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5809/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5810/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5811/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5812/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5813/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5814/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5815/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5816/5770, config=(alertThreshold=10,alert
hreshold=0,full=eshold=0,full=1)gistr N6Kashya31SplitCommSocketReceiver_AO_IMPLE, pid=5817/5770, config=(alertThreshold=10,alert
7200,coreThreshoeshold=0,full=1)UTC
uchar
al14TentativeVal
RejectedLRsSet_iperiodicClearRejUTC
200,coreThresholeshold=0,full=1)UTC
Port=(0xf0de2fb7d33c4fbe,e_iSCSI),ifaceName=iface1,iqn=iqn.1992-
old=3600,full=1)
registr gistr N6Kashya26InitiatorRegulator_AO_IMPLE, pid=5862/5770, config=(alertThreshold=10,alertLevel
old=3600,full=1)
registr gistr N6Kashya26InitiatorRegulator_AO_IMPLE, pid=5863/5770, config=(alertThreshold=10,alertLevel
 PID: 5770 Info:
andle_sendResulthandle_sendResulUTC
Reactor.cc PID: 06 File Portableed: false Line 1g=Assertion fail
3000,bDynamicByTrAsync=3000,bDyncation=0,__futurtion),useDedupliuture_use__=NoOp_=NoOption)),__f00,__future_use_hputForAsync=350
yt_defaultTimeRP
pTaskID=(sessionID=330453115,replicationLinkID=(kVolSlot=1046948
00,bDynamicByThrsync=3000,bDynamon),useDeduplicaure_use__=NoOptiNoOption)),__fut,__future_use__=utForAsync=350005000,minThroughp
periodicVerifier
oupCopyRID=(kVolSlot=1552325066,globalCopyID=GlobalCopy(SiteUID(0x1f1f99f3d17c53
x5189db8372028e55) using 0 credit 0 min 2500 max 1024000 counter
yt_defaultTimeRP
T_STARTED groupCopyRID = (kVolSlot=1296285775,globalCopyID=Globa
D=GlobalCopy(Sit5816395,srcCopyIroupTaskID=(sessh() = 3 taskIF->
 = e_consistencyncyVerifierLightption,initFromSnapTag=NoOption,isMirrorLink=0,hideSnapshot=0,__future_use__=NoOption) verifierPo
yt_defaultTimeRP
yID=GlobalCopy(S330) 0) ,destCop
0,bDynamicByThroync=3000,bDynamin),useDeduplicatre_use__=NoOptiooOption)),__futu__future_use__=NtForAsync=35000,000,minThroughpu
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
3000,bDynamicByTrAsync=3000,bDyncation=0,__futurtion),useDedupliuture_use__=NoOp_=NoOption)),__f00,__future_use_hputForAsync=350
0,bDynamicByThroync=3000,bDynamin),useDeduplicatre_use__=NoOptiooOption)),__futu__future_use__=NtForAsync=35000,000,minThroughpu
000,bDynamicByThAsync=3000,bDynaation=0,__futureion),useDeduplicture_use__=NoOpt=NoOption)),__fu0,__future_use__putForAsync=3500
yt_defaultTimeRP
 SiteUID(0x1f1f9pCopy(1046948393ID = Option(Grou) 0) ) groupCopy
D=GlobalCopy(Sit4100552,srcCopyIroupTaskID=(sessh() = 3 taskIF->
T_STARTED groupCopyRID = (kVolSlot=1091437263,globalCopyID=Globa
replProcessCpuUslProcessCpuUsage
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
yt_defaultTimeRP
ntPipeRole=e_asyncPipe,manualInitPercent=NoOption,manualInitPace
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
yt_defaultTimeRP
D=GlobalCopy(Sit1697416,srcCopyIroupTaskID=(sessh() = 3 taskIF->
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
3000,bDynamicByTrAsync=3000,bDyncation=0,__futurtion),useDedupliuture_use__=NoOp_=NoOption)),__f00,__future_use_hputForAsync=350
T_STARTED groupCopyRID = (kVolSlot=107521471,globalCopyID=Global
yt_defaultTimeRP
Initiator_AO_IMPL::executeBDMHeartbeat(Kashya::MPI_Future<Kashya
yt_defaultTimeRP
8372028e55) 0) )SiteUID(0x5189dbpyID=GlobalCopy(5330) 0) ,destCo
8888576 maxmem =6 maxmem = 12800UTC
skID=(sessionID=738358216,replicationLinkID=(kVolSlot=1754504586
iteUID(0x1f1f99fCopy(316184507 SD = Option(Group 0) ) groupCopyI
registr N6Kashya
registr gistr N6Kashya25CopyTaskWithinRep_AO_IMPLE, pid=5900/5770, config=(alertThreshold=10,alertLevel=
is_lock_free() =_lock_free() = 1UTC
ReadBufSize = 13t_IPTargetStaticBufSize = 65536 TargetRecvSocket
memoryManagerStr
Non grid group -group - continueUTC
30) 0) ,destCopy0x1f1f99f3d17c53balCopy(SiteUID(28,srcCopyID=Glo
gridTargetSequenrgetSequenceData7,replicationLinkID=(kVolSlot=953668218,srcCopyInter=5516309168409158023,timeCouactionCounter=75
ld=0,coreThreshoeshold=0,full=1)UTC
uchar
al14TentativeVal
old=0,coreThresheshold=0,full=1)UTC
al10TypedValueIiN15xParam_internceIDE
 taskID = (groupb8372028e55) 0) (SiteUID(0x5189dopyID=GlobalCopyc5330) 0) ,destCID(0x1f1f99f3d17GlobalCopy(SiteU
lobalCopy(SiteUID(0x5189db8372028e55) 0) )),gridCopyID=0) m_mark
rtyCountImproved
roupTaskID=(sessionID=924208973,replicationLinkID=(kVolSlot=7536
rtyCountImproved
GlobalCopy(SiteUID(0x5189db8372028e55) 0) )),gridCopyID=0) m_mar
rtyCountImproved
srcCopyID=GloballSlot=433933344,ationLinkID=(kVo468088759,replic
rtyCountImproved
GlobalCopy(SiteUID(0x5189db8372028e55) 0) )),gridCopyID=0) m_mar
rtyCountImproved
gistr N6Kashya16registr N6KashyaUTC
merRequestResult> Kashya::MemoryManager::registerConsumerAsync(K
 a_status = e_SEsetStatus:  a_stntext.msgId = 27th = NoOption coc9abd context.pa = 0xed5bcddb7beion context.guidtender optimizat
 = (groupTaskID=(sessionID=1194680084,replicationLinkID=(kVolSlot=1389836367,src
pTaskID=(sessionID=1194680084,re
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
uchar
al14TentativeVal
EWOC:[BURST](7):017/03/01 15:59:UTC
uchar
al14TentativeVal
(0x7f940fbef700)0x7f940fbef700)
uchar
al14TentativeVal
7483648 m_currenntMemory = 28476ory = 2147483648 m_currentMemory = 28476,])
 siteUID = SiteUID(0x5189db8372028e55), ewocHandshak
d=0,coreThresholeshold=0,full=1)UTC
d=0,coreThresholeshold=0,full=1)UTC
d=0,coreThresholeshold=0,full=1)UTC
d=0,coreThresholeshold=0,full=1)UTC
= Pair(10240000000000,128000000)UTC
getDigest: creat
Manager::registerConsumerAsync(K
getDigest: creat
Manager::registerConsumerAsync(K
getDigest: creat
Manager::registerConsumerAsync(K
getDigest: creat
Manager::registerConsumerAsync(K
getDigest: creat
Manager::registerConsumerAsync(K
a29InstantRecoveregistr N6KashyaUTC
uchar
al14TentativeVal
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
old=0,coreThresheshold=0,full=1)UTC
uchar
al14TentativeVal
r N6Kashya20XDisregistr N6KashyaUTC
merRequestResult> Kashya::MemoryManager::registerConsumerAsync(K
 N6Kashya21DDDisregistr N6KashyaUTC
merRequestResult> Kashya::MemoryManager::registerConsumerAsync(K
leTimer_i called handleTimer_i cUTC
d=0,coreThresholeshold=0,full=1)UTC
uchar
al14TentativeVal
tr N6Kashya19Mirregistr N6KashyaUTC
uchar
al14TentativeVal
onSnapTagInfo=NoplicationSnapTag88438992066163,son,systemTime=14on),event=NoOptigPipeInfo=NoOption,flushMirrorinapAuxInfo=NoOpti
highLoadDiskMana	
State = (manualInitEndTimeStamp=(transactionCounter=18446744073709551615,timeCou
rierInternal-SiteUID(0x5189db8372028e55) : reqs=0 queues=0
GATE KEEPER : (GateKe
emptyMemoryAllocMemoryAllocationUTC
uchar
al14TentativeVal
shold=0,coreThreeshold=0,full=1)UTC
uchar
al14TentativeVal
feature disabledIMPL::openTask_iUTC
iodicVerifierPinger_AO_IMPL::openTask_i(const Kashya::GroupGridT
D=(kVolSlot=8415replicationLinkIionID=870125276,
7200,coreThreshoeshold=0,full=1)UTC
uchar
al14TentativeVal
)registered in mistered in map. =GlobalCopy(SiteUID(0x1f1f99f3d17c5330) 0) ,deststerPipePhase2_i(const Kashya::S
@I~ 
ned; entering maain working loopUTC
  t_diskManagerHighLoadDelayTime = 300000000  t_diskManagerHighL
ned; entering maain working loopUTC
  t_diskManagerHighLoadDelayTime = 300000000  t_diskManagerHighL
N6Kashya18Kashyaregistr N6KashyaUTC
  t_diskManagerHighLoadDelayTime = 300000000  t_diskManagerHighL
highLoadDiskMana
rID=115537413494emory SubConsumeoupInfo = GroupMulated() = 0 *griteMetaData.bReg
highLoadDiskMana
tr N6Kashya19Asyregistr N6KashyaUTC
uchar
al14TentativeVal
reThreshold=0,fueshold=0,full=1)UTC
uchar
al14TentativeVal
tr N6Kashya19Asyregistr N6KashyaUTC
uchar
al14TentativeVal
g finised m_nameclosing finised D(0x1f1f99f3d17clobalCopy(SiteUI5,globalCopyID=GolSlot=128474342groupCopyRID=(kVStreamReleaser#(
g finised m_nameclosing finised D(0x1f1f99f3d17clobalCopy(SiteUI6,globalCopyID=GolSlot=187428361groupCopyRID=(kVStreamReleaser#(
g finised m_nameclosing finised (0x1f1f99f3d17c5obalCopy(SiteUID,globalCopyID=GlolSlot=800836368groupCopyRID=(kVStreamReleaser#(
g finised m_nameclosing finised (0x1f1f99f3d17c5obalCopy(SiteUID,globalCopyID=GlolSlot=731212328groupCopyRID=(kVStreamReleaser#(
g finised m_nameclosing finised (0x1f1f99f3d17c5obalCopy(SiteUID,globalCopyID=GlolSlot=753668574groupCopyRID=(kVStreamReleaser#(
olSlot=197480512groupCopyRID=(kVStreamReleaser#(
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
11566828308062536682830806253568UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
eThreshold=0,fuleshold=0,full=1)UTC
uchar
al14TentativeVal
str N6Kashya18Thregistr N6KashyaUTC
uchar
al14TentativeVal
gridSourceSequenurceSequenceDatae=14884389918876Option,systemTimOption),event=NooringPipeInfo=NoOption,flushMirrn,snapAuxInfo=No
d17c5330) 0) ),gteUID(0x1f1f99f3ID=GlobalCopy(Si43425,globalCopy
SanDiscoveryBoxMProxyManager<SanUTC
1SanDiscoveryBoxMgrProxy_AO_IMPLE, pid=28760/5770, config=(alert
egistr N6Kashya1registr N6Kashyashold=7200,coreTLevel=0,killThrereshold=10,alert config=(alertTh pid=13070/5770,ontrol_AO_IMPLE,
egistr N6Kashya1registr N6KashyaThreshold=7200,clertLevel=0,killrtThreshold=10,a770, config=(alePLE, pid=13097/5er14Ponger_AO_IM
Qk/NjyJ
egistr N6Kashya1registr N6KashyaThreshold=7200,clertLevel=0,killrtThreshold=10,a770, config=(alePLE, pid=13098/5er14Pinger_AO_IM
reThreshold=0,fueshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader29InitDMContentProvider_AO_IMPLE, pid=13099/5770, config=(aler
oreThreshold=0,feshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader30InitDMContentRetriever_AO_IMPLE, pid=13100/5770, config=(ale
coreThreshold=0,eshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader15Chunker_AO_IMPLE, pid=13101/5770, config=(alertThreshold=10,
[{X#
egistr N6Kashya1registr N6KashyallThreshold=7200,alertLevel=0,kilertThreshold=10/5770, config=(aIMPLE, pid=13102er16Receiver_AO_
egistr N6Kashya1registr N6Kashya,killThreshold=7=10,alertLevel=0=(alertThreshold104/5770, configAO_IMPLE, pid=13er19Transmitter_
egistr N6Kashya1registr N6Kashyaold=7200,coreThrvel=0,killThreshshold=10,alertLeonfig=(alertThreid=13105/5770, civer_AO_IMPLE, p
E1!B{
egistr N6Kashya1registr N6KashyakillThreshold=7210,alertLevel=0,(alertThreshold=06/5770, config=O_IMPLE, pid=131FlowController_A
{dR7
egistr N6Kashya1registr N6Kashyashold=7200,coreTLevel=0,killThrereshold=10,alert config=(alertTh pid=13107/5770,roller_AO_IMPLE,
egistr N6Kashya1registr N6KashyaThreshold=7200,clertLevel=0,killrtThreshold=10,a770, config=(alePLE, pid=13108/5fierPinger_AO_IM
oreThreshold=0,feshold=0,full=1)egistr N6Kashya17Hawaii_Downgrader30PeriodicVerifierPonger_AO_IMPLE, pid=13109/5770, config=(ale
+HZ 
2014
@I~ 
15770
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
fED&	
+HZ 
2018
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2013
@I~ 
15770
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2019
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2012
@I~ 
15770
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2013
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2011
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
4bT(
+HZ 
2014
@I~ 
+HZ 
25770
H)l$
+HZ 
2029
@I~ 
25770
0#~ 
NBZ 
@I~ 
0#~ 
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
+HZ 
2015
@I~ 
15770
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2035
+HZ 
2059
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
p b,
0#~ 
+HZ 
2034
+HZ 
2019
@I~ 
15770
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
p b,
0#~ 
2034
+HZ 
2011
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
p b,
0#~ 
+HZ 
2033
+HZ 
2014
@I~ 
15770
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
p b,
0#~ 
+HZ 
2013
@I~ 
15770
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2030
+HZ 
+HZ 
2031
@I~ 
+HZ 
5770
2031
7f93
@I~ 
|Ev&
0Kv"
@I~ 
0#~ 
s!%*
72028e55
+HZ 
-YS(
qZS(
s!%*
0#~ 
NFs"
cZu"
0#~ 
@I~ 
@I~ 
@I~ 
@I~ 
@I~ 
@I~ 
@I~ 
@I~ 
8vt"
0#~ 
+HZ 
2052
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2052
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2058
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2058
@I~ 
0#~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB`R
+HZ 
2056
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB@R
+HZ 
2056
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB R
+HZ 
2057
@I~ 
5770
2056@
0#~ 
828308
KBv&
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
0#~ 
+HZ 
2058
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2058
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2058
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2058
@I~ 
0#~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2055
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB`U
+HZ 
2058
@I~ 
0#~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB@U
+HZ 
+HZ 
2031
2031
+HZ 
5770
2031
@I~ 
5770
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
0#~ 
WB U
+HZ 
+HZ 
2030
2030
+HZ 
5770
2030
@I~ 
5770
0#~ 
@I~ 
@I~ 
0#~ 
@I~ 
0#~ 
+HZ 
+HZ 
2013
2013
+HZ 
5770
2013
@I~ 
5770
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
@I~ 
0#~ 
+HZ 
+HZ 
2038
2038
+HZ 
5770
2038
@I~ 
5770
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
@I~ 
0#~ 
+HZ 
+HZ 
2030
2030
+HZ 
5770
2030
@I~ 
5770
0#~ 
@I~ 
@I~ 
0#~ 
@I~ 
0#~ 
+HZ 
+HZ 
2035
2035
+HZ 
5770
2035
@I~ 
5770
0#~ 
@I~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
0#~ 
+HZ 
2055
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB`T
+HZ 
2055
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB@T
+HZ 
2054
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB T
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
z6W(
P$\,
q_{&
z6W(
Riz&
z6W(
  ~>
q_{&
Riz&
MDv&
q_{&
e9Z 
MDv&
q_{&
MDv&
qZS(
2031
pIi"
ws%*
5770
 2031
pIi"
pIi"
G'i"
5770
ws%*
+HZ 
2023
@I~ 
5770
hK~ 
@J~ 
0#~ 
440737
NBZ 
@I~ 
0#~ 
@I~ 
@I~ 
@I~ 
@I~ 
0#~ 
4bT(
qZS(
+HZ 
5770
s!%*
s!%*
0#~ 
741327
pIi"
pIi"
ighLoad
iskMana
3494
nfo = GroupMnd
ed() = 0 *gr
ata.bReg
EXPF
@I~ 
0#~ 
+HZ 
2050
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2050
+HZ 
2050
@I~ 
5770
NBZ 
0#~ 
+HZ 
2056
+HZ 
2056
@I~ 
NBZ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
z6W(
P$\,
q_{&
Riz&
z6W(
q_{&
Riz&
MDv&
q_{&
e9Z 
MDv&
q_{&
MDv&
q_{&
PUZ 
fYZ 
QYZ 
MDv&
 Lz&
 Lz&
@I~ 
5770
0#~ 
@I~ 
0#~ 
0#~ 
PUZ 
fYZ 
QYZ 
ersi
^U	*
+HZ 
2030
@I~ 
@I~ 
@I~ 
@I~ 
0#~ 
WB`W
+HZ 
2034
@I~ 
5770
0#~ 
NBZ 
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
@I~ 
0#~ 
WB@W
+HZ 
2054
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB W
PUZ 
PUZ 
P$\,
1`="
|Ev&
PUZ 
P$\,
1`="
z6W(
PUZ 
Riz&
P$\,
7b="
MDv&
q_{&
z6W(
P$\,
7b="
PUZ 
fYZ 
QYZ 
MDv&
z6W(
e9Z 
q_{&
Riz&
 Lz&
e9Z 
MDv&
PUZ 
q_{&
PUZ 
fYZ 
QYZ 
MDv&
PUZ 
fYZ 
QYZ 
plit
 Lz&
PUZ 
fYZ 
QYZ 
plit
+HZ 
`I~ 
0#~ 
PUZ 
fYZ 
QYZ 
plit
@I~ 
fYZ 
@I~ 
0#~ 
@I~ 
fYZ 
qZS(
0#~ 
]YS(
qZS(
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
PUZ 
P$\,
PUZ 
P$\,
z6W(
q_{&
PUZ 
Riz&
P$\,
MDv&
q_{&
z6W(
P$\,
PUZ 
fYZ 
QYZ 
MDv&
z6W(
e9Z 
q_{&
Riz&
 Lz&
e9Z 
MDv&
PUZ 
q_{&
PUZ 
fYZ 
QYZ 
MDv&
PUZ 
fYZ 
QYZ 
plit
 Lz&
PUZ 
fYZ 
QYZ 
plit
+HZ 
`I~ 
0#~ 
PUZ 
fYZ 
QYZ 
plit
z6W(
0#~ 
@I~ 
fYZ 
@I~ 
0#~ 
@I~ 
fYZ 
qZS(
0#~ 
]YS(
qZS(
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
PUZ 
P$\,
PUZ 
P$\,
z6W(
q_{&
PUZ 
Riz&
P$\,
MDv&
q_{&
z6W(
 (F{
P$\,
PUZ 
fYZ 
QYZ 
MDv&
z6W(
e9Z 
q_{&
Riz&
 Lz&
e9Z 
MDv&
PUZ 
q_{&
PUZ 
fYZ 
QYZ 
MDv&
PUZ 
fYZ 
QYZ 
plit
 Lz&
PUZ 
fYZ 
QYZ 
plit
+HZ 
`I~ 
0#~ 
PUZ 
fYZ 
QYZ 
plit
@I~ 
fYZ 
@I~ 
0#~ 
@I~ 
fYZ 
qZS(
0#~ 
]YS(
qZS(
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
|Ev&
qZS(
2023
@I~ 
5770
@I~ 
@I~ 
@I~ 
@I~ 
0#~ 
+HZ 
 2035
2036
@I~ 
5770
0#~ 
@I~ 
NBZ 
@I~ 
@I~ 
0#~ 
@I~ 
0#~ 
+HZ 
2057
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB`V
+HZ 
+HZ 
 2012
+HZ 
|Ev&
@I~ 
0#~ 
PUZ 
@I~ 
@I~ 
@I~ 
0#~ 
WB@V
+HZ 
2015
+HZ 
5770
2015
+HZ 
0#~ 
|Ev&
@I~ 
0#~ 
0#~ 
@I~ 
@I~ 
@I~ 
@I~ 
@I~ 
0#~ 
WB V
+HZ 
2031
@I~ 
5770
0#~ 
qZS(
0#~ 
0#~ 
2034v
unter=00S|
ssion=0
qZS(
|Ev&
ws%*
pIi"
@I~ 
d4j"
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
1f1f99f3d17c5330
s!%*
72028e55
+HZ 
72028e55
L~ 2036
@I~ 
5770
0#~ 
NBZ 
0#~ 
0#~ 
>SAJ
0#~ 
>SAJ
>SAJ
>SAJ
>SAJ
@I~ 
@I~ 
0#~ 
+HZ 
2058
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2058
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
PUZ 
P$\,
PUZ 
P$\,
PUZ 
P$\,
z6W(
PUZ 
P$\,
P$\,
z6W(
q_{&
Riz&
e9Z 
MDv&
q_{&
z6W(
q_{&
PUZ 
fYZ 
QYZ 
MDv&
e9Z 
MDv&
q_{&
 Lz&
PUZ 
fYZ 
QYZ 
z6W(
Riz&
 Lz&
PUZ 
fYZ 
QYZ 
loba
@I~ 
fYZ 
0#~ 
@I~ 
|Ev&
`H~ 
`H~ 
4bT()
+HZ 
0#~ 
2025
@I~ 
5770
|Ev&
z6W(
@I~ 
@I~ 
0#~ 
@I~ 
0#~ 
WB S
@I~ 
@I~ 
0#~ 
+HZ 
 2058
@I~ 
5770
NBZ 
+HZ 
2038
@I~ 
5770
z6W(
@I~ 
@I~ 
@I~ 
@I~ 
0#~ 
+HZ 
2022
z6W(
@I~ 
@I~ 
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
@I~ 
@I~ 
qZS(
@I~ 
P e#
0#~ 
+HZ 
2051
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
@I~ 
@I~ 
qZS(
@I~ 
0#~ 
WB`R
+HZ 
2053
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB@R
0.05
0<@"
5770
0#~ 
@I~ 
fYZ 
Ft?"
]YS(
@I~ 
0#~ 
@I~ 
0#~ 
WB R
0<@"
5770
@I~ 
0#~ 
@I~ 
fYZ 
Ft?"
z6W(
]YS(
@I~ 
0#~ 
@I~ 
0#~ 
0<@"
+HZ 
@I~ 
@I~ 
fYZ 
@W(?
@I~ 
@I~ 
0#~ 
+HZ 
2057
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2057
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2057
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2057
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB`U
+HZ 
2057
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB@U
+HZ 
2047
@I~ 
0#~ 
@I~ 
0#~ 
@I~ 
0#~ 
WB U
+HZ 
+HZ 
2012
7~ 2019
@I~ 
5770
@I~ 
NBZ 
@I~ 
|Ev&
@I~ 
@I~ 
0#~ 
WB`T
+HZ 
2050
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB@T
+HZ 
2050
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB T	8
+HZ 
2050
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2052
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
H)l$
+HZ 
5UZ 
+HZ 
+HZ 
+HZ 
2039
@I~ 
5770
+HZ 
2039
+HZ 
+HZ 
2039
@I~ 
5770
@I~ 
NBZ 
@I~ 
0#~ 
qZS(
0#~ 
+HZ 
+HZ 
+HZ 
2022
5770
`I~ 
0#~ 
0#~ 
@I~ 
0#~ 
@I~ 
0#~ 
p$'N
2055
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
+HZ 
2055
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
(0g$
H)l$
(0g$
WB`W38
WB@W08
WB W18
WB`V;8
2027
5770
2027
|Ev&
@I~ 
@I~ 
@I~ 
0#~ 
WB@V88
8YBU
2027
+HZ 
5770
2027
@I~ 
5770
|Ev&
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
WB V98
|Ev&
2027
2027
@I~ 
5770
0#~ 
|Ev&
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
2027
2027
@I~ 
5770
0#~ 
|Ev&
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
p[9u
+HZ 
2031
@I~ 
5770
0#~ 
102767
NBZ 
0#~ 
0#~ 
|Ev&
p@},
p@},
5bcddbf
0#~ 
@I~ 
0#~ 
0#~ 
@I~ 
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
+HZ 
2051
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
z6W(
z6W(
q_{&
  _:
q_{&
  _:
Riz&
e9Z 
MDv&
q_{&
MDv&
PUZ 
fYZ 
QYZ 
@I~ 
@J~ 
0#~ 
]YS(
qZS(
-YS(
|Ev&
+HZ 
z6W(
@J~ 
hK~ 
@L~ 
hL~ 
349525
UUUUUU
2035
+HZ 
2038
@I~ 
5770
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
WB W#8
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
z6W(
z6W(
q_{&
q_{&
Riz&
e9Z 
MDv&
q_{&
PUZ 
fYZ 
QYZ 
MDv&
PUZ 
fYZ 
QYZ 
A+i^
eq63
eq63
A+i^
eq63
eq63
 Lz&
 Lz&
@J~ 
0#~ 
]YS(
qZS(
-YS(
|Ev&
+HZ 
z6W(
@J~ 
hK~ 
@L~ 
hL~ 
6.0315e-05
]YS(
qZS(
+HZ 
2038
@I~ 
5770
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
z6W(
q_{&
q_{&
Riz&
e9Z 
MDv&
q_{&
PUZ 
fYZ 
QYZ 
MDv&
PUZ 
fYZ 
QYZ 
 Lz&
 Lz&
-YS(
+HZ 
z6W(
@J~ 
hK~ 
@L~ 
hL~ 
0#~ 
349525
fYZ 
+HZ 
+HZ 
2038
@I~ 
5770
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
z6W(
z6W(
  UY
q_{&
  UY
q_{&
Riz&
  UY
 0#?
e9Z 
MDv&
q_{&
PUZ 
fYZ 
QYZ 
MDv&
PUZ 
fYZ 
QYZ 
 Lz&
 Lz&
-YS(
+HZ 
@J~ 
hK~ 
@L~ 
hL~ 
fYZ 
]YS(
qZS(
qZS(
+HZ 
qZS(
5770
0#~ 
0#~ 
|Ev&
@I~ 
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
z6W(
z6W(
q_{&
 p57
q_{&
 p57
Riz&
e9Z 
MDv&
q_{&
PUZ 
fYZ 
QYZ 
MDv&
PUZ 
fYZ 
QYZ 
 Lz&
 Lz&
-YS(
+HZ 
z6W(
@J~ 
hK~ 
@L~ 
hL~ 
0#~ 
]YS(
qZS(
+HZ 
+HZ 
I~ 2038
@I~ 
5770
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
|Ev&
qZS(
s!%*
ws%*
s!%*
8{%*
|Ev&
PVl#
@I~ 
0.0005
Mb@?2
Mb@?
Mb@?@h?
+HZ 
+HZ 
+HZ 
+HZ 
2035
@I~ 
5770
qZS(
0#~ 
0#~ 
)iAb
0#~ 
)iAb
)iAb
0#~ 
)iAb
0#~ 
@I~ 
0#~ 
+HZ 
2053
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB`V%8
+HZ 
2059
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB@V*8
qZS(
s!%*
s!%*
ws%*
s!%*
|Ev&
1f1f99f3d17c5330
s!%*
72028e55
+HZ 
72028e55
L~ 2038
@I~ 
5770
-YS(
qZS(
0#~ 
PUZ 
@I~ 
0#~ 
@I~ 
Xn~"
0#~ 
WB V+8
PUZ 
P$\,
P$\,
z6W(
q_{&
Riz&
MDv&
q_{&
PUZ 
fYZ 
QYZ 
MDv&
pIi"
pIi"
+HZ 
~ 2029
@I~ 
d17c5330
5770
2029
2039
@I~ 
+HZ 
2031
@I~ 
5770
hK~ 
@J~ 
0#~ 
@I~ 
0#~ 
@I~ 
pIi"
+HZ 
0#~ 
5770
pIi"
+HZ 
+HZ 
 2034
2034
@I~ 
]YS(
5770
qZS(
qZS(
NBZ 
qZS(
0#~ 
+HZ 
qZS(
2034
@I~ 
5770
0#~ 
0#~ 
@I~ 
0#~ 
@I~ 
p[f#
0#~ 
P$\,
P$\,
|Ev&
MDv&
q_{&
+HZ 
+HZ 
+HZ 
2038
@I~ 
z6W(
z6W(
|Ev&
@I~ 
0#~ 
0#~ 
@I~ 
0#~ 
@I~ 
pHc#
0#~ 
LFP(
LFP(
We=(
`9E*
We=(
P6E*
z6W(
@I~ 
@I~ 
@I~ 
0#~ 
z<|"
qZS(
@I~ 
@I~ 
0#~ 
H)l$
/home/kos/kashya/archive/cst/libCSP-HTTP.so
+HZ 
2029
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
/home/kos/kashya/archive/cst/libccme_asym.so
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
Riz&
z6W(
PUZ 
PUZ 
PUZ 
 P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
P$\,
Riz&
 P$\,
z6W(
z6W(
z6W(
Riz&
q_{&
Riz&
 0L=
e9Z 
MDv&
PUZ 
PUZ 
q_{&
PUZ 
PUZ 
PUZ 
fYZ 
qZS(
2014
qZS(
fYZ 
qZS(
 (gr
te) 
qZS(
{6$*
]YS(
qZS(
0#~ 
@I~ 
fYZ 
lot=237
0#~ 
t 10
t 10
te) (gr
essi
ot=7340
te) (gr
d 37
d 37
ationLi
ot=1
,srcCop
0#~ 
0#~ 
I0S|
lot=237
teUI
ID(0
 usi
fYZ 
0550533
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
q_{&
P$\,
z6W(
PUZ 
PUZ 
 P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
 h(@
 `Q*
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
MDv&
PUZ 
PUZ 
PUZ 
qZS(
2017
t 10
000 max
Bound 3
   ### 
6189236
te) (gr
essi
783305,
ot=7340
4,sr
qZS(
9118553
1f1f99f
c533
fYZ 
fYZ 
QYZ 
QYZ 
qZS(
qZS(
]YS(
qZS(
@I~ 
5770
0#~ 
|Ev&
0#~ 
0#~ 
Q0S|
Q0S|
|Ev&
pIi"
5UZ 
0#~ 
)),grid
 using 
100000 
   #
 counte
3 bound
erld
0#~ 
17c5330
tCopyID
py(Site
nter
97424610S|
(remote
4720 bo
4618877
ote) (g
D=(sess
(0x1
 )),gri
) using
,srcCop
opy(Sit
+HZ 
2033
5770
0#~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
q_{&
P$\,
PUZ 
PUZ 
P$\,
P$\,
QYZ 
MDv&
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
e9Z 
MDv&
e9Z 
PUZ 
PUZ 
PUZ 
qZS(
qZS(
fYZ 
]YS(
qZS(
+HZ 
5UZ 
]YS(
qZS(
0#~ 
PUZ 
0#~ 
0#~ 
fYZ 
5770
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
q_{&
P$\,
z6W(
MDv&
PUZ 
PUZ 
P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
z6W(
Riz&
q_{&
Riz&
e9Z 
MDv&
e9Z 
PUZ 
PUZ 
PUZ 
P$\,
+HZ 
2019
@I~ 
5770
0#~ 
qZS(
fYZ 
]YS(
qZS(
+HZ 
5UZ 
]YS(
qZS(
0#~ 
PUZ 
0#~ 
0#~ 
58 boun
0550533
lot=724
obalCop
nter
7258740
(kVolSl@
   ### 
SiteUID
f3d17c5
 using 
d 58
lCopy(S
1f1f99f
f99f3d1
)),grid
 using 
100000 
   #
89db837
 counte
3 bound
 overld
sion R
(SiteUI
9f3d17c
tionLin
17c5330
tCopyID
py(Site
nter
9742461
(remote
4720 bo
4618877
ote) (g
D=(sess
,srcCop
opy(Sit
fYZ 
@I~ 
0#~ 
WB`U
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
Riz&
MDv&
PUZ 
PUZ 
PUZ 
P$\,
P$\,
QYZ 
MDv&
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
z6W(
Riz&
q_{&
Riz&
e9Z 
MDv&
e9Z 
PUZ 
PUZ 
q_{&
PUZ 
PUZ 
PUZ 
fYZ 
qZS(
2019
qZS(
fYZ 
qZS(
qZS(
{6$*
qZS(
{6$*
]YS(
qZS(
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
0#~ 
fYZ 
@I~ 
@I~ 
0#~ 
WB@U
xI83
PUZ 
PUZ 
P$\,
P$\,
PUZ 
PUZ 
PUZ 
P$\,
PUZ 
PUZ 
!#k%
P$\,
P$\,
P$\,
P$\,
P$\,
!#k%
P$\,
z6W(
P$\,
z6W(
q_{&
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
MDv&
q_{&
e9Z 
MDv&
PUZ 
PUZ 
=*H=
qZS(
qZS(
fYZ 
fYZ 
QYZ 
QYZ 
qZS(
qZS(
]YS(
qZS(
4bT(
@I~ 
5770
0#~ 
+HZ 
|Ev&
 2035
0#~ 
NBZ 
|Ev&
pIi"
5UZ 
0#~ 
)),grid
 using 
100000 
   #
 counte
3 bound
erld
0#~ 
17c5330
tCopyID
py(Site
nter
97424610S|
(remote
4720 bo
4618877
ote) (g
D=(sess
(0x1H
 )),gri
) using
,srcCop
opy(Sit
%M;5
+HZ 
2039
@I~ 
5770
0#~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
WB U
PUZ 
PUZ 
P$\,
P$\,
PUZ 
PUZ 
PUZ 
P$\,
PUZ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
z6W(
 (ih
P$\,
z6W(
q_{&
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
MDv&
e9Z 
MDv&
PUZ 
PUZ 
qZS(
qZS(
fYZ 
qZS(
qZS(
{6$*
]YS(
qZS(
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
0#~ 
I0S|
58 boun
0550533
lot=724
obalCop
nter
7258740
(kVolSl@
   ### 
SiteUID
f3d17c5
 using 
d 58
lCopy(S
1f1f99f
)*g>
f99f3d1
)),grid
 using 
100000 
   #
89db837
 counte
3 bound
sion`&
(SiteUI
9f3d17cH-
tionLin
17c5330
tCopyID
py(Site
nter
9742461
(remote
4720 bo
4618877
ote) (g
D=(sess
fYZ 
aEj5
aEj5
bEj5
bEj5
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
q_{&
P$\,
Riz&
z6W(
PUZ 
PUZ 
PUZ 
 P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
Riz&
 P$\,
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
PUZ 
PUZ 
q_{&
PUZ 
PUZ 
fYZ 
qZS(
2010
qZS(
fYZ 
 (gr
1f1f99f
ationLi
]YS(
qZS(
+HZ 
5UZ 
]YS(
qZS(
0#~ 
lot=237
PUZ 
t 10
t 10
te) (gr
essi
ot=7340
te) (gr
d 37
d 37
ationLi
ot=1
,srcCop
0#~ 
0#~ 
58 boun
0550533
lot=724
obalCop
nter
7258740
(kVolSl@ 
651teUI
   ### 
SiteUID
f3d17c5
 using 
d 58
ID(0
lCopy(S
1f1f99fh
 usi
f99f3d1
)),grid
 using 
100000 
   #
89db837
 counte
3 bound
 overld
sion
teUI`
d17c`
tionLin
17c5330
tCopyID
py(Site
nter
9742461
(remote0
4720 bo
4618877
ote) (g
D=(sess
,srcCop
fYZ 
,Fc5
.Fc5
/Fc5
0Fc5
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
q_{&
P$\,
Riz&
  Z~
 `[~
MDv&
PUZ 
PUZ 
 P$\,
P$\,
P$\,
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
 @A@
 p_~
z6W(
q_{&
Riz&
q_{&
 H]@
Riz&
e9Z 
MDv&
PUZ 
PUZ 
PUZ 
PUZ 
qZS(
qZS(
fYZ 
]YS(
qZS(
+HZ 
5UZ 
]YS(
qZS(
0#~ 
PUZ 
0#~ 
0#~ 
58 boun
0550533
lot=724
obalCop
nter
7258740
(kVolSl@0>
   ### 
SiteUID
f3d17c5
 using 
d 58
lCopy(S
1f1f99f
f99f3d1
)),grid
 using 
100000 
   #
89db837
 counte
3 bound
 overld
sion(
(SiteUI
9f3d17c
tionLin
17c5330
tCopyID
py(Site
nter
9742461
(remote 9[
4720 bo
4618877
ote) (g
D=(sess
,srcCop
opy(Sit
fYZ 
@I~ 
@I~ 
0#~ 
{@B83
PUZ 
P$\,
P$\,
q_{&
P$\,
Riz&
z6W(
PUZ 
PUZ 
PUZ 
 P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
MDv&
e9Z 
PUZ 
PUZ 
q_{&
qZS(
qZS(
fYZ 
]YS(
qZS(
+HZ 
5UZ 
]YS(
qZS(
0#~ 
PUZ 
@I~ 
fYZ 
20340S|
5770
0#~ 
NBZ 
5770
+HZ 
2034
0#~ 
2034
@I~ 
+HZ 
5770
0#~ 
`I~ 
NBZ 
`I~ 
`I~ 
@I~ 
0#~ 
0#~ 
0#~ 
3ZS(
17c5330
tCopyID
py(Site
nter
(remote
p:l#
2027
@I~ 
72028e55
0#~ 
fYZ 
0550533
57700S|
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
Riz&
z6W(
MDv&
PUZ 
PUZ 
PUZ 
P$\,
P$\,
QYZ 
MDv&
P$\,
P$\,
Riz&
 h[;
 P$\,
z6W(
q_{&
z6W(
Riz&
q_{&
Riz&
e9Z 
PUZ 
PUZ 
PUZ 
PUZ 
qZS(
2015
t 10
000 max
Bound 3
   ### 
6189236
te) (gr
essi
783305,
ot=7340
4,sr
d 37
46348 o
emote) 
kID=(se
9118553
ationLi
ot=1
,srcCop
1f1f99f
c533
qZS(
ionLink
D=(s
fYZ 
ionLink
lot=237
=237
qZS(
qZS(
{6$*
qZS(
{6$*
]YS(
qZS(
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
0#~ 
P$\,
P$\,
|Ev&
MDv&
fYZ 
@I~ 
@I~ 
0#~ 
}k!6
}k!6
PUZ 
P$\,
P$\,
PUZ 
PUZ 
PUZ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
P$\,
z6W(
P$\,
z6W(
q_{&
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
MDv&
q_{&
e9Z 
MDv&
PUZ 
qZS(
qZS(
fYZ 
]YS(
qZS(
+HZ 
5UZ 
]YS(
qZS(
0#~ 
PUZ 
0#~ 
0#~ 
fYZ 
5770
1Fc5
2Fc5
3Fc5
3Fc5
@I~ 
@I~ 
0#~ 
WB`T
>=83
PUZ 
PUZ 
P$\,
<."9
P$\,
q_{&
P$\,
<."9
Riz&
z6W(
PUZ 
PUZ 
[_"9
P$\,
P$\,
QYZ 
MDv&
P$\,
[_"9
Riz&
 P$\,
z6W(
z6W(
q_{&
z6W(
Riz&
q_{&
Riz&
e9Z 
e9Z 
PUZ 
PUZ 
PUZ 
PUZ 
qZS(
2011
qZS(
fYZ 
]YS(
qZS(
+HZ 
5UZ 
]YS(
qZS(
0#~ 
PUZ 
@I~ 
fYZ 
0#~ 
!fa5
+HZ 
2033
@I~ 
dow: Ra
5770
0#~ 
NBZ 
te: 0.0
 Averag
  Sampl
wind
ces   
2.53e+0
es/sec 
.40e
0#~ 
n SANTa
lers.  
.87 sec
te: 
TICS: n0S|
erInput
dlerInp
: 0 sec
 Rate: 
samples
0e+0
ame=han
GlobalS
+HZ 
2033
@I~ 
5770
0#~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
WB@T
PUZ 
PUZ 
P$\,
P$\,
q_{&
P$\,
z6W(
PUZ 
PUZ 
P$\,
P$\,
QYZ 
MDv&
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
PUZ 
q_{&
PUZ 
PUZ 
)Nwk
qZS(
2016
qZS(
fYZ 
fYZ 
QYZ 
QYZ 
qZS(
qZS(
{6$*
@I~ 
fYZ 
0#~ 
0#~ 
3ZS(
p:l#
-YS(
PUZ 
@I~ 
@I~ 
|Ev&
@I~ 
@I~ 
0#~ 
WB T
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
Riz&
z6W(
MDv&
PUZ 
PUZ 
PUZ 
 P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
P$\,
Riz&
 P$\,
z6W(
z6W(
z6W(
q_{&
Riz&
q_{&
Riz&
 0,>
e9Z 
MDv&
}k!6
}k!6
PUZ 
PUZ 
q_{&
}k!6
}k!6
}k!6
}k!6
PUZ 
PUZ 
PUZ 
fYZ 
qZS(
2010
qZS(
fYZ 
qZS(
qZS(
{6$*
qZS(
{6$*
eYO!
]YS(
qZS(
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
0#~ 
eYO!
fYZ 
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
q_{&
P$\,
Riz&
z6W(
PUZ 
PUZ 
 P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
Riz&
 P$\,
z6W(
z6W(
 P|E
q_{&
 P|E
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
MDv&
PUZ 
PUZ 
PUZ 
qZS(
2011
qZS(
fYZ 
qZS(
qZS(
{6$*
qZS(
{6$*
]YS(
qZS(
0#~ 
@I~ 
fYZ 
0#~ 
@I~ 
fYZ 
I0S|
20350S|
5770
0#~ 
NBZ 
5770
+HZ 
2035
0#~ 
2035
@I~ 
+HZ 
5770
0#~ 
`I~ 
NBZ 
`I~ 
`I~ 
@I~ 
0#~ 
0#~ 
0#~ 
3ZS(
17c5330
tCopyID
py(Site
nter
97424610S|
(remote
p:l#
4720 bo
4618877
ote) (g
D=(sess
,srcCop
opy(Sit
fYZ 
x({5
0550533
y({5
y({5
z({5
57700S|
@I~ 
@I~ 
0#~ 
pf683
PUZ 
PUZ 
P$\,
PUZ 
PUZ 
P$\,
PUZ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
P$\,
P$\,
z6W(
P$\,
z6W(
q_{&
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
 0L>
e9Z 
MDv&
MDv&
PUZ 
PUZ 
qZS(
qZS(
fYZ 
Tust
]YS(
qZS(
+HZ 
5UZ 
Tust
]YS(
qZS(
0#~ 
Tust
Tust
PUZ 
Tust
0#~ 
0#~ 
fYZ 
Tust
Tust
Tust
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
Riz&
 `[,
z6W(
PUZ 
PUZ 
PUZ 
P$\,
P$\,
QYZ 
MDv&
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
 h(@
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
PUZ 
PUZ 
q_{&
PUZ 
PUZ 
fYZ 
qZS(
2018
qZS(
fYZ 
fYZ 
QYZ 
QYZ 
qZS(
qZS(
]YS(
qZS(
@I~ 
5770
0#~ 
+HZ 
|Ev&
0#~ 
NBZ 
|Ev&
pIi"
5UZ 
0#~ 
0#~ 
+HZ 
2024
@I~ 
5770
0#~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
l383
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
Riz&
z6W(
PUZ 
PUZ 
PUZ 
 P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
 0l>
e9Z 
e9Z 
PUZ 
PUZ 
PUZ 
PUZ 
fYZ 
qZS(
qZS(
fYZ 
fYZ 
QYZ 
QYZ 
qZS(
qZS(
]YS(
qZS(
4bT(
@I~ 
5770
0#~ 
+HZ 
|Ev&
 2034
0#~ 
NBZ 
|Ev&
pIi"
5UZ 
0#~ 
0#~ 
esSe
+HZ 
2035
@I~ 
5770
0#~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
Riz&
z6W(
PUZ 
PUZ 
PUZ 
 P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
P$\,
Riz&
 P$\,
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
e9Z 
PUZ 
PUZ 
q_{&
PUZ 
PUZ 
PUZ 
fYZ 
qZS(
2018
qZS(
fYZ 
fYZ 
QYZ 
QYZ 
qZS(
qZS(
]YS(
qZS(
4bT(
@I~ 
5770
0#~ 
+HZ 
|Ev&
 2034
0#~ 
NBZ 
|Ev&
pIi"
5UZ 
0#~ 
)),grid
 using 
100000 
   #
 counte
3 bound
erld
0#~ 
17c5330
tCopyID
py(Site
nter
97424610S|
(remotex
4720 bo
4618877
ote) (g
D=(sess
(0x1
 )),gri
) using
,srcCop
opy(Sit
)*g>
+HZ 
2033
@I~ 
5770
0#~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
WB`W
n083
PUZ 
PUZ 
P$\,
P$\,
q_{&
P$\,
z6W(
PUZ 
PUZ 
PUZ 
 P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
PUZ 
PUZ 
q_{&
PUZ 
PUZ 
PUZ 
fYZ 
+HZ 
5770
PUZ 
qZS(
fYZ 
qZS(
qZS(
{6$*
qZS(
{6$*
]YS(
qZS(
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
0#~ 
I0S|
P$\,
P$\,
|Ev&
MDv&
fYZ 
^){5
_){5
_){5
`){5
@I~ 
@I~ 
0#~ 
WB@W
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
Riz&
z6W(
MDv&
PUZ 
PUZ 
PUZ 
 P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
e9Z 
PUZ 
PUZ 
q_{&
PUZ 
PUZ 
PUZ 
fYZ 
qZS(
2011
qZS(
fYZ 
fYZ 
QYZ 
QYZ 
qZS(
qZS(
]YS(
qZS(
+HZ 
2022
@I~ 
5770
+HZ 
2036
0#~ 
NBZ 
|Ev&
pIi"
5UZ 
0#~ 
0#~ 
+HZ 
2021
@I~ 
5770
0#~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
WB W
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
Riz&
z6W(
MDv&
PUZ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
MDv&
PUZ 
PUZ 
q_{&
qZS(
qZS(
fYZ 
]YS(
qZS(
+HZ 
5UZ 
]YS(
qZS(
0#~ 
PUZ 
0#~ 
0#~ 
fYZ 
@I~ 
@I~ 
0#~ 
_,83
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
Riz&
z6W(
PUZ 
PUZ 
PUZ 
P$\,
P$\,
QYZ 
MDv&
P$\,
Riz&
 P$\,
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
e9Z 
PUZ 
PUZ 
q_{&
PUZ 
PUZ 
fYZ 
qZS(
2012
qZS(
fYZ 
fYZ 
QYZ 
QYZ 
qZS(
qZS(
]YS(
qZS(
@I~ 
5770
0#~ 
+HZ 
|Ev&
 2034
0#~ 
NBZ 
|Ev&
pIi"
5UZ 
0#~ 
0#~ 
+HZ 
2028
@I~ 
5770
0#~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
`k'9
P$\,
Qh'9
PUZ 
PUZ 
P$\,
PUZ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
P$\,
z6W(
P$\,
z6W(
q_{&
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
e9Z 
MDv&
MDv&
PUZ 
PUZ 
qZS(
qZS(
fYZ 
qZS(
qZS(
{6$*
qZS(
{6$*
]YS(
qZS(
0#~ 
@I~ 
fYZ 
0#~ 
@I~ 
fYZ 
I0S|
Z$&5
20350S|
5770
0#~ 
NBZ 
5770
+HZ 
2035
0#~ 
2035
@I~ 
+HZ 
5770
0#~ 
`I~ 
NBZ 
`I~ 
`I~ 
@I~ 
0#~ 
0#~ 
0#~ 
3ZS(
p:l#
5770
fYZ 
57700S|
@I~ 
@I~ 
0#~ 
PUZ 
P$\,
PUZ 
PUZ 
P$\,
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
P$\,
z6W(
P$\,
z6W(
q_{&
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
q_{&
e9Z 
MDv&
PUZ 
PUZ 
qZS(
qZS(
fYZ 
qZS(
qZS(
{6$*
]YS(
qZS(
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
0#~ 
I0S|
fYZ 
@I~ 
@I~ 
0#~ 
/(83
PUZ 
PUZ 
P$\,
 hR;
P$\,
z6W(
q_{&
 xT;
P$\,
Riz&
z6W(
MDv&
PUZ 
PUZ 
PUZ 
 P$\,
P$\,
P$\,
QYZ 
MDv&
P$\,
Riz&
 P$\,
z6W(
q_{&
z6W(
Riz&
q_{&
Riz&
e9Z 
e9Z 
PUZ 
PUZ 
q_{&
PUZ 
PUZ 
qZS(
2019
qZS(
fYZ 
]YS(
qZS(
+HZ 
5UZ 
]YS(
qZS(
0#~ 
PUZ 
0#~ 
0#~ 
fYZ 
@I~ 
@I~ 
0#~ 
o&83
PUZ 
PUZ 
P$\,
P$\,
PUZ 
PUZ 
PUZ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
P$\,
P$\,
z6W(
P$\,
z6W(
q_{&
z6W(
  JY
q_{&
  JY
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
MDv&
PUZ 
PUZ 
qZS(
qZS(
fYZ 
qZS(
qZS(
{6$*
qZS(
{6$*
]YS(
qZS(
0#~ 
@I~ 
fYZ 
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
e.Ug
fYZ 
$IZ 
@I~ 
@I~ 
0#~ 
WB`V
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
z6W(
PUZ 
PUZ 
PUZ 
P$\,
P$\,
QYZ 
MDv&
P$\,
P$\,
Riz&
 P$\,
z6W(
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
PUZ 
PUZ 
PUZ 
PUZ 
PUZ 
fYZ 
qZS(
qZS(
fYZ 
fYZ 
QYZ 
QYZ 
qZS(
qZS(
0.0005
Mb@?2
Mb@?
+HZ 
+HZ 
~ 2030
@I~ 
5770
0#~ 
NBZ 
qZS(
@I~ 
0#~ 
air((gUD
{6$*
0#~ 
k3$*
{6$*
V&l"
0#~ 
pIi"
+HZ 
2030
@I~ 
hK~ 
0#~ 
NBZ 
qZS(
+HZ 
2022
@I~ 
5770
0#~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
WB@V
PUZ 
P$\,
PUZ 
P$\,
P$\,
PUZ 
PUZ 
PUZ 
P$\,
PUZ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
P$\,
z6W(
P$\,
z6W(
q_{&
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
MDv&
q_{&
e9Z 
MDv&
PUZ 
PUZ 
qZS(
qZS(
fYZ 
fYZ 
QYZ 
QYZ 
qZS(
qZS(
]YS(
qZS(
@I~ 
5770
0#~ 
+HZ 
|Ev&
 2034
0#~ 
NBZ 
|Ev&
pIi"
5UZ 
0#~ 
0#~ 
0550533
+HZ 
2025
@I~ 
5770
0#~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
WB V
W"83
PUZ 
PUZ 
P$\,
P$\,
z6W(
q_{&
P$\,
Riz&
z6W(
PUZ 
PUZ 
PUZ 
P$\,
P$\,
QYZ 
MDv&
P$\,
P$\,
Riz&
 P$\,
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
 0,?
e9Z 
PUZ 
PUZ 
q_{&
PUZ 
PUZ 
PUZ 
fYZ 
qZS(
2018
qZS(
fYZ 
]YS(
qZS(
+HZ 
5UZ 
]YS(
qZS(
0#~ 
PUZ 
0#~ 
0#~ 
fYZ 
@I~ 
@I~ 
0#~ 
PUZ 
PUZ 
P$\,
P$\,
PUZ 
PUZ 
PUZ 
PUZ 
PUZ 
P$\,
P$\,
P$\,
P$\,
P$\,
z6W(
P$\,
z6W(
q_{&
z6W(
q_{&
z6W(
q_{&
Riz&
q_{&
Riz&
e9Z 
MDv&
q_{&
e9Z 
MDv&
PUZ 
PUZ 
qZS(
qZS(
fYZ 
fYZ 
QYZ 
QYZ 
)iAb
qZS(
qZS(
]YS(
qZS(
@I~ 
5770
0#~ 
+HZ 
|Ev&
 2034
0#~ 
NBZ 
|Ev&
pIi"
5UZ 
0#~ 
)iAb
)iAb
)iAb
0#~ 
)iAb
)iAb
)iAb
+HZ 
2035
5770
0#~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
4bT(
@I~ 
+HZ 
2035
@I~ 
+HZ 
5770
2035
@I~ 
5770
0#~ 
@I~ 
0#~ 
@I~ 
@I~ 
p\v,
0#~ 
result.l
result.log.latest
s.gz
/bin/gzi]
/bin/gzip
/home/kos/kashya/archive/bin/release/spawn_wrappresult.log
@I~ 
@I~ 
@I~ 
0#~ 
z6W(
@I~ 
@I~ 
@I~ 
@I~ 
@I~ 
0#~ 
+HZ 
2020
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2020
@I~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
@I~ 
5770
|Ev&
0#~ 
@I~ 
@I~ 
@I~ 
@I~ 
@I~ 
0#~ 
+HZ 
2049
@I~ 
5770
0#~ 
+HZ 
c51c1685
2040
@I~ 
5770
@I~ 
0#~ 
430092
@I~ 
|Ev&
)Ny&
xp>p
0#~ 
qZS(
)Ny&
/dev/
>aS(
xp>p
2024
@I~ 
@I~ 
@I~ 
@I~ 
0#~ 
-<~73
+HZ 
2036
@I~ 
5770
0#~ 
+HZ 
b5094b12
2036
@I~ 
PUZ 
@I~ 
NBZ 
|Ev&
)Ny&
0#~ 
qZS(
)Ny&
>aS(
/dev/
2021
@I~ 
@I~ 
@I~ 
@I~ 
0#~ 
+HZ 
2035
@I~ 
5770
0#~ 
+HZ 
b5094b12
2035
@I~ 
5770
@I~ 
0#~ 
430092
 0*@
|Ev&
)Ny&
0#~ 
)Ny&
>aS(
/dev/
@I~ 
@I~ 
@I~ 
@I~ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
+HZ 
2059
@I~ 
5770
0#~ 
@I~ 
@I~ 
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
PUZ 
qZS(
@I~ 
/dev/
@I~ 
@I~ 
0#~ 
5523
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
 )(+
fYZ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
W.23
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
'023
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
n323
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
E(23
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
4&23
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
nn13
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
_q13
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
]s13
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
}v13
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
/x13
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
PUZ 
P$\,
P$\,
z6W(
q_{&
0u>$
0u>$
PUZ 
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
z6W(
@I~ 
|Ev&
@I~ 
@I~ 
Pya,
0#~ 
|Ev&
PUZ 
|Ev&
@3>(
U8>(
|Ev&
z6W(
z6W(
@I~ 
@I~ 
@I~ 
0#~ 
@I~ 
@I~ 
@I~ 
@I~ 
Pha,
0#~ 
|Ev&
@I~ 
@I~ 
@I~ 
0#~ 
|Ev&
@I~ 
@I~ 
@I~ 
@I~ 
@I~ 
px\,
0#~ 
.gif
.jpg
.jpeg
.txt
.html
.xml
client finished
server finished
CLNT
SRVR
@@0W
@B0V
@B0W
@F`@
@F`	
@F`@
@F`	
@Cx	
@Fy	
@Cp 
@Cp$
@Cp#
@Cp%
@Cp"
@Cp!
@@p$
@@p$
@@p%
@@p%
@@p$
@@p$
@@p%
@@p%
@Bq	
@@q	
@Cp(
@Bp0
@Fp1
@Gp8
@Gp8
@Hp8
client finished
server finished
client finished
server finished
666666666666666666666666666666666666666666666666\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\l
@Bt	
@C01
@B0Q
@G0R
@C0S
@B0T
@B0U
@@0q
@C0A
@B0!
@B0"
@B0#
@C0$
@@0B
@D0$
@Bp0
@Fp1
@Gp8
@Gp8
@B!B
@C!C
@B 1
@F!2
@B 5
@D!C
@B!A
@B!B
@C!C
@C!D
@B!E
@F!F
@B!G
@F!H
@B 1
@F!2
@D!C
@@!D
@D!D
@@!E
@@!F
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB@V
0#~ 
@I~ 
NBZ 
@I~ 
0#~ 
@I~ 
fYZ 
0#~ 
WB V
@I~ 
+HZ 
@I~ 
@I~ 
0#~ 
0#~ 
@I~ 
@I~ 
@I~ 
@I~ 
0#~ 
4bT(
+HZ 
2021
@I~ 
5770
0#~ 
NBZ 
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
0 i$
@I~ 
@I~ 
@I~ 
0#~ 
@I~ 
0#~ 
/home/kos/kashya/archive/cst/libcryptocme.so
/home/kos/kashya/archive/cst/libccme_base.so
/home/kos/kashya/archive/cst/libCSP-Security.so
/home/kos/kashya/archive/cst/libccme_base_non_fips.so
@@0W
@B0V
@B0W
@F`@
@F`@
@F`	
@F`@
@F`	
@Cx	
@Fy	
@Cp 
@Cp$
@Cp#
@Cp%
@Cp"
@Cp!
@@p$
@@p$
@@p%
@@p%
@@p$
@@p$
@@p%
@@p%
@Bq	
@@q	
@Cp(
@Bp0
@Fp1
@Gp8
@Gp8
@Hp8
@Bt	
@C01
@B0Q
@G0R
@C0S
@B0T
@B0U
@@0q
@C0A
@B0!
@B0"
@B0#
@C0$
@@0B
@D0$
@Bp0
@Fp1
@Gp8
@Gp8
0123456789ABCDEF
@B 1
@F!2
@B 5
@B!B
@C!C
@D!C
@B 1
@F!2
@B!A
@B!B
@C!C
@C!D
@B!E
@F!F
@B!G
@F!H
@D!C
@@!D
@D!D
@@!E
@@!F
?456789:;<=
 !"#$%&'()*+,-./0123
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
P_S53W*
\@7`
L]]2
vV_))fxR<
<eT>
!PJAR
[2FN
jDGju
9N18
IDPj
yK4H
1`:U7
O^BF9
H+/R
Am@?
QL*z
1ZF#W
)w!6
hqSM
pK5'
B"wU
,rqN
2S2M
+HZ 
@I~ 
5770
127.0.0.1
PUZ 
127.0.0.1
127.0.0.1
@I~ 
110`
10.108.112.10
PUZ 
NBZ 
10.108.112.10
10.108.112.10
@I~ 
0#~ 
WB@V
cFX 
[=V 
@H~ 
cFX 
[=V 
0#~ 
z6W(
0#~ 
0#~ 
/`w;
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
cFX 
[=V 
@H~ 
cFX 
[=V 
0#~ 
z6W(
0#~ 
>k)l
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
+HZ 
cFX 
[=V 
0#~ 
z6W(
0#~ 
0#~ 
0#~ 
0#~ 
cFX 
[=V 
@H~ 
cFX 
[=V 
0#~ 
z6W(
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
cFX 
[=V 
@H~ 
cFX 
[=V 
0#~ 
z6W(
0#~ 
+HZ 
2019
@I~ 
5770
+HZ 
2010
@I~ 
5770
z6W(
+HZ 
z6W(
+HZ 
2011
+HZ 
5UZ 
5770
@I~ 
5770
2019
@I~ 
+HZ 
z6W(
+HZ 
3337048255
`H~ 
@J~ 
hK~ 
z6W(
cFX 
[=V 
+HZ 
|Ev&
z6W(
0#~ 
2335851612
`H~ 
8B*+
PUZ 
8B*+
hK~ 
0#~ 
@I~ 
0#~ 
WB V
+HZ 
2053
@I~ 
5770
z6W(
4<Z 
+HZ 
@I~ 
0#~ 
2.16e+00-
0.00e+00-
+HZ 
2047
@I~ 
5770
0#~ 
NBZ 
-YS(
@I~ 
@I~ 
@I~ 
@I~ 
JS$&
^X$&
0#~ 
+HZ 
2028
@I~ 
5770
0#~ 
@I~ 
0#~ 
0#~ 
@I~ 
@I~ 
0#~ 
87.3438
22360
+HZ 
2025
@I~ 
5770
0#~ 
NBZ 
@I~ 
0#~ 
@I~ 
0#~ 
@I~ 
@I~ 
0#~ 
EMD#d<
p.il :
MJkKcn
FV7E
>%qxP
l-r5
#	}"4
OShK"
iM}j
f-(rM@
vH@1a
sc"D^
W;Nh
7l.2
`uNj
8Cw>
g)f[qgD#
HMAC Random
AES_128_CBC
SHA1_DSA
{a><oC
oJG[W
Qbue
fHbT
[OrXC
NktJ]
FVST
>%qxP
P_S53W*
\@7`
L]]2
vV_))fxR<
fYZ 
QYZ 
D,U(
\2Z 
'7U(
+HZ 
2056
@I~ 
5770
@I~ 
0#~ 
@I~ 
0#~ 
0.000256224
c52]T
@I~ 
5770
z6W(
|Ev&
@I~ 
NBZ 
0#~ 
@I~ 
@I~ 
0#~ 
z6W(
@I~ 
|Ev&
@I~ 
0#~ 
@I~ 
5770
H)l$
2037
@I~ 
5774
|Ev&
45T(
@I~ 
@I~ 
%nDd
@(#) [libstorssl] T8.4-2350 (Rev 0.350) Copyright (c) [1997-2017] EMC Corporation. All Rights Reserved.$
666666666666666666666666666666666666666666666666
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
`H?f
F/p^
+QQ 3K%
0A/8
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
`H?f
F/p^
+QQ 3K%
0A/8
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
uT_Rm#
'`ax
#ETHw
dlCz 
l}C.we
SK?Nv
'nU_O_M
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz./
                    
s09y
NnbQ;
2Tgm|HC
p+*Wm
l90s
O	~'
iGBZsM
Operation not permitted
No such file or directory
No such process
Interrupted system call
Input/output error
No such device or address
Argument list too long
Exec format error
Bad file descriptor
No child processes
Resource temporarily unavailabl
Cannot allocate memory
Permission denied
Bad address
Block device required
Device or resource busy
File exists
Invalid cross-device link
No such device
Not a directory
Is a directory
Invalid argument
Too many open files in system
Too many open files
Inappropriate ioctl for device
Text file busy
File too large
No space left on device
Illegal seek
Read-only file system
Too many links
Broken pipe
Numerical argument out of domai
Numerical result out of range
Resource deadlock avoided
File name too long
No locks available
Function not implemented
Directory not empty
Too many levels of symbolic lin
Unknown error 41
No message of desired type
Identifier removed
Channel number out of range
Level 2 not synchronized
Level 3 halted
Level 3 reset
Link number out of range
Protocol driver not attached
No CSI structure available
Level 2 halted
Invalid exchange
Invalid request descriptor
Exchange full
No anode
Invalid request code
Invalid slot
Unknown error 58
Bad font file format
Device not a stream
No data available
Timer expired
Out of streams resources
Machine is not on the network
Package not installed
Object is remote
Link has been severed
Advertise error
Srmount error
Communication error on send
Protocol error
Multihop attempted
RFS specific error
Bad message
Value too large for defined dat
Name not unique on network
File descriptor in bad state
Remote address changed
Can not access a needed shared 
Accessing a corrupted shared li
.lib section in a.out corrupted
Attempting to link in too many 
Cannot exec a shared library di
Invalid or incomplete multibyte
Interrupted system call should 
Streams pipe error
Too many users
Socket operation on non-socket
Destination address required
Message too long
Protocol wrong type for socket
Protocol not available
Protocol not supported
Socket type not supported
Operation not supported
Protocol family not supported
Address family not supported by
Address already in use
Cannot assign requested address
Network is down
Network is unreachable
Network dropped connection on r
Software caused connection abor
Connection reset by peer
No buffer space available
Transport endpoint is already c
Transport endpoint is not conne
Cannot send after transport end
Too many references: cannot spl
Connection timed out
Connection refused
Host is down
No route to host
Operation already in progress
Operation now in progress
Stale file handle
Structure needs cleaning
Not a XENIX named type file
No XENIX semaphores available
Is a named type file
Remote I/O error
Disk quota exceeded
No medium found
Wrong medium type
Operation canceled
Required key not available
Key has expired
A]P1Bi,
ASKI
%HHm!
[c~$A
ZshC
[[]D7
?tQ9(
2Y}%
d:cpu~
b1)f
{ `y;`2W@
#N>y
$7:2
|uiHp
XW;`
?8=K
/usr/lib/libstorssl64.so
H~nk:(T
<9SGmA
9Q`V,
@^P"
7A$W
I1'-Si
0123456789ABCDEF
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
vH7B
W4vC
pH  
0I  
Ot @Rt
@Pt 
666666666666666666666666666666666666666666666666
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
CRC32
SHA1
KRB5_BRAND: krb5-1.12.1-final 1.12.1 20140115
<aiaff><bigaf>!<arch>PE
u2cf
kaHF
dl`()
.<(+|&
!$*);^-/
,%_>?
`:#@'="
abcdefghi
jklmnopqr
~stuvwxyz
{ABCDEFGHI
}JKLMNOPQR
STUVWXYZ
0123456789
[.<(+|&
!$*);^-/
|,%_>?
`:#@'="
abcdefghi
jklmnopqr
~stuvwxyz
{ABCDEFGHI
}JKLMNOPQR
STUVWXYZ
0123456789
`.<(+|&
!$*);^-/
^,%_>?
:#@'="
abcdefghi
jklmnopqr
stuvwxyz
ABCDEFGHI
JKLMNOPQR
STUVWXYZ
0123456789
7-./
<=2&
{[lP}M]\Nk`Ka
z^L~no|
 !"#$
()*+,	
3456
89:;
ABCDEFGHIQRSTUVWXYbcdefghipqrstuvwx
7-./
<=2&
{[lP}M]\Nk`Ka
z^L~no|
 !"#$
()*+,	
3456
89:;
ABCDEFGHIQ_STUVWXYbcdefghipqrstuvwx
7-./
<=2&
{[lP}M]\Nk`Ka
z^L~no|
 !"#$
()*+,	
3456
89:;
ABCDEFGHIQRSTUVWXYbcdefghipqrstuvwx
lpHP
}c|w{
9JLX
~=d]
@(#) PDS Library T8.4-2350 [ RT ] [0x1053] Copyright (c) [1997-2017] EMC Corporation. All Rights Reserved.$
SSDP
SSDP
/var/symapi/daemons
SSDP
SSDP
SSDP
/usr/lib/libstorssl64.so
TSDP
Main
SSDP
EMCsymapi
T8.4-2350
!Bcn
EMC_SE_REVISION $Id: //depot/osapi/releases/rel840_cd24/src/afbinit.c#1 $
@(#) [libstorcore] T8.4-2350 (Rev 0.350) Copyright (c) [1997-2017] EMC Corporation. All Rights Reserved.$
?GbD
;GbD
>GbD 
0GXAp
1GXA8
IGbD
7GbDH
jSbD8
nSbD4
vSbDL
4UbD
8UbD 
9UbD 
:UbD*
@UbD
2PbD 
3PbD
1ObDH
2ObD
DObD0
UObD
@ObDX
yalt
sN`l
NIp=
y[o).
nae7
rcFI[
=nM|Xf
GRKU
1>3A
L.iB6
ar=^
3{4;
M-iN>
Tc<=
M"UP
pRd8
c/?>
=gwi
4vtq
yD!0:
I;k5=
F*qh
G)1G
+n;S9V
az!&0
jDm]
1 J9T
l0X 
3;f!
<+%+
e@5x
e`7U,
^	VgM
1-`h
=sP	
 }M)
Ur9$
Y7!G
Y;Ro
GWCS
RA<d
{Uc-VE
U7l^
7$JW
f5eD
O6xQ
s#N8
L2}Ql8k
K($M
5GXA(
6GXA 
7GXA
9GXA 
:GXA 
JSbDR
AGbD
PGbD0
BGbDX
MGbD
4GbD(
3GbD(
<GbDX
kSbD
lSbD
JTbD
ETbD
ITbD
BUbDp
1PbD@
APbD
2VbDD
7SbD
MSbD
OSbD 
GSbD 
NSbD
LSbD(
ISbD
<SbD,
XSbDd
HSbDP
;SbD
PSbD(
ESbD
FSbD
CSbDT
CSbD(
:SbD(
oSbD
pSbD@
sSbD
tSbD`
uSbD
wSbD(
xSbD$
}SbD
~SbD|
!TbD"
"TbDh
$TbD
%TbD
&TbD@
'TbD
(TbD 
)TbD(
+TbD8
,TbD,
-TbD(
.TbD
6UbD(
7UbD
;UbD 
<UbDX
AUbDl
DUbD
EUbD
FUbD 
dSbD
fSbD
eSbD
?SbD
gSbD
iSbD
9SbDD
TObD
5ObD
2IbD
5IbDH
6IbDd
7IbD"
8IbD
9IbD
:IbD
;IbDh
<IbD
OGbD0
DGbD@
=GbD0
3UbD
5UbD
|SbD
=SbDT
WSbD
zSbD
aSbD(
{SbD 
=UbD
/TbD
?UbD
QObD
SObD8
GObD
IObD 
7ObD
8ObD
4IbDH
>IbD4
AIbD
0.350
T8.4-2350
172.18
sD'Oze8
3v>SN
[o).
nae8p<H
cFI[
HRKU
zz9y
1>3A
TtC$
OHt|(
J.iB6
M-iN>
Tc:=
q(\E
M"UPu+
c/?>
D!0<
O>{8}
pARo
|I;k5=
H)1H
+n;S9V
h2c~
lDm]
f\4p
1 L9T
j0W 
3;f!
^tTa7
:+%+
f{g@
<gL{y
N~3A
>0tl
s*_&
?6sxe`8U*
^	VhM
v!3wL)
1-`g
3$Uq|
Y8!H
Y;Ro
HXCS
'vOv
RA:d
Uc-VE
U8j^
8$LX
.Aq;
f5eD
tre6
Qj7k
K'$M
BASE
SRDF
TimeFinder
DeltaMark
SRM_FULL
CACHE
SOLUTION_1
SOLUTION_2
SOLUTION_3
SOLUTION_4
SOLUTION_5
SOLUTION_6
SOLUTION_7
SOLUTION_8
SOLUTION_9
SOLUTION_10
SOLUTION_11
SOLUTION_12
SOLUTION_13
SOLUTION_14
SOLUTION_15
SOLUTION_16
CMODE
SERVER
OPTMZR
SOLUTION_17
CALYPSO
SOLUTION_18
CFGCHG
ORACLE_PAK
WORM
DevMasking
SRM_BASE
TimeFinder_Ext
SRDF_Ext
ResourcePak
ConnectivityBase
ConnectivityCtrl
Snapshot(Ruby)
Unprotected_SDR
Snapshot
SnapConfig
SRDFA
Erase
SRDF/AR
SRDF/CE
TF_CG_Ctrl
SRDF_CG_Ctrl
TEIM
TSIM
SAN_COPY
TF_CLONE
API_EMULATOR
RCOPY_ONLINE_PULL
STAR
PRIORITY_QOS
CACHE_PARTITION
SLC_ENABLER
SRDF/CR
VProv
IPSec
SRDF/EDP
FAST
FAST/DMX
External
RingBuffer
SYMM_CTX
CMN_CTX
CLAR_CTX
OSL_CTX
SYM_BLK
DISK_TYPE
DISK_BLK
CNFG
BAY_LOCATION
BES_MEMBER
APPREG_BLK
HOSTREG_BLK
TARGET_INFO
RAID_GRP_INFO
INVTRK_BLK
DISK_HYPER_TYPE
RETIRED_DEV_REC
SYMMWIN_BLK
PHYS_DISK2
DIR_RAG_BLK
CP_RECS
TP_RECS
INT_SPINDLE
EXT_SPINDLE
FEATURE_BLK
META_REC
DEV_GEOMETRY
BCVDRV_DEVS
DISK_GROUP_INFO
SNAP_DEVS
TP_ALLOC_RECS
LOGDEV_REC
LOGDEV_POOL
DVHOC_REC
BES_DEV
SPARE_DISK_INFO
CRD1_TYPE
RCOPY_INFO
SYREN_BLK
ERRPTR_TYPE
last_block_addr
SYMM_STATS
DISK_STAT
BACK_END_STAT
DMSP_STAT
DISK_RESPONSE
BACK_END_MIR
RDFA_STAT
RDFA_DEV_STAT
RDFA_GRP_STAT
RDFA_LNK_STAT
RDFA_DIR_STAT
RDFA_SES_STAT
ISCSI_STAT
TCP_CONN_STAT
DIR_NW_STAT
RDF_NWCOMP_STAT
SPDLMT_GRP_STAT
DEV64_STAT
dev64_stats_idx
DIR_STAT
tp_allc_rec_idx
dskgrp_indx
raid_group_indx
spindle_indx
first_dir_spndl
target_indx
RDFG_REC_T
rdfg_rec_idx
old_alias
host_dev_name
parent_dev_obsl
vendor_id
product_id
product_rev
serial_number
device_id
short_symm_id
director_id
dir_port_id
DEVICE_PATH_INF
SYMMWIN_DSK_BLK
MODULE_ARRAY_T
SPARE_HYPERS
RCOPY_STATUS
RCOPY_REM_DEV
rcopy_info_name
rem_device_addr
rem_dev_status
dev_records_idx
EXT_ARRAY_INFO
FE_QUOTA
fe_quota_indx
OPTMZR_TIME_WIN
SGDB_BLK
sgdb_dev_list
child_sg_list
EFFECTIVE_WWN
effect_wwn_idx
IGDB_BLK
GRP_INIT_BLK
FIBRE_INIT_BLK
ISCSI_INIT_BLK
grp_ascii_name
VCM_DB_CHAP
igdb_iscsi_name
PGDB_BLK
MVDB_BLK
PMRDB_BLK
pmr_lun_to_sym
CHAP_BLK
RADIUS_BLK
RAD_SRVR_BLK
RAD_SRVR_PRIMAR
RAD_SRVR_FIRST
RAD_SRVR_SECOND
OPTMZ_CTRL_PARM
FAST_POLICY
POLICY_TIER
POLICY_ASSOC
TIER_T
entries
bcvdrv_idx
GRP_INFO_CACHE
SYS_9261_03_01
SYS_9261_08_00
SYS_9261_04_00
ACLXHDR_BLK
RDFA_REC_T
devices
DIR_REC_T
dir_records_idx
DIR_CONFIG_COMM
CLI_LIST_DATA
CLI_SG_LIST
PORT_REC_T
CLI_DG_LIST
CLI_CG_LIST
port_records_idx
GIGE_DIR_REC_T
GIGE_PORT_REC_T
gige_port_idx
isns_ip_addr
iscsi_name
default_gw
domain_name
USERDISK_TYPE
DIR_SPLIT_REC
CU_SPLIT_REC
LABEL_BLK
label_blk_list
resv_bmap_data
LUNMASK_CTX
ADDR_INSTANCE_T
ADDR_ENTRY_T
hostname
RCOPY_QC_BLK_T
SYM_LOCK_BLK
SVX_DEVS
SVX_LINK_DEVS
SVX_NAMES
master_dev_idx
DSKGRP_ENG_INFO
RDF_DIR_PORT_T
PORT_GRP
PG_DIR_PORT
PMR_REC
GOS_CONTAINER
GOS_PRODUCT_GRP
DIR_BOARD_T
ISCSI_DIR_REC_T
DIR_BE_PORT_STAT
IP_INTFC_T
ISCSI_TARGET_T
IP_ROUTE_T
ip_intfc_ids
iscsi_tgt_name
ip_intfc_idx
iscsi_target_idx
ip_route_idx
DIR_FE_PORT_STAT
DIR_RDF_PORT_STA
ascii_port_name
ascii_node_name
ascii_port_name
ascii_node_name
SRP_INFO_T
srp_name
srp_descr
SLO_INFO_T
slo_name
slo_descr
slo_workload_nm
ACLX_BACKUP_DIR
ACLX_BACKUP_SLO
ACLX_BACKUP_SRP
ACLX_BACKUP_HDR
CP_CNFG_INFO_T
HOST_PORT_REC
retired_dev_names
SPLIT_INFO_T
DEV_REC_T
EDS_STAT_BLK
IM_STAT_BLK
CONT_RES_REC_T
STOR_CONT_REC_T
stor_cont_desc
SVX_VVOL_RECORDS_T
MF_SPLIT_T
split_name
serial_num
VWITNESS_INFO_T
ip_or_dns_name
unique_id
nice_name
savepool_list_indx
DEV_NAME_PTRS_T
dev_name
nice_name
GOS_CONT_PORT_INFO
GOS_CONT_PORT_WWN
GOS_VNET_PROD_GRP
UNRESOLVED
8GXAX
4GXA
NGbDx
GTbD
@GbDx
9TbD
LGbD`
>TbD
:TbD
5TbD
;TbD
KGbD(
=TbD
0TXA
1TXA
<TbD 
2GbD
FGbD
:GbD
GGbD
9GbDp
4TbD
mSbDH
6TbD
7TbD
8TbD
1UbD
?TbD 
ATbD 
BTbD 
CTbD 
JTbD
ETbD 
ITbD
FTbD
CUbD
HTbD
4PbD
@PbD`
1VbD
1SbD
cSbD
DTbD(
2TbD(
1TbD
3TbD
hSbD8
3ObDh
BObDx
CObDh
FObD8
4ObD`
1IbD(
CIbD(
QGbD@
CGbDp
6GbD@
8GbDX
HGbDX
2UbD
4UbD
6SbD`
>SbD`
VSbD
#TbDX
*TbD
0UbDx
>UbD
PObDh
RObD 
EObD@
HObD 
6ObDh
9ObD
3IbD`
=IbDx
?IbD@
@IbD
`Fa,
`Fa,
@d:(
`Fa,
XIa,
`j:(
@Ia,
 )U 
hH~ 
hH~ 
 g~ 
 f~ 
`I~ 
`H~ 
@f~ 
@e~ 
@g~ 
 )U 
0YZ 
`I~ 
 )U 
0YZ 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<software_identification_tag xmlns="http://standards.iso.org/iso/19770/-2/2009/schema.xsd" xmlns:ns2="http://www.w3.org/2000/09/xmldsig#" xmlns:ns3="http://emc.com/_1/tagvault/ExtendedInfoSchema.xsd">
    <entitlement_required_indicator>true</entitlement_required_indicator>
    <product_title>Not Available</product_title>
    <product_version>
        <name>Not Available</name>
        <numeric>
	<major>0</major>
	<minor>0</minor>
	<build>0</build>
	<review>0</review>
        </numeric>
    </product_version>
    <software_creator>
        <name>EMC Corporation</name>
        <regid>regid.2013-01.com.emc</regid>
    </software_creator>
    <software_licensor>
        <name>EMC Corporation</name>
        <regid>regid.2013-01.com.emc</regid>
    </software_licensor>
    <software_id>
        <unique_id>[SWUID]</unique_id>
        <tag_creator_regid>regid.2013-01.com.emc</tag_creator_regid>
    </software_id>
    <tag_creator>
        <name>EMC Corporation</name>
        <regid>regid.2013-01.com.emc</regid>
    </tag_creator>
    <extended_information>
        <ns3:PLC>
	<ns3:name>[PLC]</ns3:name>
        </ns3:PLC>
    </extended_information>
        </software_identification_tag>
%nDd
                    
`H?f
F/p^
+QQ 3K%
0A/8
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
`H?f
F/p^
+QQ 3K%
0A/8
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
uT_Rm#
'`ax
#ETHw
dlCz 
l}C.we
SK?Nv
'nU_O_M
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz./
P.Z 
 )U 
0YZ 
`	X,
@Fa,
@Fa,
 	X,
 	X,
 	X,
`	X,
`	X,
 _:(
 Ha,
 q:(
 Ha,
 d:(
 Ha,
0d:(
@^^,
 53.
 Ha,
 	X,
`Ha,
0J  
PM  
ff>A
L@33S@
CPU2 VRD Temp
@3X,
 )U 
P2X,
@3X,
 wU 
p2X,
 )U 
0YZ 
p%~ 
 wU 
@wU 
P2X,
 2X,
 2X,
P2X,
P2X,
P2X,
P2X,
P2X,
P2X,
P2X,
P2X,
P2X,
p2X,
P2X,
 2X,
P2X,
P2X,
P2X,
 2X,
P2X,
P2X,
P2X,
P2X,
P2X,
`M)+
`(b,
piS(
@xS(
piS(
@xS(
piS(
@xS(
`OT(
`OT(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
`H~ 
`I~ 
 j4.
 C3.
`M)+
`:5.
 )U 
`I~ 
P.Z 
@/Y(
0YZ 
 AU 
 )U 
@[U 
@B!B
@C!C
@B 1
@F!2
@B 5
@D!C
@B!A
@B!B
@C!C
@C!D
@B!E
@F!F
@B!G
@F!H
@B 1
@F!2
@D!C
@@!D
@D!D
@@!E
@@!F
client finished
server finished
>|Gt
&m1&o
\AVKw~i
;a`s
.JCq?
.wPf`
yTQ^#'
r[GX
-RRg5H
?yqP`&
q_i8w
CLNT
SRVR
@@0W
@B0V
@B0W
@F`@
@F`	
@F`@
@F`	
@Cx	
@Fy	
@Cp 
@Cp$
@Cp#
@Cp%
@Cp"
@Cp!
@@p$
@@p$
@@p%
@@p%
@@p$
@@p$
@@p%
@@p%
@Bq	
@@q	
@Cp(
@Bp0
@Fp1
@Gp8
@Gp8
@Hp8
client finished
server finished
client finished
server finished
666666666666666666666666666666666666666666666666\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
@Bt	
@C01
@B0Q
@G0R
@C0S
@B0T
@B0U
@@0q
@C0A
@B0!
@B0"
@B0#
@C0$
@@0B
@D0$
@Bp0
@Fp1
@Gp8
@Gp8
nqUY
9[#l
bmNP
	8")
qWNi
1K'x
U`\`
\z2S
b6?w
j$ch
@,ryg
`S1{H>
OUsi['
hNsJA
jKzp
VdRl
u	L)
:>?T
^	hk?>
2Gs"
|yVy
.kq$P
c	Cf
C;7$
MC*e
y`R#
P@hZ2<*
~b=}
S.0T
|<s]J
KGj=
>#?pa3r
4eq>8
i)4A
$q3 
(Px%S
@k*B 
[C2hA
'US:: 
*JV?1%
5d%{x4`*
t:on
mg,7'e
.1-hB
$UFB
X.aNX
bHut
	f-	
r_rM
|}-(
.(x_
)=FH
j~:Y
cT/]
Ncpt
S}]@@
Ho?;
K'r'
:y+4E%
yK/2
 u``
?	%-
UUUT
ffff
33335
""""!
6W&P
UUUUU/h
HvJX
UUUUU
&]s'
>31\
B?V6Ow
is)b
}Pl'3Go
/=j3=
xzVX
&7%4
!k%v
9d+F
E|TQ
3333333
vB!_
RDnl_
m[42
&Z\+8
(uD>[
	{Bd
E+R5ATV
4`AK
=p8{
Bjj]Q
	{IO
mlgU
	{B^
T9j,!w
v'bv'bv'Up
sC1P
 GLP^
UUUUUUUU
EVYHz
	{B^
fffffffff
+F%B
|{cd
r_^g
Z?&d
fnJ)]Ff/
*VA[{
zT@D
}T0T
O8"8S
UUUUUUUUUTCV
(Wam
}[o!
[x2f
o+[O;D'aO^
33333333332
e)??*
U;X\
	{B^
\50QI
)~kF
B#UT
ms*:
UUUUUUUUUUUM
uT1O/
$G1np
UUUUUUUUUUUKr
<#sj
Jx(hM
]7?,
2PQe
P+s6
ddi;I
KU+_
<A.(
E?gcT
PB4h
,zsC
fz7D
q77V
}%gm
4FUZ
	{B^
z%YbZ`
LzVe
#_j,
<Ls5
-a	%
%r,8
V(+k
PA/{b
	{B^
	{1@
Ys gd
sXPp
T8-	M
^$"F!
k76j(mTW"
	9E](
UUUUUUUUUUUUUY
wa;ee
2Xgm_
|aaQQ5
kxs\
Yvrd
okj-p
ROjkC
G<YHx
,;{,
UUUUUUUUUUUUUT
zDX"Bs
(<a{ZK
6v9.
&T7\w
B]OI
s*L2
k|i+PmL
sC	$
s:rX
xuB:
uxn>gom
UUUUUUUUUUUUUU[
)WR@y
IW>(r
3Q/,
@Rj!
Yc?W
rU%g
:Tc1
]YM^#n*W
Bow;b
'bv'bv'bv'bv'bv<
$)Y,
uY%X
UUUUUUUUUUUUUUS
<	]oY
=vx+
FUI:[
n)<=
i6byQ
;SG1
I3XU
UUUUUUUUUUUUUUU@NE
D?^M
06}9
RrS-
#XmWj
Pjr5&
ewSw
f_<+g
8,H|#
-o<a
0^:'
=5{E
bY/.
,s/{
>zD+T1e
l_$h
Z"5AD
*_C*y
h%5_*7
Lwzy
IDNK
=0m2
Z'B(
2+k-
8H5xIE
v&EID
]Z.k
s!uI
n>`S
UUUUUUUUUUUUUUUUU
N	7,>
KWvd
5A .=
UUUUUUUUUUUUUUUUU
-K\>
`x|b
o\U;
fpXSN
niei
)	V;
Ep?_
I%$?
-P| 
2v=El
B;U4
a_tI
K+;wN
]|sX
33333333333333333:
k)5Jz
"kQx
o*VO
uoKO#^
.xuE*
o!Ki
KWcU
4-o(`.
]e>c!@
(_y$ 
<9nl%R
;5qyX[
	3Y|
4UGI
52FF
	{B^
	{B^
0Le'X~
&,YD2eD
e[(2
VWz)(k{
33333333333333333347
MP+ut+
6Xp/
}!(ODAg
UUUUUUUUUUUUUUUUUUU
YKcz
-;)k
I{,4
!.Vo]
3333333333333333333
	;Ew<
t"uA5l
e`x^
<.I5R
HuzX
5i?y
YbOl
-Xs|-U4
fffffffffffffffffffUw
Ps%q
6E6o
	e455
>S`V"Y
VMwl
D 7nIi
Iluz
1kUF
.+:q
8Jiw
<764	
UUUUUUUUUUUUUUUUUUUSr
0oH 
fffffffffffffffffffff
/3kP*<
yC^P
yC^P
JNU(J
	{B^
	{B^
ux-'
AUnqP
333333333333333333333\5
n8E>
2LIm
fffffffffffffffffffff0
ZZVg
8j+E,@
OW5K
<t]OY
=g(#
6fWIZ;
K9*/
UUUUUUUUUUUUUUUUUUUUU
CQgR<b
UUUUUUUUUUUUUUUUUUUUSr
\]kW
d<>6KI
H|l)
fE^u
! va_
fffffffffffffffffffffe
_O?EH
#h+v(
UUUUUUUUUUUUUUUUUUUUU-
.@FX
{*@p
2;IT
KX6F
6}+&R
>&rIa ,
=NA$
jOh1N
k J!
cbQ3
$%&+
<H%=:
$4"(A
UUUUUUUUUUUUUUUUUUUUUW
h)cnq
CF$jN
ffffffffffffffffffffff
FB-hP
-hTc
Sb4P6sD_
	YYi
]!	$
tgx5&
jENm
It[r
0dsA
<}1N
j-%E
?U62k1
i%5q
]QYh
(\6*
]NNZIW
kKw.
jq4'
KMtq
bE}kXg
XJ;2
aN_w	
Yfe7
<~q<
56NL^d
oNcg:
aWP03
PAn{
%lz1C$5
T>zAW08'm,Kx
cw)-_
(!x=_7U
B	m5
2OT/`
^j.y
U@A?V
?0V	{$Q
HS36#`D|G
6/>@B
".7PX|v
CWQaGv
uYbgq
^"*4J2nI
+(:dr
i?zJL-I
+m)7Ac
Fv6O$ncl#_7H
s9N(G$,AM5tG
`e	|
jLb%8t
6:,`
5(wn
"+d;HK|@k%*
b}*o#
)Pl~
J<ak
mpPx>
j=}Q
s&BDF:u
/SYZ
 W*XY\Z
+\]bO^
_S`ay,bGc
eIf3g
Djkul
[mYn
qr{8s
tEuNv^wx
$%6&1'.
()}!*+
,z-r.2/g	0172s3J4
78|)9:X;n<
=?>L?
EFq-G'H
IJtKk@LMpFNOcP
^-J!z
R4e(Q
Ftw}0n
S(9q
5T$q
7r'E
 	K-
G0\ 
un|u
1y.`[jH
,>L_2
Yci3aS
o#@U
d?d,
I5WHh	
Et1}.`<
-f[~<K*
,?N_G~
FZ`gKXE
;/\|
-2v9
=]+M
iijk
"lFm
noxp
zC{/|L}:~q
.6/D0]1
9:M;
<u=X>
C7D&E#FGJH
I$JK\0L
Q2RS
%\E]^m_dZ`a
Hb	cdne
O 87
gpbt
3	`Ts-qS
9P\'xM
ru5ah
6w!Q
mu@F
HMAC Random
p53.
`I~ 
 53.
P.Z 
0YZ 
 AU 
 )U 
@[U 
@B!B
@C!C
@B 1
@F!2
@B 5
@D!C
@B!A
@B!B
@C!C
@C!D
@B!E
@F!F
@B!G
@F!H
@B 1
@F!2
@D!C
@@!D
@D!D
@@!E
@@!F
client finished
server finished
>|Gt
&m1&o
\AVKw~i
;a`s
.JCq?
.wPf`
yTQ^#'
r[GX
-RRg5H
?yqP`&
q_i8w
CLNT
SRVR
@@0W
@B0V
@B0W
@F`@
@F`	
@F`@
@F`	
@Cx	
@Fy	
@Cp 
@Cp$
@Cp#
@Cp%
@Cp"
@Cp!
@@p$
@@p$
@@p%
@@p%
@@p$
@@p$
@@p%
@@p%
@Bq	
@@q	
@Cp(
@Bp0
@Fp1
@Gp8
@Gp8
@Hp8
client finished
server finished
client finished
server finished
666666666666666666666666666666666666666666666666\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\`
@Bt	
@C01
@B0Q
@G0R
@C0S
@B0T
@B0U
@@0q
@C0A
@B0!
@B0"
@B0#
@C0$
@@0B
@D0$
@Bp0
@Fp1
@Gp8
@Gp8
`I~ 
 )U 
@/Y(
0YZ 
@[U 
 AU 
@B!B
@C!C
@B 1
@F!2
@B 5
@D!C
@B!A
@B!B
@C!C
@C!D
@B!E
@F!F
@B!G
@F!H
@B 1
@F!2
@D!C
@@!D
@D!D
@@!E
@@!F
@@0W
@B0V
@B0W
@F`@
@F`@
@F`	
@F`@
@F`	
@Cx	
@Fy	
@Cp 
@Cp$
@Cp#
@Cp%
@Cp"
@Cp!
@@p$
@@p$
@@p%
@@p%
@@p$
@@p$
@@p%
@@p%
@Bq	
@@q	
@Cp(
@Bp0
@Fp1
@Gp8
@Gp8
@Hp8
@Bt	
@C01
@B0Q
@G0R
@C0S
@B0T
@B0U
@@0q
@C0A
@B0!
@B0"
@B0#
@C0$
@@0B
@D0$
@Bp0
@Fp1
@Gp8
@Gp8
 !"#
 !"#
 !"#
 !"#
 !"#
 !"#
 !"#
 !"#
 !"#
 !"#
 !"#
 !"#
 !"#
 !"#
 !"#
 !"#
@^^,
P.Z 
client finished
server finished
>|Gt
&m1&o
\AVKw~i
;a`s
.JCq?
.wPf`
yTQ^#'
r[GX
-RRg5H
?yqP`&
q_i8w
CLNT
SRVR
@@0W
@B0V
@B0W
@F`@
@F`	
@F`@
@F`	
@Cx	
@Fy	
@Cp 
@Cp$
@Cp#
@Cp%
@Cp"
@Cp!
@@p$
@@p$
@@p%
@@p%
@@p$
@@p$
@@p%
@@p%
@Bq	
@@q	
@Cp(
@Bp0
@Fp1
@Gp8
@Gp8
@Hp8
client finished
server finished
client finished
server finished
666666666666666666666666666666666666666666666666\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
@Bt	
@C01
@B0Q
@G0R
@C0S
@B0T
@B0U
@@0q
@C0A
@B0!
@B0"
@B0#
@C0$
@@0B
@D0$
@Bp0
@Fp1
@Gp8
@Gp8
nqUY
9[#l
bmNP
	8")
qWNi
1K'x
U`\`
\z2S
b6?w
j$ch
@,ryg
`S1{H>
OUsi['
hNsJA
jKzp
VdRl
u	L)
:>?T
^	hk?>
2Gs"
|yVy
.kq$P
c	Cf
C;7$
MC*e
y`R#
P@hZ2<*
~b=}
S.0T
|<s]J
KGj=
>#?pa3r
4eq>8
i)4A
$q3 
(Px%S
@k*B 
[C2hA
'US:: 
*JV?1%
5d%{x4`*
t:on
mg,7'e
.1-hB
$UFB
X.aNX
bHut
	f-	
r_rM
|}-(
.(x_
)=FH
j~:Y
cT/]
Ncpt
S}]@@
Ho?;
K'r'
:y+4E%
yK/2
 u``
?	%-
UUUT
ffff
33335
""""!
6W&P
UUUUU/h
HvJX
UUUUU
&]s'
>31\
B?V6Ow
is)b
}Pl'3Go
/=j3=
xzVX
&7%4
!k%v
9d+F
E|TQ
3333333
vB!_
RDnl_
m[42
&Z\+8
(uD>[
	{Bd
E+R5ATV
4`AK
=p8{
Bjj]Q
	{IO
mlgU
	{B^
T9j,!w
v'bv'bv'Up
sC1P
 GLP^
UUUUUUUU
EVYHz
	{B^
fffffffff
+F%B
|{cd
r_^g
Z?&d
fnJ)]Ff/
*VA[{
zT@D
}T0T
O8"8S
UUUUUUUUUTCV
(Wam
}[o!
[x2f
o+[O;D'aO^
33333333332
e)??*
U;X\
	{B^
\50QI
)~kF
B#UT
ms*:
UUUUUUUUUUUM
uT1O/
$G1np
UUUUUUUUUUUKr
<#sj
Jx(hM
]7?,
2PQe
P+s6
ddi;I
KU+_
<A.(
E?gcT
PB4h
,zsC
fz7D
q77V
}%gm
4FUZ
	{B^
z%YbZ`
LzVe
#_j,
<Ls5
-a	%
%r,8
V(+k
PA/{b
	{B^
	{1@
Ys gd
sXPp
T8-	M
^$"F!
k76j(mTW"
	9E](
UUUUUUUUUUUUUY
wa;ee
2Xgm_
|aaQQ5
kxs\
Yvrd
okj-p
ROjkC
G<YHx
,;{,
UUUUUUUUUUUUUT
zDX"Bs
(<a{ZK
6v9.
&T7\w
B]OI
s*L2
k|i+PmL
sC	$
s:rX
xuB:
uxn>gom
UUUUUUUUUUUUUU[
)WR@y
IW>(r
3Q/,
@Rj!
Yc?W
rU%g
:Tc1
]YM^#n*W
Bow;b
'bv'bv'bv'bv'bv<
$)Y,
uY%X
UUUUUUUUUUUUUUS
<	]oY
=vx+
FUI:[
n)<=
i6byQ
;SG1
I3XU
UUUUUUUUUUUUUUU@NE
D?^M
06}9
RrS-
#XmWj
Pjr5&
ewSw
f_<+g
8,H|#
-o<a
0^:'
=5{E
bY/.
,s/{
>zD+T1e
l_$h
Z"5AD
*_C*y
h%5_*7
Lwzy
IDNK
=0m2
Z'B(
2+k-
8H5xIE
v&EID
]Z.k
s!uI
n>`S
UUUUUUUUUUUUUUUUU
N	7,>
KWvd
5A .=
UUUUUUUUUUUUUUUUU
-K\>
`x|b
o\U;
fpXSN
niei
)	V;
Ep?_
I%$?
-P| 
2v=El
B;U4
a_tI
K+;wN
]|sX
33333333333333333:
k)5Jz
"kQx
o*VO
uoKO#^
.xuE*
o!Ki
KWcU
4-o(`.
]e>c!@
(_y$ 
<9nl%R
;5qyX[
	3Y|
4UGI
52FF
	{B^
	{B^
0Le'X~
&,YD2eD
e[(2
VWz)(k{
33333333333333333347
MP+ut+
6Xp/
}!(ODAg
UUUUUUUUUUUUUUUUUUU
YKcz
-;)k
I{,4
!.Vo]
3333333333333333333
	;Ew<
t"uA5l
e`x^
<.I5R
HuzX
5i?y
YbOl
-Xs|-U4
fffffffffffffffffffUw
Ps%q
6E6o
	e455
>S`V"Y
VMwl
D 7nIi
Iluz
1kUF
.+:q
8Jiw
<764	
UUUUUUUUUUUUUUUUUUUSr
0oH 
fffffffffffffffffffff
/3kP*<
yC^P
yC^P
JNU(J
	{B^
	{B^
ux-'
AUnqP
333333333333333333333\5
n8E>
2LIm
fffffffffffffffffffff0
ZZVg
8j+E,@
OW5K
<t]OY
=g(#
6fWIZ;
K9*/
UUUUUUUUUUUUUUUUUUUUU
CQgR<b
UUUUUUUUUUUUUUUUUUUUSr
\]kW
d<>6KI
H|l)
fE^u
! va_
fffffffffffffffffffffe
_O?EH
#h+v(
UUUUUUUUUUUUUUUUUUUUU-
.@FX
{*@p
2;IT
KX6F
6}+&R
>&rIa ,
=NA$
jOh1N
k J!
cbQ3
$%&+
<H%=:
$4"(A
UUUUUUUUUUUUUUUUUUUUUW
h)cnq
CF$jN
ffffffffffffffffffffff
FB-hP
-hTc
Sb4P6sD_
	YYi
]!	$
tgx5&
jENm
It[r
0dsA
<}1N
j-%E
?U62k1
i%5q
]QYh
(\6*
]NNZIW
kKw.
jq4'
KMtq
bE}kXg
XJ;2
aN_w	
Yfe7
<~q<
56NL^d
oNcg:
aWP03
PAn{
%lz1C$5
T>zAW08'm,Kx
cw)-_
(!x=_7U
B	m5
2OT/`
^j.y
U@A?V
?0V	{$Q
HS36#`D|G
6/>@B
".7PX|v
CWQaGv
uYbgq
^"*4J2nI
+(:dr
i?zJL-I
+m)7Ac
Fv6O$ncl#_7H
s9N(G$,AM5tG
`e	|
jLb%8t
6:,`
5(wn
"+d;HK|@k%*
b}*o#
)Pl~
J<ak
mpPx>
j=}Q
s&BDF:u
/SYZ
 W*XY\Z
+\]bO^
_S`ay,bGc
eIf3g
Djkul
[mYn
qr{8s
tEuNv^wx
$%6&1'.
()}!*+
,z-r.2/g	0172s3J4
78|)9:X;n<
=?>L?
EFq-G'H
IJtKk@LMpFNOcP
^-J!z
R4e(Q
Ftw}0n
S(9q
5T$q
7r'E
 	K-
G0\ 
un|u
1y.`[jH
,>L_2
Yci3aS
o#@U
d?d,
I5WHh	
Et1}.`<
-f[~<K*
,?N_G~
FZ`gKXE
;/\|
-2v9
=]+M
iijk
"lFm
noxp
zC{/|L}:~q
.6/D0]1
9:M;
<u=X>
C7D&E#FGJH
I$JK\0L
Q2RS
%\E]^m_dZ`a
Hb	cdne
O 87
gpbt
3	`Ts-qS
9P\'xM
ru5ah
6w!Q
mu@F
HMAC Random
@B!B
@C!C
@B 1
@F!2
@B 5
@D!C
@B!A
@B!B
@C!C
@C!D
@B!E
@F!F
@B!G
@F!H
@B 1
@F!2
@D!C
@@!D
@D!D
@@!E
@@!F
aliases
ethers
group
gshadow
hosts
initgroups
netgroup
networks
passwd
protocols
publickey
services
shadow
z4,-ef<5
=2':
W2':
P2':
W"Z0':
J1':
K1':
D1':
D1':
WbK1':
D1':
`8~ 
@!~ 
@!~ 
`!~ 
@#~ 
@(U 
0(U 
@%~ 
@$~ 
p%~ 
p%~ 
p%~ 
p%~ 
p%~ 
@vU 
`vU 
 wU 
@wU 
`wU 
0&~ 
P&~ 
0xU 
PxU 
p&~ 
pxU 
0BX 
pBX 
pzU 
`EX 
@*~ 
@+~ 
@,~ 
h-~ 
@-~ 
h.~ 
@.~ 
0)~ 
0)~ 
0)~ 
 /~ 
`EX 
@/~ 
@5~ 
@E~ 
@2~ 
(3~ 
@E~ 
@E~ 
@5~ 
@5~ 
X3~ 
@1~ 
 $V 
`$V 
@1~ 
@$V 
@1~ 
P$V 
p+V 
@6~ 
@5~ 
@,V 
@5~ 
0,V 
`6~ 
`6~ 
p6~ 
@9~ 
P6~ 
 8~ 
PfW 
@uW 
07~ 
P7~ 
p7~ 
 8~ 
`8~ 
 9~ 
@9~ 
`9~ 
@(W 
@(W 
 :~ 
@:~ 
`:~ 
0BX 
@BX 
@F~ 
@E~ 
@E~ 
@5~ 
@E~ 
@1~ 
PF~ 
0BX 
pBX 
`EX 
@H~ 
pF~ 
pF~ 
@I~ 
@J~ 
hK~ 
@K~ 
hL~ 
@L~ 
p	U 
@5~ 
@5~ 
@M~ 
@E~ 
@E~ 
@N~ 
@E~ 
@E~ 
@5~ 
@5~ 
@1~ 
@1~ 
@1~ 
@O~ 
hP~ 
@P~ 
hQ~ 
@Q~ 
0G~ 
0G~ 
0G~ 
PCX 
0BX 
@BX 
PBX 
`BX 
pBX 
`EX 
pCX 
 CX 
0CX 
@CX 
@S~ 
`6~ 
`6~ 
p6~ 
@T~ 
P6~ 
P]X 
P_X 
P]X 
@S~ 
 TX 
0TX 
0VX 
`S~ 
@TX 
 TX 
0TX 
0VX 
 8Y 
 GY 
`hY 
@sY 
0UX 
0ZX 
 [X 
 WX 
PWX 
@T~ 
@SX 
PSX 
`VX 
`SX 
pSX 
p\X 
pTX 
 U~ 
0YX 
@SX 
PSX 
`VX 
`SX 
pSX 
@U~ 
PYX 
 WX 
PWX 
`U~ 
pYX 
PUX 
PZX 
pUX 
pZX 
`TX 
 V~ 
`TX 
@V~ 
0\X 
P\X 
p\X 
pTX 
`V~ 
@XX 
Pb~ 
p%~ 
0`~ 
P`~ 
Pa~ 
Pb~ 
Pb~ 
0b~ 
Pb~ 
`b~ 
@5~ 
@E~ 
@1~ 
`EX 
Xf~ 
0d~ 
0d~ 
Xg~ 
Pd~ 
`	Z 
Pd~ 
Xh~ 
(i~ 
(j~ 
pd~ 
pd~ 
pd~ 
@5~ 
@5~ 
Xk~ 
@)Z 
@E~ 
@E~ 
Xl~ 
0(Z 
@E~ 
@E~ 
@5~ 
@5~ 
@1~ 
@1~ 
@1~ 
Xm~ 
(n~ 
(o~ 
 +Z 
P,Z 
`,Z 
hQR 
0CX 
`N~ 
@;~ 
`(~ 
pSX 
0&~ 
`_~ 
@<~ 
@!~ 
0`~ 
p%~ 
 (~ 
@(U 
0xU 
p\X 
@[~ 
 9~ 
PBX 
@Y~ 
PfW 
@j~ 
@uW 
@?~ 
pTX 
`#~ 
@#~ 
@SX 
p&~ 
0VX 
@@~ 
@W~ 
`EX 
 _~ 
 8~ 
 '~ 
@=~ 
PSX 
@9~ 
`BX 
`SX 
 =~ 
@X~ 
 TX 
`b~ 
 wU 
@CX 
@R~ 
07~ 
@n~ 
@i~ 
`U~ 
@T~ 
`VX 
 CX 
`'~ 
@BX 
@S~ 
@e~ 
@g~ 
 C~ 
 GY 
`I~ 
`hY 
Pa~ 
`TX 
pxU 
0TX 
p7~ 
@f~ 
@k~ 
@]~ 
 #~ 
P&~ 
@l~ 
PWX 
pBX 
0BX 
@B~ 
`wU 
`vU 
@sY 
@\~ 
 a~ 
 WX 
@A~ 
@^~ 
`;Z 
0BZ 
P'U 
 :U 
pIU 
pEU 
@[U 
pAU 
p V 
 AU 
P?U 
P/V 
 LZ 
@F~ 
@F~ 
@F~ 
@6~ 
p_~ 
0=~ 
-0123456789
-0123456789
0C~ 
.,-+xX0123456789abcdef0123456789ABCDEF-+xX0123456789abcdefABCDEF
P^~ 
P]~ 
PY~ 
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
PA~ 
P=~ 
P<~ 
P;~ 
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
pF~ 
pF~ 
pF~ 
p\5.
 W5.
@W5.
 6`,
@6`,
`6`,
08`,
P8`,
@U#+
 W#+
@X#+
 Y#+
`Y#+
@\#+
@^#+
 `#+
0_5.
@Kb,
@Kb,
 7`,
 53.
 9`,
@f~ 
`7`,
@Z5.
 wU 
 `#+
@e~ 
P.Z 
0_5.
`:`,
 f~ 
`6U 
 LZ 
09Z 
@#8&
pIZ 
0YZ 
@GZ 
P3Z 
 AU 
 )U 
P5Z 
`;Z 
@[U 
`(b,
PPT(
`OT(
PPT(
`OT(
0ct#
PPT(
`OT(
0ct#
`OT(
0ct#
`OT(
0ct#
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
`H~ 
`I~ 
 )U 
@y$!
Pz$!
P~\,
@i{,
 {$!
Pz$!
@ic#
`ic#
  X,
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
@cc#
0Jv"
piS(
@xS(
`dc#
`H~ 
 jc#
`I~ 
@	%!
 	%!
Pz$!
 C3.
`}$!
`	%!
@Vl#
`:5.
 dc#
`6U 
PDZ 
 ZS(
@2%*
0z%*
P]"&
p9"&
pIZ 
0YZ 
 AU 
P6$*
 )U 
@cS(
 2%*
`o%*
P\"&
`4$*
@[U 
piS(
@xS(
piS(
@xS(
p97!
pX8!
@m)+
@n)+
`N8!
 R8!
0N8!
0G:!
PA:!
`(b,
0;h,
pX9!
piS(
@xS(
 X8!
@O8!
`M8!
0O8!
`O8!
PO8!
0M8!
pO8!
Pi8!
`OT(
`OT(
piS(
@xS(
pM;!
`/;!
 N<!
 W<!
0H<!
piS(
@xS(
pM;!
`/;!
 N<!
p@7!
 W<!
0H<!
 :7!
p7h,
 7h,
07h,
@19!
@R8!
pR8!
 Y9!
0;h,
@;h,
PM8!
p53.
@M8!
pM8!
 a:!
``:!
0a:!
`b:!
@c:!
PEl,
PEl,
0&;!
 M8!
piS(
@xS(
piS(
@xS(
0&;!
 M8!
piS(
@xS(
0&;!
 M8!
piS(
@xS(
0&;!
 M8!
p);!
P);!
piS(
@xS(
pM;!
`/;!
 N<!
 W<!
0H<!
 !>!
P2>!
pC>!
PB>!
05>!
 9>!
`<>!
 3>!
P3>!
p\5.
@BY!
@CY!
@DY!
@EY!
@GY!
@<?!
@V>!
0V>!
pR>!
pV>!
0-?!
`k>!
 i>!
`,?!
0_5.
@MY!
@OY!
PR>!
`R>!
PZ>!
p^>!
 }>!
0R>!
@R>!
0X>!
Pq>!
0g?!
 V>!
 R>!
`V>!
`)?!
`U>!
 S>!
@j>!
0s>!
p[>!
@VY!
@WY!
@XY!
`9?!
P]>!
0`>!
`9?!
@W>!
pQ>!
PV>!
`Q>!
Pe>!
@Q>!
PQ>!
 Q>!
0\>!
0Q>!
Pv>!
pg>!
`d>!
p\>!
0S>!
`\Y!
@^Y!
P_>!
 Y>!
pW>!
P~>!
pt>!
0x>!
 W5.
pY>!
0n>!
@W5.
@f>!
 o>!
@hY!
@iY!
@jY!
@mY!
@nY!
p"@!
P$@!
09@!
09@!
 &@!
 l@!
`	@!
0!@!
@h@!
@w@!
0)@!
0k@!
Pk@!
`;@!
P'@!
 C@!
 "A!
`&A!
0nA!
@#A!
 kA!
@(A!
@dA!
P3A!
`+A!
@mA!
`mA!
p8A!
p8A!
0AA!
 -A!
p A!
 *A!
 %A!
@	Z!
0&;!
 M8!
piS(
@xS(
0&;!
 M8!
piS(
@xS(
0&;!
 M8!
0)C!
P*C!
piS(
@xS(
PcB!
p-B!
`3B!
@;B!
`@B!
@KB!
0&B!
`kB!
0&;!
 M8!
PkB!
`-B!
P3B!
0;B!
P@B!
0KB!
 ,D!
0uC!
`#D!
 jC!
@kC!
0!D!
0`C!
PaC!
 fC!
pUC!
P(C!
 /C!
`5C!
P_C!
`eC!
@iC!
PoC!
0sC!
@yC!
 }C!
 PC!
 6C!
pRD!
PZD!
p[D!
 SD!
PSD!
@fD!
`gD!
0kD!
@TD!
PyD!
pzD!
pTD!
 }D!
@~D!
0ZD!
@*Z!
@+Z!
@,Z!
@-Z!
@.Z!
@/Z!
@5Z!
@6Z!
@7Z!
@8Z!
@9Z!
@:Z!
@;Z!
@<Z!
@=Z!
 >Z!
`>Z!
@@Z!
@CZ!
@EZ!
@HZ!
@JZ!
@MZ!
@OZ!
@RZ!
@TZ!
@WZ!
@YZ!
@\Z!
@^Z!
@bZ!
@dZ!
@gZ!
@iZ!
@lZ!
@nZ!
@qZ!
@sZ!
@vZ!
@xZ!
@{Z!
@}Z!
 M8!
0&;!
 M8!
@}E!
PyF!
@}E!
@}E!
POF!
@}E!
@}E!
@}E!
@}E!
`uF!
@}E!
@}E!
PcG!
@}E!
@}E!
@}E!
@}E!
pqF!
@}E!
@}E!
0bG!
 pF!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@aG!
0lF!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@`G!
@}E!
p~H!
@}E!
0{F!
@}E!
`xH!
@}E!
@}E!
PrH!
@}E!
@_G!
@}E!
PkH!
@}E!
@}E!
@}E!
@hF!
@}E!
 bH!
@}E!
@}E!
@}E!
P2F!
@}E!
`WH!
@}E!
@}E!
@}E!
@}E!
@MH!
@}E!
 ^G!
@}E!
`GH!
@}E!
PdF!
@}E!
`CH!
@}E!
P}E!
@}E!
@}E!
`}E!
@}E!
09H!
@}E!
p}E!
@}E!
 3H!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@!H!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
 ~E!
@}E!
@}E!
0~E!
@}E!
@}E!
@~E!
@}E!
@}E!
P~E!
@}E!
@}E!
`~E!
@}E!
@}E!
p~E!
@}E!
@}E!
PuG!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
@}E!
 M8!
0&;!
 M8!
paI!
@bI!
pcI!
@dI!
peI!
`fI!
@gI!
 hI!
piS(
@xS(
piS(
@xS(
0BJ!
 TJ!
`UJ!
pWJ!
@[J!
 ,J!
piS(
@xS(
@tK!
`zK!
PwK!
ppK!
p}K!
@bK!
`}K!
`pK!
0tK!
p_K!
0bK!
@wK!
PzK!
0;h,
piS(
@xS(
@tK!
`zK!
PwK!
ppK!
p}K!
@bK!
@^L!
@KL!
@RL!
 ?L!
PML!
 SL!
`}K!
`pK!
0tK!
p_K!
0bK!
@wK!
PzK!
P9h,
`9h,
P8h,
`8h,
P9M!
PoM!
p{M!
0[M!
05M!
PTM!
03M!
`3M!
 LN!
0NN!
@MN!
@0N!
P/N!
01N!
0<N!
P2N!
 CN!
 ON!
@PN!
`RN!
@3N!
P?N!
@:N!
`4N!
`SN!
@QN!
05N!
 FN!
07N!
piS(
@xS(
piS(
@xS(
@BO!
p%P!
PMQ!
0VQ!
`SQ!
 WQ!
pRQ!
PTQ!
0XQ!
@MQ!
0MQ!
@UQ!
 MQ!
pMQ!
`MQ!
@ [!
@![!
 "[!
@#[!
 $[!
 "S!
`'[!
 ([!
@)[!
@*[!
@+[!
@,[!
@-[!
@.[!
@/[!
@9[!
@:[!
 <[!
`<[!
`(b,
@D[!
piS(
@xS(
piS(
@xS(
PsT!
p/T!
p:T!
0eT!
@eT!
PeT!
`eT!
peT!
`OT(
`OT(
@#U!
0#U!
@&U!
 'U!
@*U!
`-U!
 .U!
@1U!
01U!
`9U!
 :U!
`JU!
 J[!
0$W!
p%W!
P)W!
 -W!
p.W!
@2W!
 6W!
`7W!
PJ5!
`H~ 
@Kl,
`I~ 
 j4.
 53.
PPD!
PEl,
@Mh,
@R[,
P8D!
@Ah,
 #>!
0GD!
@Z5.
 C3.
P=D!
`+>!
 g4.
`:5.
0_5.
@Hh,
PID!
P';!
`\Y!
@$;!
PV@!
&	6!
6	6!
F	6!
V	6!
f	6!
v	6!
 LZ 
 A@!
`7?!
& 6!
6 6!
F 6!
V 6!
f 6!
v 6!
&!6!
6!6!
F!6!
V!6!
f!6!
v!6!
&"6!
6"6!
F"6!
V"6!
f"6!
v"6!
&#6!
6#6!
F#6!
V#6!
f#6!
v#6!
6$6!
f$6!
`u?!
&%6!
F%6!
V%6!
f%6!
v%6!
&&6!
6&6!
F&6!
V&6!
f&6!
v&6!
&'6!
6'6!
F'6!
V'6!
f'6!
&(6!
6(6!
F(6!
V(6!
f(6!
v(6!
&)6!
6)6!
F)6!
V)6!
f)6!
v)6!
&*6!
6*6!
F*6!
V*6!
f*6!
v*6!
&+6!
6+6!
F+6!
V+6!
f+6!
v+6!
0gA!
&,6!
6,6!
F,6!
V,6!
v,6!
&-6!
6-6!
F-6!
V-6!
f-6!
pPA!
&.6!
6.6!
F.6!
V.6!
f.6!
v.6!
&/6!
6/6!
F/6!
V/6!
f/6!
v/6!
&06!
606!
F06!
V06!
f06!
v06!
&16!
616!
F16!
V16!
f16!
v16!
 \A!
&26!
626!
F26!
v26!
&36!
636!
F36!
f36!
v36!
&46!
646!
F46!
V46!
f46!
v46!
&56!
656!
PiA!
V56!
f56!
v56!
&66!
666!
F66!
V66!
f66!
v66!
&76!
676!
F76!
V76!
f76!
v76!
&86!
F86!
V86!
f86!
&96!
696!
F96!
V96!
v96!
&:6!
6:6!
F:6!
V:6!
f:6!
v:6!
&;6!
6;6!
F;6!
V;6!
f;6!
v;6!
&<6!
F<6!
f<6!
v<6!
&=6!
6=6!
F=6!
V=6!
f=6!
v=6!
&>6!
6>6!
F>6!
V>6!
v>6!
&?6!
6?6!
F?6!
V?6!
f?6!
v?6!
&@6!
6@6!
F@6!
V@6!
f@6!
v@6!
FA6!
VA6!
fA6!
vA6!
&B6!
6B6!
FB6!
VB6!
fB6!
vB6!
&C6!
6C6!
FC6!
VC6!
fC6!
vC6!
&D6!
6D6!
FD6!
VD6!
fD6!
vD6!
&E6!
6E6!
FE6!
VE6!
fE6!
vE6!
6F6!
FF6!
0YZ 
fF6!
vF6!
&G6!
6G6!
FG6!
VG6!
fG6!
vG6!
&H6!
6H6!
FH6!
VH6!
fH6!
vH6!
&I6!
6I6!
FI6!
VI6!
fI6!
vI6!
&J6!
6J6!
FJ6!
VJ6!
fJ6!
vJ6!
@s?!
&K6!
6K6!
FK6!
VK6!
fK6!
vK6!
&L6!
FL6!
VL6!
fL6!
vL6!
&M6!
6M6!
FM6!
VM6!
fM6!
vM6!
&N6!
6N6!
FN6!
VN6!
fN6!
vN6!
&O6!
VO6!
fO6!
vO6!
&P6!
6P6!
FP6!
VP6!
fP6!
vP6!
6Q6!
FQ6!
VQ6!
vQ6!
&R6!
6R6!
FR6!
VR6!
fR6!
vR6!
&S6!
6S6!
FS6!
VS6!
fS6!
vS6!
&T6!
FT6!
VT6!
fT6!
vT6!
P97!
&U6!
6U6!
FU6!
VU6!
fU6!
vU6!
&V6!
6V6!
FV6!
VV6!
fV6!
vV6!
&W6!
6W6!
FW6!
VW6!
fW6!
vW6!
&X6!
6X6!
FX6!
fX6!
vX6!
&Y6!
6Y6!
FY6!
VY6!
fY6!
vY6!
&Z6!
6Z6!
FZ6!
VZ6!
fZ6!
vZ6!
&[6!
6[6!
V[6!
f[6!
v[6!
&\6!
6\6!
F\6!
V\6!
f\6!
v\6!
01S!
&]6!
6]6!
F]6!
V]6!
f]6!
v]6!
&^6!
6^6!
F^6!
V^6!
v^6!
&_6!
6_6!
F_6!
V_6!
f_6!
v_6!
&`6!
6`6!
F`6!
V`6!
f`6!
v`6!
&a6!
6a6!
Fa6!
Va6!
fa6!
va6!
&b6!
6b6!
Fb6!
 )U 
fb6!
vb6!
&c6!
6c6!
Fc6!
Vc6!
fc6!
vc6!
&d6!
6d6!
Fd6!
Vd6!
fd6!
vd6!
&e6!
Fe6!
Ve6!
fe6!
ve6!
&f6!
6f6!
Ff6!
Vf6!
ff6!
vf6!
&g6!
Fg6!
Vg6!
fg6!
vg6!
&h6!
6h6!
Fh6!
Vh6!
fh6!
vh6!
&i6!
6i6!
Fi6!
Vi6!
fi6!
vi6!
6j6!
Vj6!
fj6!
vj6!
&k6!
6k6!
Fk6!
Vk6!
vk6!
`97!
Fl6!
Vl6!
fl6!
vl6!
&m6!
6m6!
Vm6!
fm6!
vm6!
6n6!
Fn6!
Vn6!
fn6!
vn6!
&o6!
6o6!
Fo6!
Vo6!
fo6!
vo6!
&p6!
6p6!
Fp6!
Vp6!
fp6!
vp6!
&q6!
6q6!
Fq6!
Vq6!
fq6!
vq6!
6r6!
Vr6!
fr6!
vr6!
&s6!
6s6!
Fs6!
Vs6!
fs6!
vs6!
&t6!
6t6!
Ft6!
Vt6!
ft6!
vt6!
&u6!
6u6!
Fu6!
Vu6!
fu6!
vu6!
&v6!
Fv6!
Vv6!
fv6!
vv6!
&w6!
6w6!
Fw6!
Vw6!
fw6!
vw6!
6x6!
Vx6!
fx6!
vx6!
&y6!
6y6!
Fy6!
Vy6!
fy6!
vy6!
&z6!
6z6!
Fz6!
Vz6!
fz6!
vz6!
&{6!
6{6!
F{6!
V{6!
f{6!
v{6!
&|6!
6|6!
F|6!
V|6!
f|6!
v|6!
&}6!
6}6!
F}6!
V}6!
f}6!
0W?!
6~6!
F~6!
V~6!
f~6!
9#Wf
i	+1
o#h"
8#Wf
h	+1
n#h"
08c#
P9c#
`9c#
P:c#
 <c#
piS(
@xS(
`@c#
piS(
@xS(
`@c#
`@c#
`@c#
`@c#
0Fc#
PFc#
pFc#
04%+
@Jc#
@Jc#
@Jc#
@Jc#
@Jc#
 Yc#
0Yc#
 Yc#
0Yc#
pYc#
PYc#
p]c#
p]c#
piS(
@xS(
p]c#
p]c#
p]c#
piS(
@xS(
@cc#
P~\,
@i{,
Pfc#
Pfc#
`fc#
@ic#
`ic#
 kc#
@kc#
`kc#
p|c#
piS(
@xS(
piS(
@xS(
piS(
@xS(
 oc#
@oc#
piS(
@xS(
@oc#
@oc#
@oc#
@oc#
p|c#
p|c#
p}c#
0~c#
P}c#
p|c#
 |c#
p}c#
@|c#
0~c#
P~c#
0}c#
piS(
@xS(
piS(
@xS(
`(b,
PPT(
`OT(
PPT(
`OT(
`OT(
`OT(
piS(
@xS(
piS(
@xS(
piS(
@xS(
`N@(
piS(
@xS(
piS(
@xS(
@i{,
@i{,
@i{,
@i{,
@i{,
 *c,
@i{,
piS(
@xS(
@i{,
p53.
piS(
@xS(
@i{,
p(d#
@i{,
 *d#
 *d#
 *d#
@i{,
@i{,
 -d#
 -d#
01d#
P1d#
p1d#
02d#
P2d#
`5d#
`5d#
piS(
@xS(
 5d#
piS(
@xS(
 5d#
 5d#
 5d#
`5d#
p5d#
P;d#
@x!+
 ,},
piS(
@xS(
piS(
@xS(
`(},
p(},
p<d#
 ,},
0,},
0Cd#
PCd#
 Dd#
0Dd#
@Dd#
PDd#
0Ed#
0Ed#
PEd#
pEd#
 Gd#
0Gd#
@Gd#
PGd#
`Gd#
pGd#
0Hd#
PHd#
pHd#
0Id#
PId#
pId#
`Ld#
0Kd#
PKd#
0Jd#
PJd#
pJd#
0Ld#
`Ld#
pLd#
0Md#
PMd#
0Td#
PTd#
pTd#
0Ud#
PUd#
 Wd#
@Wd#
PWd#
`Wd#
pWd#
0Xd#
PXd#
pXd#
PYd#
pYd#
0Zd#
pZd#
PZd#
 _d#
0[d#
P[d#
0\d#
P\d#
p\d#
0]d#
P]d#
p[d#
p]d#
 ^d#
@^d#
`^d#
 _d#
0_d#
pad#
 bd#
`bd#
 id#
0id#
@id#
Pid#
`id#
pid#
0jd#
Pjd#
pjd#
0kd#
Pkd#
 md#
@md#
`md#
`nd#
 nd#
@nd#
0od#
Pod#
 td#
@td#
`td#
 ud#
 vd#
0vd#
@vd#
Pvd#
`vd#
pvd#
 wd#
`wd#
@wd#
`xd#
 xd#
@xd#
 zd#
0zd#
@zd#
Pzd#
pzd#
0{d#
P{d#
p{d#
 |d#
`~d#
piS(
@xS(
piS(
@xS(
pa""
 )'"
`!'"
P!'"
0+'"
 t("
`.+"
`0+"
@ ,"
Pi,"
 H-"
0J-"
@D-"
 H-"
PD-"
PI-"
0D-"
 H-"
0i-"
@H-"
p7-"
 C-"
0C-"
PC-"
`C-"
pF-"
@U-"
`V-"
 C-"
0C-"
PC-"
`C-"
 D-"
 ,."
 "."
@ ."
P%."
@+."
piS(
@xS(
pd/"
0C/"
@L/"
@N/"
`C/"
`J/"
0J/"
@O/"
0D/"
`D/"
PK/"
 K/"
@M/"
 E/"
PE/"
pS/"
@R/"
pL/"
`Q/"
`]/"
@_/"
0a/"
@F/"
pX/"
pU/"
PP/"
 c/"
0G/"
piS(
@xS(
PT."
pX."
P]."
pc."
@m."
0p."
Pw."
pF."
`[."
pj."
 s."
pH/"
`H/"
PH/"
@H/"
`c."
`j."
 p."
`X."
pN."
@ 0"
` 0"
pb0"
`^5"
@(8"
P	?"
 7?"
p2?"
0#b,
0@@"
 V@"
pV@"
PB@"
@<@"
pR@"
`<@"
0T@"
`P@"
 B@"
PF@"
0D@"
`I@"
 I@"
 =@"
0S@"
PU@"
 Q@"
pQ@"
PA@"
P=@"
p=@"
PJ@"
PH@"
pC@"
@>@"
@C@"
p>@"
PG@"
`D@"
 ?@"
P?@"
@K@"
p?@"
0<@"
piS(
@xS(
`#@"
p*@"
0<@"
@fB"
piS(
@xS(
`#@"
`rB"
Pw@"
Pz@"
pGB"
P2A"
0NA"
 YA"
pb@"
 ^@"
  B"
pkA"
p&B"
`GB"
@z@"
@2A"
p*@"
PCD"
0CD"
piS(
@xS(
piS(
@xS(
pED"
 YD"
0wD"
 |N"
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
 hl#
@i{,
0(Q"
`(Q"
p(Q"
@i{,
@i{,
@vQ"
`vQ"
0vQ"
07Q"
0vQ"
PwQ"
@_Q"
@YQ"
@wQ"
0_Q"
@eQ"
@i{,
@i{,
`N5"
0O5"
 mV"
@mV"
 nV"
0RW"
 hW"
 [W"
`[W"
@i{,
0)X"
 8X"
pkY"
`|Y"
0>["
P2["
 ?["
pD["
p?["
 A["
@C["
`E["
p5["
 4["
`1["
`3["
P4["
05["
P6["
@:["
piS(
@xS(
piS(
@xS(
@M["
PK["
pK["
 r["
 w["
0|["
 h["
 m["
@L["
@K["
`K["
 |["
@&]"
0&]"
 &]"
 !e#
PL^"
pP^"
@N^"
`Q^"
 "e#
PR^"
piS(
@xS(
piS(
@xS(
@Y^"
0y^"
0b^"
ph^"
0Z^"
`*e#
piS(
@xS(
`*e#
`*e#
`*e#
`*e#
`*e#
P.e#
`.e#
0v_"
piS(
@xS(
PI_"
pa_"
`.e#
`.e#
pw_"
`.e#
`w_"
`.e#
 1e#
`2e#
@`e"
@$`"
0Be"
 2e#
@2e#
`2e#
p2e#
07e#
P7e#
p7e#
08e#
P8e#
p8e#
piS(
@xS(
@xe"
pAf"
 Cf"
`&f"
piS(
@xS(
 $f"
0%f"
08f"
`"f"
0!f"
pDf"
`Df"
PDf"
@Df"
@xe"
 Be#
0Af"
PAf"
0He#
PHe#
pHe#
0Ie#
PIe#
pIe#
`Ne#
@"g"
 W5.
@W5.
`Kg"
0Eg"
p\5.
 {g"
p{g"
@{g"
0We#
0{g"
pWe#
`	h"
@Ye#
 Ye#
@Ye#
`}g"
`Ye#
pzg"
`{g"
`zg"
Pzg"
@Ze#
`Ze#
p^e#
p^e#
`~g"
@zg"
P{g"
0_e#
P_e#
 |g"
P|g"
Pfc#
@ce#
0Ah"
` h"
0de#
`Hh"
0ch"
@Hh"
Pde#
pde#
 lh"
`@h"
PZh"
0Zh"
0ee#
pAh"
pDh"
@yh"
Pee#
`9h"
09h"
@ie#
@ie#
Pie#
`je#
@Di"
`Si"
`Ai"
05i"
`Bi"
`5i"
 je#
pIi"
 Ti"
piS(
@xS(
 je#
 je#
 je#
 je#
` i"
 je#
`pe#
pIi"
 Ti"
piS(
@xS(
@	j"
P*j"
@pe#
@	j"
P*j"
pIi"
 Ti"
piS(
@xS(
` i"
`pe#
0'j"
`ye#
`ye#
0Jj"
@9j"
pAj"
P9j"
P<j"
`9j"
09j"
 9j"
p9j"
`ye#
 |e#
@2k"
`,k"
pLk"
PTk"
 |e#
0|e#
P|e#
p~e#
p~e#
`ce#
0Tp"
P$p"
Pxp"
0{p"
 $p"
piS(
@xS(
`Dq"
PDq"
pCq"
@Dq"
`Bq"
0Bq"
piS(
@xS(
@Aq"
`Aq"
pAq"
 Bq"
piS(
@xS(
@Aq"
`Aq"
pAq"
 Bq"
`Hq"
P:q"
piS(
@xS(
@Aq"
`Aq"
`>q"
@Hq"
0Hq"
 Hq"
PHq"
pAq"
 Bq"
``q"
p`q"
@yq"
Pwq"
`wq"
@|q"
 wq"
0wq"
Pxq"
@wq"
pxq"
0zq"
pwq"
Pzq"
pwq"
`xq"
Pwq"
`wq"
@|q"
 yq"
 wq"
0wq"
Pxq"
@wq"
`Gs"
`cs"
`Gs"
pGs"
0)s"
 =s"
0=s"
@=s"
 =s"
0=s"
 >s"
@=s"
P=s"
pHs"
 =s"
0=s"
@=s"
`=s"
0Is"
 =s"
0=s"
 fs"
Pfs"
@=s"
p=s"
 =s"
0=s"
@=s"
0>s"
@As"
@>s"
`>s"
P{t"
`~t"
@yt"
 wt"
pwt"
 }t"
`ut"
@|t"
p}t"
`zt"
 vt"
 {x"
`Jv"
pKv"
pJv"
@Jv"
PJv"
pSv"
@Jv"
PJv"
piS(
@xS(
@Kv"
0Kv"
 Jv"
PKv"
piS(
@xS(
@Kv"
0Kv"
 Jv"
PKv"
0Sv"
PSv"
`Kv"
0jv"
`mv"
0Jv"
piS(
@xS(
@Kv"
p8u"
0"v"
 *v"
Pcu"
pou"
0Hv"
`4u"
 8v"
0Kv"
 Jv"
PKv"
 Hv"
0Jw"
pFw"
 gv"
0Jw"
 gv"
0Jw"
pLx"
`Nx"
@Zv"
PPx"
@Rx"
@{v"
0Tx"
0Ov"
@rv"
P_v"
 Vx"
PPv"
`dv"
@[x"
Plv"
0Qv"
PQv"
pIv"
 :x"
`0x"
PRv"
pRv"
pQv"
Pvx"
 Sv"
 -x"
@Rv"
@Bw"
 Iv"
0Iv"
`Iv"
@Mv"
`Nv"
P{x"
@Iv"
PIv"
 Zy"
0]y"
 Zy"
phy"
 yy"
0}y"
pZy"
`\y"
0Zy"
P]y"
p]y"
Pgy"
 Vy"
Pfy"
0Vy"
pVy"
PYy"
`Yy"
pYy"
PYy"
`Yy"
pYy"
0^y"
 Yy"
0Yy"
@Yy"
 Wy"
 Yy"
0Wy"
0Yy"
@Yy"
P^y"
p^y"
 [y"
`dy"
@Wy"
PWy"
@[y"
`[y"
`Wy"
pWy"
PXy"
`Xy"
pXy"
PXy"
`Xy"
pXy"
0_y"
 Xy"
0Xy"
@Xy"
P_y"
 Xy"
0Xy"
@Xy"
 \y"
phy"
@4y"
@\y"
 yy"
0}y"
pZy"
@?y"
piS(
@xS(
0*|"
piS(
@xS(
 $|"
@)|"
P	|"
`/|"
P/|"
p/|"
@3|"
PD|"
@B|"
PC|"
piS(
@xS(
pA|"
0A|"
PA|"
`6|"
@A|"
`A|"
@=|"
piS(
@xS(
pA|"
0A|"
PA|"
@A|"
`A|"
piS(
@xS(
pA|"
0A|"
PA|"
`6|"
`U|"
 H|"
0x|"
pv|"
@A|"
`A|"
 x|"
@=|"
@.}"
@;}"
P;}"
0$f#
p$f#
P%f#
P&f#
P'f#
0$f#
P$f#
P{}"
p{}"
p$f#
pt}"
@t}"
Pt}"
`t}"
Pw}"
`w}"
pw}"
0%f#
Pw}"
`w}"
pw}"
p#f#
P%f#
 w}"
0w}"
@w}"
p%f#
 x}"
0r}"
 w}"
@r}"
0w}"
@w}"
0|}"
@x}"
`x}"
Pr}"
pr}"
P|}"
p|}"
Pv}"
`v}"
pv}"
0&f#
Pv}"
`v}"
pv}"
P&f#
 v}"
0v}"
@v}"
p&f#
Ps}"
 v}"
`s}"
0v}"
@v}"
P#f#
0}}"
ps}"
P}}"
p}}"
 y}"
Pu}"
`u}"
pu}"
0'f#
@y}"
`y}"
Pu}"
`u}"
pu}"
P'f#
 u}"
0u}"
@u}"
p'f#
 u}"
0u}"
@u}"
0#f#
0~}"
P~}"
p~}"
 z}"
 t}"
0t}"
@z}"
`z}"
pt}"
pE}"
@t}"
Pt}"
`t}"
`G}"
PI}"
 Bf#
`Bf#
 Bf#
@Bf#
`Bf#
piS(
@xS(
`Bf#
`Bf#
`Bf#
`Bf#
piS(
@xS(
piS(
@xS(
@Nf#
@4~"
`4~"
@w~"
 q~"
 o~"
 2~"
02~"
pn~"
@Nf#
`9~"
 3~"
`l~"
0m~"
@n~"
09~"
@2~"
P2~"
`2~"
p2~"
@2~"
P2~"
`2~"
p2~"
 Nf#
03~"
P3~"
@w~"
 q~"
 o~"
 2~"
02~"
pn~"
`Nf#
p3~"
`9~"
 3~"
`Wf#
 Xf#
@Xf#
`Xf#
 ]f#
`^f#
 |e#
piS(
@xS(
 ]f#
piS(
@xS(
 ]f#
 ]f#
 ]f#
 ]f#
@]f#
piS(
@xS(
@]f#
@]f#
@]f#
@]f#
 ^f#
@^f#
`^f#
p^f#
0sf#
Psf#
psf#
`xf#
@yf#
 zf#
`{f#
 |f#
 }f#
`}f#
@~f#
`vf#
`wf#
@xf#
`zf#
@{f#
@}f#
 ~f#
 wf#
 yf#
 {f#
`|f#
`~f#
@wf#
 xf#
`yf#
@|f#
@zf#
pIi"
 Ti"
piS(
@xS(
pIi"
 Ti"
piS(
@xS(
piS(
@xS(
piS(
@xS(
  g#
@ g#
` g#
 #g#
@#g#
@$g#
piS(
@xS(
 #g#
piS(
@xS(
 #g#
 #g#
 #g#
 #g#
@#g#
P#g#
`#g#
piS(
@xS(
`#g#
`#g#
`#g#
`#g#
 $g#
@$g#
P$g#
`$g#
 4g#
`4g#
@5g#
@6g#
@7g#
 4g#
@4g#
`4g#
 5g#
@5g#
`5g#
 6g#
 3g#
@6g#
`6g#
`3g#
 7g#
@7g#
`7g#
@3g#
 Sg#
@Sg#
 Ug#
piS(
@xS(
 Ug#
piS(
@xS(
 Ug#
 Ug#
 Ug#
 Ug#
@Ug#
`Ug#
piS(
@xS(
0bg#
@eg#
@ 	#
@"	#
 fg#
`fg#
@%	#
@'	#
 gg#
`gg#
@*	#
@,	#
 hg#
`hg#
@eg#
 dg#
@cg#
 fg#
@fg#
`fg#
@dg#
 gg#
@gg#
 cg#
`gg#
`dg#
 hg#
@hg#
`cg#
`hg#
 eg#
`eg#
@3	#
04	#
@#g#
`4	#
 5	#
 8	#
@:	#
PPT(
`OT(
`OT(
`OT(
@;	#
@=	#
@@	#
@C	#
@E	#
@F	#
@G	#
@I	#
@J	#
@L	#
@N	#
@O	#
@R	#
@S	#
@U	#
 Z	#
@]	#
PPT(
`OT(
0ct#
PPT(
`OT(
0ct#
`OT(
0ct#
`OT(
0ct#
 ^	#
@a	#
@e	#
@g	#
@h	#
 i	#
@k	#
@m	#
@p	#
@r	#
@u	#
@w	#
@z	#
@|	#
piS(
@xS(
piS(
@xS(
piS(
@xS(
@}	#
piS(
@xS(
piS(
@xS(
piS(
@xS(
 6h#
@6h#
@i{,
piS(
@xS(
 8h#
 8h#
 8h#
`8h#
piS(
@xS(
`8h#
`8h#
`8h#
`@h#
 Ah#
@Ah#
`(b,
`gh,
`(b,
`gh,
0Fh#
`OT(
pCh#
`OT(
`gh,
`Dh#
`Dh#
`OT(
`Eh#
`OT(
`Eh#
`Eh#
`Eh#
pgh,
0Fh#
@Fh#
`Fh#
`Qh#
`Qh#
pQh#
@i{,
@Sh#
@Sh#
@Sh#
 Wh#
`Wh#
 Wh#
piS(
@xS(
 Wh#
 Wh#
 Wh#
 Wh#
`Wh#
piS(
@xS(
`Wh#
`Wh#
`Wh#
`Wh#
piS(
@xS(
pbh#
pbh#
0ch#
Pch#
pch#
@eh#
 eh#
 fh#
 fh#
pfh#
 eh#
@eh#
`eh#
piS(
@xS(
piS(
@xS(
piS(
@xS(
 fh#
0fh#
Pfh#
pfh#
 th#
 eh#
`th#
 eh#
 th#
@th#
`th#
 zh#
@zh#
 {h#
 {h#
piS(
@xS(
 {h#
 {h#
 {h#
`{h#
piS(
@xS(
`{h#
`{h#
`{h#
piS(
@xS(
piS(
@xS(
piS(
@xS(
`OT(
PPT(
`OT(
`OT(
PPT(
`OT(
`OT(
`OT(
PPT(
`OT(
`OT(
`OT(
@ i#
piS(
@xS(
piS(
@xS(
piS(
@xS(
@ i#
@ i#
`!i#
 "i#
@!i#
`!i#
 "i#
@"i#
@ i#
@ i#
 !i#
 !i#
`0i#
`>i#
`0i#
piS(
@xS(
piS(
@xS(
piS(
@xS(
`<i#
`<i#
p<i#
`>i#
`>i#
 ?i#
@@i#
@Ai#
 ?i#
 ?i#
`?i#
0=i#
 @i#
0>i#
@@i#
`@i#
 Ai#
P=i#
@Ai#
`Ai#
p=i#
`>i#
`>i#
@?i#
@?i#
`\i#
 ^i#
p]i#
 ^i#
@^i#
`^i#
@ci#
`ci#
 ci#
 fi#
@fi#
pgi#
`hi#
@hi#
pii#
pii#
Pii#
`(b,
 li#
@li#
@ki#
`OT(
@ki#
@ki#
@ki#
0oi#
@oi#
`OT(
@oi#
@oi#
0qi#
0qi#
@qi#
 ri#
 si#
@si#
@ti#
@ti#
Pti#
0vi#
Pvi#
pvi#
@ui#
`OT(
@ui#
@ui#
@ui#
0{i#
@ui#
0{i#
P{i#
PPT(
`OT(
`OT(
`OT(
PPT(
`OT(
`OT(
`OT(
PPT(
`OT(
`OT(
 |e#
piS(
@xS(
piS(
@xS(
piS(
@xS(
@!j#
 "j#
`OT(
 &j#
 &j#
@!j#
PPT(
`OT(
@!j#
@!j#
`OT(
 &j#
0&j#
P&j#
 /j#
`/j#
@0j#
@1j#
@2j#
@3j#
@4j#
@5j#
 /j#
@/j#
`/j#
`/j#
@.j#
 0j#
@0j#
`0j#
@,j#
 1j#
@-j#
@1j#
`1j#
 2j#
@2j#
`2j#
 -j#
`.j#
 3j#
`,j#
@3j#
`3j#
 ,j#
 4j#
`-j#
@4j#
`4j#
 5j#
 .j#
@5j#
`5j#
Pej#
`ej#
 gj#
pjj#
@lj#
piS(
@xS(
@lj#
piS(
@xS(
@lj#
@lj#
@lj#
@lj#
`lj#
piS(
@xS(
pxj#
@yj#
@yj#
`yj#
PPT(
`OT(
`OT(
`OT(
PPT(
`OT(
`OT(
`OT(
PPT(
`OT(
`OT(
`OT(
PPT(
`OT(
`OT(
`OT(
PPT(
`OT(
`OT(
`OT(
@(k#
piS(
@xS(
@(k#
piS(
@xS(
@(k#
@(k#
@(k#
@(k#
`(k#
piS(
@xS(
`(k#
`(k#
`(k#
`(k#
 4k#
 4k#
04k#
P4k#
`6k#
@6k#
`5k#
`6k#
@5k#
 6k#
@?k#
 ?k#
 ?k#
@?k#
`?k#
piS(
@xS(
piS(
@xS(
piS(
@xS(
 ?k#
 ?k#
0Lk#
PMk#
0Lk#
pLk#
pKk#
0Kk#
0Mk#
PKk#
PMk#
pMk#
PLk#
`Yk#
`Yk#
piS(
@xS(
piS(
@xS(
 Zk#
piS(
@xS(
 Zk#
 Zk#
 Zk#
 Zk#
`Yk#
`Yk#
0fk#
0fk#
pfk#
pek#
Pfk#
`ok#
`ok#
piS(
@xS(
piS(
@xS(
piS(
@xS(
P{k#
P{k#
`{k#
@~k#
@~k#
@~k#
P|k#
0}k#
p|k#
P}k#
0|k#
 ~k#
 ~k#
`~k#
`~k#
piS(
@xS(
piS(
@xS(
piS(
@xS(
@i{,
@i{,
`(b,
`(b,
`OT(
`OT(
`OT(
`OT(
piS(
@xS(
piS(
@xS(
 *l#
0*l#
 +l#
@+l#
`+l#
 *l#
0*l#
0=l#
P=l#
p=l#
0>l#
P>l#
p>l#
@<l#
piS(
@xS(
@<l#
@<l#
@<l#
@<l#
@<l#
@<l#
`Nl#
pOl#
`(b,
`OT(
 Ql#
@Ql#
`OT(
 Sl#
 Sl#
0Sl#
PSl#
 Ul#
0Ul#
PUl#
@i{,
@i{,
`Wl#
 Xl#
 Xl#
 Xl#
 Xl#
0Xl#
PXl#
pXl#
 \l#
`\l#
`\l#
 \l#
`\l#
p\l#
@\l#
Pal#
 al#
`al#
 bl#
@bl#
`bl#
p(d#
 hl#
0hl#
p(d#
0il#
@il#
Pil#
@i{,
@i{,
0kl#
Pkl#
pkl#
p]i#
Pql#
pql#
pvl#
@xl#
0yl#
`(b,
0Yc#
@{l#
`OT(
@{l#
@{l#
@{l#
p~l#
`OT(
pIi"
 Ti"
piS(
@xS(
pIi"
 Ti"
piS(
@xS(
@i{,
Pfc#
piS(
@xS(
piS(
@xS(
 sa,
 sa,
piS(
@xS(
piS(
@xS(
 sa,
 sa,
@i{,
`(b,
`OT(
`OT(
piS(
@xS(
piS(
@xS(
@aj#
@"h#
`A4.
 pd#
P]o#
 `i#
@zj#
@_h#
`So#
@lj#
(ro#
0ad#
z	o#
 ~d#
`Xc#
@nj#
8io#
(lo#
 ]e#
8eo#
`si#
 jc#
 ;d#
pao#
@+4.
@	f#
@co#
 Go#
@bd#
@Zl#
@cl#
PHo#
@gj#
`Gc#
`uf#
@hc#
`(l#
@#e#
@>o#
hNo#
(%o#
 Yo#
 ^o#
`Zf#
p$o#
@`e#
@9f#
xNo#
`;j#
@ud#
@]i#
@7f#
02o#
p:o#
@cd#
04o#
@ao#
@ij#
`Nv"
`ao#
 To#
H^o#
@Fj#
 di#
`Ao#
@<e#
`_i#
@=j#
Pz!"
 cd#
 dd#
@(g#
P#o#
@go#
`!o#
@,g#
p1o#
 Vh#
PNo#
 "d#
8^o#
X#o#
 kj#
Pdf"
`Yf#
p;o#
`2o#
 fl#
hmo#
@ke#
@Bo#
 @l#
07o#
@Og#
@,4.
@Xo#
p/o#
04Z,
X?o#
`bi#
`Rd#
`\f#
@8d#
`25.
Heo#
Xfo#
@[j#
@hh#
 nc#
 !g#
`7c#
@Rj#
hao#
`Go#
@>k#
 ii#
@Ng#
 yd#
 Z	#
@af#
H]o#
h[o#
x/o#
`B!"
@Dj#
 25.
`ud#
 Bh#
@Sj#
pNd#
xWo#
(;o#
@Oe#
@%o#
 Gc#
xho#
@)i#
@+f#
 Fo#
 [f#
@Ze#
Pao#
 2o#
0`o#
`|d#
 ;l#
`55.
P4o#
 Ph#
`94.
8>o#
@2h#
@Zj#
`Wh#
@;h#
01o#
 gl#
`'o#
 tf#
@ho#
0>o#
0oo#
`#o#
`wi#
@Th#
`+e#
@,o#
8Bo#
@Ag#
0ff"
`Al#
x2o#
@Tk#
0io#
(eo#
xao#
`"g#
Y[o#
 8c,
(Bo#
puf"
8lo#
@4e#
Pti#
`Ei#
@he#
hBo#
P^o#
`Rl#
@ae#
@#j#
8"o#
@!o#
@#h#
 Hc#
 Nf#
@Mg#
 mi#
pSo#
`?l#
`fl#
@jj#
@[e#
hWo#
@`j#
pHo#
xAo#
@Vh#
(_o#
`J},
@^o#
@fo#
0:o#
08o#
 +o#
 mc#
pso#
@so#
h\o#
 Vd#
 lc#
P7o#
@*h#
@Zk#
h1o#
`hd#
@di#
 Wl#
82o#
0jo#
 ro#
@|l#
 io#
@Bi#
@ug#
@}g#
`Ph#
@ e#
05o#
 Zf#
`Eh#
@=k#
`ji#
Xdo#
 `l#
 eg#
`Cl#
@Le#
@sl#
pTo#
H4o#
@9e#
P9o#
0Nd#
@Rk#
@jk#
 >o#
(Io#
@$h#
`Eo#
x$o#
@1e#
`!d#
`+o#
`sd#
`Ah#
`65.
09o#
 ,o#
@|g#
@Sk#
@0k#
Pql#
@Ao#
@}i#
p7o#
0Od#
84o#
PCo#
H?o#
`Vd#
`do#
`Bl#
`ai#
`#5.
Peo#
 Sd#
 \i#
P`o#
@Lj#
x]o#
@;c#
`xc#
0So#
8Po#
`!g#
@)h#
 i	#
@|d#
0eo#
@Be#
x8o#
pNo#
0Ro#
`Zo#
@Fg#
8oo#
@(k#
 Zo#
 }d#
@$k#
`xi#
h#o#
 eo#
`tf#
X.o#
@ j#
@pl#
`qf#
 qf#
 Eo#
0^o#
@$o#
pio#
 Qh#
Pjo#
 *o#
Hao#
 *!"
`el#
P$o#
@Df#
@fj#
`od#
@(o#
 /o#
@Rl#
 ji#
@=c#
`pf#
@kg#
@>j#
p9o#
P%o#
`\e#
@Ri#
@Vg#
p<o#
@qd#
@ge#
0;o#
@=h#
Pko#
`li#
@3d#
@?f#
`"d#
`6h#
 ?o#
 .o#
pFo#
@pd#
@	e#
8%o#
`Ic#
@Wi#
@Yh#
@hj#
@Hg#
HWo#
Pad#
xSo#
hdo#
Xio#
`bg#
@Bd#
`]o#
x4o#
`uo#
 ao#
8$o#
PUo#
@Ii#
@4d#
06o#
P_d#
@fe#
(so#
0so#
h]o#
p`h,
`I~ 
0Bo#
(2o#
@)e#
@ i#
 ai#
@#o#
`&o#
X6o#
@Z5.
`Fo#
`$o#
0lo#
P1o#
@ll#
(ao#
H6o#
@"o#
h$o#
HRo#
pGo#
8so#
 53.
 go#
@xj#
y	o#
 Pd#
` d#
@+o#
@Ol#
 do#
@*i#
@Ak#
@rd#
@ml#
@Vl#
@$e#
`:l#
0Fd#
 {a,
8ao#
0_5.
H$o#
`fi#
p`d#
@Rf#
@*c,
 Bo#
@to#
xGo#
0]o#
@	k#
`%o#
`Yo#
 &o#
@nl#
@bo#
`Xo#
0To#
{oo#
p"o#
@io#
0Io#
`[o#
`jc#
0Co#
 Ug#
 ul#
`Yk#
@Zo#
@uo#
 Lo#
peo#
`[f#
 Pk#
@vg#
`Od#
pBo#
 ]c#
Huo#
`mi#
 ~k#
PFd#
@]f"
 \f#
P6o#
pDo#
`zh#
@yd#
`?h#
($o#
@+h#
 .5.
  o#
@0d#
P_o#
 @o#
 ]f#
`6o#
( o#
pOo#
8#o#
0ql#
@Mj#
p^o#
p#o#
`Pd#
@Ue#
XFo#
pWo#
@Ej#
0ko#
@[l#
 ,g#
@1i#
 pf#
@Tl#
8ro#
@^e#
@ei#
00o#
@wg#
0_o#
 $o#
`Rh#
`lc#
0 o#
@]o#
`yd#
@@h#
@?o#
`hl#
`gl#
@Xe#
@Wo#
p5o#
@+i#
@Go#
@8g#
@[c#
@Pi#
@,l#
`H~ 
PNd#
@2g#
@Oo#
@Ki#
P0o#
0Do#
`	d#
` j#
@gk#
@5e#
h2o#
 65.
pfo#
 84.
@1f#
@:e#
@ql#
 )o#
@@g#
 Qd#
`>},
 4o#
@/i#
 %o#
pUo#
@?g#
 A4.
`Oo#
 'o#
 j4.
p0o#
@3k#
X]o#
`io#
`dc#
zoo#
Pio#
0'j"
@pg#
`Sg#
@*k#
@Tj#
`35.
@7k#
@og#
@pk#
 35.
P;o#
`hj,
 rf#
`3o#
 Ic#
 	d#
@gc#
T?o#
 Ao#
 bo#
`95.
`90"
 (l#
@~d#
 co#
@Gg#
@Zi#
`ce#
@do#
P2o#
 Tg#
@0h#
`ho#
0`d#
0<o#
`.o#
 oo#
`Ec#
pjo#
x#o#
|ro#
0U0"
(^o#
`"o#
@$\,
@\c#
@ng#
@3o#
X$o#
x1o#
8Go#
hGo#
p]o#
 (o#
@Kj#
 55.
 el#
 C3.
 ?k#
P5o#
(Ro#
yoo#
P<o#
 !o#
` o#
X4o#
hio#
 #o#
`Ne#
hfo#
X2o#
 -o#
hOo#
(4o#
P8o#
p4o#
@eo#
HBo#
@Mv"
p6o#
@?j#
{	o#
`7h#
`9j#
h4o#
H#o#
`rf#
@\h#
@Qi#
 vf#
@Yj#
XBo#
@[k#
8Oo#
(>o#
 3o#
@2o#
@Pc#
pUd#
0Po#
@;e#
h8o#
@-o#
8Ro#
0ld#
 \o#
PGo#
p`o#
 Xo#
pMd#
@]g#
@Pl#
``i#
@ui#
XWo#
0Ho#
p\o#
@Po#
 "g#
`No#
`;l#
0%o#
`mo#
@=e#
 xi#
HGo#
0rf"
PDo#
P"o#
`.5.
`dd#
PTo#
XOo#
H%o#
 uf#
@~g#
 9!"
 ,4.
`-o#
(]o#
`pd#
`%i#
`ld#
@uh#
x6o#
XNo#
`Bh#
p_d#
`fo#
`Wo#
@{h,
@}4.
<>o#
@le#
@6e#
(io#
 g4.
@ue#
 !d#
`go#
 gd#
pkd#
 Cl#
xPo#
@&o#
`!e#
Hio#
H2o#
PBo#
@Io#
@0f#
@wl#
hFo#
pCo#
`co#
`(o#
p8o#
@ o#
`mc#
 +4.
 ho#
@8c,
 dc#
@Of#
@@o#
@1h#
 +e#
0ro#
 ]o#
@2f#
@ol#
P`d#
@Pe#
p2o#
@Ji#
 sh#
P:o#
@>f#
@<l#
`:5.
 ;o#
 8	#
@oh#
@Ro#
 Ro#
`Hc#
@gi#
@Eo#
`Pk#
`*o#
0Uo#
@dh#
@Fo#
pdo#
 wi#
`bo#
@*o#
 #g#
@	g#
@ti#
@Yo#
`,o#
p|c#
 Yf#
8?o#
  d#
@"j#
@'o#
p_o#
 )l#
X"o#
@Ff,
0#o#
Xao#
@Je#
@Ke#
@fd#
 Al#
@)d#
@1g#
`yh#
 eh#
`4o#
@Me#
 sd#
`@l#
`9k#
 _o#
0$o#
pko#
hSo#
@te#
`ed#
`>i#
@)o#
`rd#
@"e#
`)o#
`Tg#
@}d#
P.Z 
@8f#
 Bl#
POo#
 fo#
`Bo#
@(f#
@oo#
0ao#
`kj#
0?o#
 7h#
@jc#
PWo#
@`w&
p!h"
P@?"
P6|"
0U^"
 Pu"
P h"
@"['
 2%*
0z%*
`4$*
 tx"
`(x"
@cS(
P0{&
P6$*
0*$*
06U*
PJy&
`6U 
@2%*
p9q"
pO%&
0;}"
`G"*
 #b(
p	}"
@`@"
0%n"
p%l"
pcg"
`ZW"
 -{"
 ;}"
 ){"
PcS(
 !z"
 1$*
0#x"
 LZ 
`-$*
p>	"
p{l"
0v['
 VX'
0_l"
`)$*
 &$*
p+w&
@k?"
@1p"
pAh"
p3'&
 iz&
pIZ 
`M|"
`ez&
p%i"
P=|"
0cl"
 gw"
0YW"
`Xo"
@[%&
P\"&
`Ow"
`#$*
p~T(
p i"
`'j"
Ptw"
@}H"
@Ln"
0YZ 
0?n"
`F	"
 b:"
@Dx"
 P	*
@4$*
`5w&
PNz"
`Pl"
P5%*
P,~&
`yx"
@6r"
@1{&
@]f"
pAv&
`($*
pUr"
P]"&
0?	"
@`q"
@`}"
PIW"
pk~&
PWr"
0ET(
@CP(
Pw8"
@$w"
`/$*
p@&*
P/l"
PQ&*
@]%*
@1%*
P\y&
 AV"
Pqy&
 ;$*
 $l"
P%$*
0]l"
 ZS(
p-$*
 1%*
`My&
`D&*
@#t"
`9h"
 #z"
PDZ 
@'x"
@'V"
0*}"
 H["
`K&*
@[U 
p?p"
PX@"
PCP(
 [W"
p&$*
`Lz"
`0n"
 O	*
 6&*
PXW"
`!%*
`km"
p"b(
pC&*
 AU 
0|T(
 )U 
P`q"
p'%*
`o%*
P'h"
p\S(
0Dv&
0Rh#
Pek#
0?l#
pXc#
?333333
P>f#
P7f#
P0f#
PDf#
Paf#
apxH
`pxH
PMg#
PFg#
P?g#
P8g#
PVg#
P|g#
Pug#
Png#
s&JI
r&JI
P0h#
P)h#
P"h#
P_h#
Phh#
Puh#
P)i#
PPi#
PIi#
PBi#
?@KL
P`j#
PYj#
PRj#
PKj#
PDj#
P=j#
p;j#
Pnj#
P7k#
PAk#
PRk#
pPk#
P,l#
cepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:30:58.916 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:30:59.836 - #2 - 1124/856 - MemoryShieldScheduler: In checkMemoryShieldProperties_i()
2017/03/02 04:30:59.930 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:00.944 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:01.958 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:02.972 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:03.986 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:05.000 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:06.014 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:07.028 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:08.042 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:09.056 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:10.070 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:11.084 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
2017/03/02 04:31:12.098 - #2 - 888/856 - HostManager: slave socket(-1) accepting rejected: Error 28 fault: SOAP-ENV:Server[no subcode]
"Timeout"
Detail: [no detail]
FILE0
>/!#
xP;1
)FA1
1#Y@
1#hQ
1%.D
!'!&
1(dM
+1	{
1)N\
1-	p
!.5K!
10')
F.11<
12?o
!48*1
`(b,
p&t#
`'t#
@i{,
P~\,
0wt#
PPT(
`OT(
PPT(
`OT(
0ct#
PPT(
`OT(
0ct#
0wt#
 wt#
`OT(
0ct#
0wt#
 wt#
 :t#
`OT(
0ct#
P	t#
0wt#
 wt#
@	t#
pRt#
pTt#
PUt#
@zt#
`~t#
Pzt#
@zt#
0wt#
@zt#
@zt#
@zt#
0Fu#
@zt#
Ptu#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
P`u#
@zt#
@zt#
@zt#
0~u#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
0wt#
piS(
@xS(
piS(
@xS(
P	v#
@	v#
0	v#
0wt#
piS(
@xS(
@4v#
0wt#
P4v#
piS(
@xS(
@4v#
0wt#
P4v#
`	v#
piS(
@xS(
@4v#
0wt#
P4v#
P v#
P7v#
`7v#
p7v#
P8v#
 7v#
@zt#
@	x#
0Hw#
@Ew#
@Cw#
0wt#
@zt#
 &w#
`'w#
@zt#
@zt#
@zt#
@zt#
 0w#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
p5w#
@zt#
@,w#
@zt#
@zt#
 (w#
@zt#
p>w#
@zt#
@zt#
@zt#
@zt#
@nw#
@zt#
@zt#
 jw#
@zt#
@zt#
@zt#
@zt#
@zt#
@zt#
p]w#
@zt#
@zt#
PYw#
@zt#
@zt#
@zt#
@zt#
0Hw#
@Ew#
@Cw#
PVv#
pKv#
 ;v#
0wt#
0Dv#
@Mv#
`Bv#
 Xv#
p8p#
@mr#
`H~ 
`I~ 
@5v#
@Vl#
`xt#
 C3.
@xt#
 )U 
Pxt#
 5v#
05v#
@i{,
P~\,
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
`H~ 
`I~ 
@gc#
Pz$!
 C3.
@Ff,
@Vl#
`:5.
PDZ 
 ZS(
0R&*
0YZ 
 AU 
P6$*
 )U 
@[U 
 A  
P@  
 @  
PM  
upper(s) -> string
Return a copy of the string s converted to uppercase.
translate(s,table [,deletechars]) -> string
Return a copy of the string s, where all characters occurring
in the optional argument deletechars are removed, and the
remaining characters have been mapped through the given
translation table, which must be a string of length 256.
swapcase(s) -> string
Return a copy of the string s with upper case characters
converted to lowercase and vice versa.
strip(s) -> string
Return a copy of the string s with leading and trailing
whitespace removed.
split(s [,sep [,maxsplit]]) -> list of strings
splitfields(s [,sep [,maxsplit]]) -> list of strings
Return a list of the words in the string s, using sep as the
delimiter string.  If maxsplit is nonzero, splits into at most
maxsplit words.  If sep is not specified, any whitespace string
is a separator.  Maxsplit defaults to 0.
(split and splitfields are synonymous)
rstrip(s) -> string
Return a copy of the string s with trailing whitespace removed.
rfind(s, sub [,start [,end]]) -> int
Return the highest index in s where substring sub is found,
such that sub is contained within s[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
replace (str, old, new[, maxsplit]) -> string
Return a copy of string str with all occurrences of substring
old replaced by new. If the optional argument maxsplit is
given, only the first maxsplit occurrences are replaced.
maketrans(frm, to) -> string
Return a translation table (a string of 256 bytes long)
suitable for use in string.translate.  The strings frm and to
must be of the same length.
lower(s) -> string
Return a copy of the string s converted to lowercase.
lstrip(s) -> string
Return a copy of the string s with leading whitespace removed.
join(list [,sep]) -> string
joinfields(list [,sep]) -> string
Return a string composed of the words in list, with
intervening occurrences of sep.  Sep defaults to a single
space.
(join and joinfields are synonymous)
find(s, sub [,start [,end]]) -> in
Return the lowest index in s where substring sub is found,
such that sub is contained within s[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
expandtabs(string, [tabsize]) -> string
Expand tabs in a string, i.e. replace them by one or more spaces,
depending on the current column and the given tab size (default 8).
The column number is reset to zero after each newline occurring in the
string.  This doesn't understand other non-printing characters.
count(s, sub[, start[, end]]) -> int
Return the number of occurrences of substring sub in string
s[start:end].  Optional arguments start and end are
interpreted as in slice notation.
capitalize(s) -> string
Return a copy of the string s with only its first character
capitalized.
atol(s [,base]) -> long
Return the long integer represented by the string s in the
given base, which defaults to 10.  The string s must consist
of one or more digits, possibly preceded by a sign.  If base
is 0, it is chosen from the leading characters of s, 0 for
octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
0x or 0X is accepted.  A trailing L or l is not accepted,
unless base is 0.
atoi(s [,base]) -> int
Return the integer represented by the string s in the given
base, which defaults to 10.  The string s must consist of one
or more digits, possibly preceded by a sign.  If base is 0, it
is chosen from the leading characters of s, 0 for octal, 0x or
0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
accepted.
atof(s) -> float
Return the floating point number represented by the string s.
isatty() -> bool.  True if the file is connected to a tty device.
fileno() -> int. "file descriptor".
This is needed for lower-level file interfaces, such the fcntl module.
writable() -> bool.  True if file was opened in a write mode.
readable() -> bool.  True if file was opened in a read mode.
seekable() -> bool.  True if file supports random-access.
close() -> None.  Close the file.
A closed file cannot be used for further I/O operations.  close() may be
called more than once without error.  Changes the fileno to -1.
truncate([size: int]) -> int.  Truncate the file to at most size bytes and
return the truncated size.
Size defaults to the current file position, as returned by tell().
The current file position is changed to the value of size.
tell() -> int.  Current file position
seek(offset: int[, whence: int]) -> int.  Move to new file position
and return the file position.
Argument offset is a byte count.  Optional argument whence defaults to
0 (offset from start of file, offset should be >= 0); other values are 1
(move relative to current position, positive or negative), and 2 (move
relative to end of file, usually negative, although many platforms allow
seeking beyond the end of a file).
Note that not all file objects are seekable.
write(b: bytes) -> int.  Write bytes b to file, return number written.
Only makes one system call, so not all of the data may be written.
The number of bytes actually written is returned.
readinto() -> Same as RawIOBase.readinto().
readall() -> bytes.  read all data from the file, returned as bytes.
In non-blocking mode, returns as much as is immediately available,
or None if no data is available.  On end-of-file, returns ''.
read(size: int) -> bytes.  read at most size bytes, returned as bytes.
Only makes one system call, so less data may be returned than requested
In non-blocking mode, returns None if no data is available.
On end-of-file, returns ''.
file(name: str[, mode: str]) -> file IO object
Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),
writing or appending.  The file will be created if it doesn't exist
when opened for writing or appending; it will be truncated when
opened for writing.  Add a '+' to the mode to allow simultaneous
reading and writing.
A buffered interface to random access streams.
The constructor creates a reader and writer for a seekable stream,
raw, given in the first argument. If the buffer_size is omitted it
defaults to DEFAULT_BUFFER_SIZE. max_buffer_size isn't used anymore.
A buffer for a writeable sequential RawIO object.
The constructor creates a BufferedWriter for the given writeable raw
stream. If the buffer_size is not given, it defaults to
DEFAULT_BUFFER_SIZE. max_buffer_size isn't used anymore.
Create a new buffered reader using the given readable raw IO object.
Codec used when reading a file in universal newlines mode.  It wraps
another incremental decoder, translating \r\n and \r into \n.  It also
records the types of newlines encountered.  When used with
translate=False, it ensures that the newline sequence is returned in
one piece. When used with decoder=None, it expects unicode strings as
decode input and translates newlines without first invoking an external
decoder.
Character and line based layer over a BufferedIOBase object, buffer.
encoding gives the name of the encoding that the stream will be
decoded or encoded with. It defaults to locale.getpreferredencoding.
errors determines the strictness of encoding and decoding (see the
codecs.register) and defaults to "strict".
newline controls how line endings are handled. It can be None, '',
'\n', '\r', and '\r\n'.  It works as follows:
* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.
* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '', no translation takes place. If newline is any of the
  other legal values, any '\n' characters written are translated to
  the given string.
If line_buffering is True, a call to flush is implied when a call to
write contains a newline character.
locked() -> bool
(locked_lock() is an obsolete synonym)
Return whether the lock is in the locked state.
release()
(release_lock() is an obsolete synonym)
Release the lock, allowing another thread that is blocked waiting for
the lock to acquire the lock.  The lock must be in the locked state,
but it needn't be locked by the same thread that unlocks it.
acquire([wait]) -> bool
(acquire_lock() is an obsolete synonym)
Lock the lock.  Without argument, this blocks if the lock is already
locked (even by the same thread), waiting for another thread to release
the lock, and return True once the lock is acquired.
With an argument, this will only block if the argument is true,
and the return value reflects whether the lock is acquired.
The blocking operation is not interruptible.
stack_size([size]) -> size
Return the thread stack size used when creating new threads.  The
optional size argument specifies the stack size (in bytes) to be used
for subsequently created threads, and must be 0 (use platform or
configured default) or a positive integer value of at least 32,768 (32k).
If changing the thread stack size is unsupported, a ThreadError
exception is raised.  If the specified size is invalid, a ValueError
exception is raised, and the stack size is unmodified.  32k bytes
 currently the minimum supported stack size value to guarantee
sufficient stack space for the interpreter itself.
Note that some platforms may have particular restrictions on values for
the stack size, such as requiring a minimum stack size larger than 32kB or
requiring allocation in multiples of the system memory page size
- platform documentation should be referred to for more information
(4kB pages are common; using multiples of 4096 for the stack size is
the suggested approach in the absence of more specific information).
_count() -> integer
Return the number of currently running Python threads, excluding 
the main thread. The returned number comprises all threads created
through `start_new_thread()` as well as `threading.Thread`, and not
yet finished.
This function is meant for internal and specialized purposes only.
In most applications `threading.enumerate()` should be used instead.
get_ident() -> integer
Return a non-zero integer that uniquely identifies the current thread
amongst other threads that exist simultaneously.
This may be used to identify per-thread resources.
Even though on some platforms threads identities may appear to be
allocated consecutive numbers starting at 1, this behavior should not
be relied upon, and the number should be seen purely as a magic cookie.
A thread's identity may be reused for another thread after it exits.
interrupt_main()
Raise a KeyboardInterrupt in the main thread.
A subthread can use this function to interrupt the main thread.
exit()
(exit_thread() is an obsolete synonym)
This is synonymous to ``raise SystemExit''.  It will cause the current
thread to exit silently unless the exception is caught.
allocate_lock() -> lock object
(allocate() is an obsolete synonym)
Create a new lock object.  See help(LockType) for information about locks.
start_new_thread(function, args[, kwargs])
(start_new() is an obsolete synonym)
Start a new thread and return its identifier.  The thread will call the
function with positional arguments from the tuple args and keyword arguments
taken from the optional dictionary kwargs.  The thread exits when the
function returns; the return value is ignored.  The thread will also exit
when the function raises an unhandled exception; a stack trace will be
printed unless the exception is SystemExit.
tzset()
Initialize, or reinitialize, the local timezone to the value stored in
os.environ['TZ']. The TZ environment variable should be specified in
standard Unix timezone format as documented in the tzset man page
(eg. 'US/Eastern', 'Europe/Amsterdam'). Unknown timezones will silently
fall back to UTC. If the TZ environment variable is not set, the local
timezone is set to the systems best guess of wallclock time.
Changing the TZ environment variable without calling tzset *may* change
the local timezone used by methods such as localtime, but this behaviour
should not be relied on.
strptime(string, format) -> struct_time
Parse a string to a time tuple according to a format specification.
See the library reference manual for formatting codes (same as strftime()).
strftime(format[, tuple]) -> string
Convert a time tuple to a string according to a format specification.
See the library reference manual for formatting codes. When the time tuple
is not present, current time as returned by localtime() is used.
mktime(tuple) -> floating point number
Convert a time tuple in local time to seconds since the Epoch.
ctime(seconds) -> string
Convert a time in seconds since the Epoch to a string in local time.
This is equivalent to asctime(localtime(seconds)). When the time tuple is
not present, current time as returned by localtime() is used.
asctime([tuple]) -> string
Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.
When the time tuple is not present, current time as returned by localtime()
is used.
localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
                          tm_sec,tm_wday,tm_yday,tm_isdst)
Convert seconds since the Epoch to a time tuple expressing local time.
When 'seconds' is not passed in, convert the current time instead.
gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,
                       tm_sec, tm_wday, tm_yday, tm_isdst)
Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.
GMT).  When 'seconds' is not passed in, convert the current time instead.
sleep(seconds)
Delay execution for a given number of seconds.  The argument may be
a floating point number for subsecond precision.
clock() -> floating point number
Return the CPU time or real time since the start of the process or since
the first call to clock().  This has as much precision as the system
records.
time() -> floating point number
Return the current time in seconds since the Epoch.
Fractions of a second may be present if the system clock provides them.
normalize(form, unistr)
Return the normal form 'form' for the Unicode string unistr.  Valid
values for form are 'NFC', 'NFKC', 'NFD', and 'NFKD'.
lookup(name)
Look up character by name.  If a character with the
given name is found, return the corresponding Unicode
character.  If not found, KeyError is raised.
name(unichr[, default])
Returns the name assigned to the Unicode character unichr as a
string. If no name is defined, default is returned, or, if not
given, ValueError is raised.
decomposition(unichr)
Returns the character decomposition mapping assigned to the Unicode
character unichr as string. An empty string is returned in case no
such mapping is defined.
east_asian_width(unichr)
Returns the east asian width assigned to the Unicode character
unichr as string.
mirrored(unichr)
Returns the mirrored property assigned to the Unicode character
unichr as integer. Returns 1 if the character has been identified as
a "mirrored" character in bidirectional text, 0 otherwise.
combining(unichr)
Returns the canonical combining class assigned to the Unicode
character unichr as integer. Returns 0 if no combining class is
defined.
bidirectional(unichr)
Returns the bidirectional class assigned to the Unicode character
unichr as string. If no such value is defined, an empty string is
returned.
category(unichr)
Returns the general category assigned to the Unicode character
unichr as string.
numeric(unichr[, default])
Returns the numeric value assigned to the Unicode character unichr
as float. If no such value is defined, default is returned, or, if
not given, ValueError is raised.
digit(unichr[, default])
Returns the digit value assigned to the Unicode character unichr as
integer. If no such value is defined, default is returned, or, if
not given, ValueError is raised.
decimal(unichr[, default])
Returns the decimal value assigned to the Unicode character unichr
as integer. If no such value is defined, default is returned, or, if
not given, ValueError is raised.
Common string manipulations, optimized for speed.
Always use "import string" rather than referencing
this module directly.
A lock object is a synchronization primitive.  To create a lock,
call the PyThread_allocate_lock() function.  Methods are:
acquire() -- lock the lock, possibly blocking until it can be obtained
release() -- unlock of the lock
locked() -- test whether the lock is currently locked
A lock is not owned by the thread that locked it; another thread may
unlock it.  A thread attempting to lock a lock that it has already locked
will block until another thread unlocks it.  Deadlocks may ensue.
This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface.
This module provides various functions to manipulate time values.
There are two standard representations of time.  One is the number
of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).
The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (four digits, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.
Variables:
timezone -- difference in seconds between UTC and local standard time
altzone -- difference in  seconds between UTC and local DST time
daylight -- whether local time should reflect DST
tzname -- tuple of (standard time zone name, DST time zone name)
Functions:
time() -- return current time in seconds since the Epoch as a float
clock() -- return CPU time since process start as a float
sleep() -- delay for a number of seconds given as a float
gmtime() -- convert seconds since Epoch to UTC tuple
localtime() -- convert seconds since Epoch to local time tuple
asctime() -- convert time tuple to string
ctime() -- convert time in seconds to string
mktime() -- convert local time tuple to seconds since Epoch
strftime() -- convert time tuple to string according to format specification
strptime() -- parse string to time tuple according to format specification
tzset() -- change the local timezone
LETTE
SMAL
SYLLABL
CAPITA
LATI
EGYPTIA
HIEROGLYP
ARABI
COMPATIBILIT
MATHEMATICA
CUNEIFOR
SYMBO
FORM
CANADIA
SYLLABIC
DIGI
HANGU
GREE
LIGATUR
MUSICA
TIME
ETHIOPI
VOWE
ITALI
CYRILLI
RADICA
SANS-SERI
CIRCLE
COMBININ
FINA
SQUAR
VARIATIO
BRAILL
PATTER
RIGH
BYZANTIN
ISOLATE
ABOVE
DOUBL
KATAKAN
KANGX
NUMBE
SIGN
BELOW
LINEA
MODIFIE
TIBETA
MYANMA
CARRIE
ARROW
INITIA
WHIT
VERTICA
ABOV
COPTI
ARRO
MONGOLIA
MARK
KHME
DEVANAGAR
PARENTHESIZE
BLAC
JONGSEON
HEBRE
DRAWING
RIGHTWARD
CHOSEON
STROKE
HALFWIDT
BALINES
GEORGIA
HOOK
IDEOGRA
IDEOGRAPHI
SYMBOL
SCRIP
HEAV
FULLWIDT
EQUA
BRACKET
DOMIN
NUMERI
FRAKTU
JUNGSEON
MALAYALA
GLAGOLITI
CHARACTE
LEFTWARD
MEDIA
TELUG
BENGAL
ARMENIA
JAVANES
HIRAGAN
WEST-CRE
IDEOGRAP
BAMU
KANNAD
CHEROKE
ORIY
THRE
GUJARAT
FOUR
RUNI
SAURASHTR
TETRAGRA
THREE
DESERE
SINHAL
GURMUKH
NOTATIO
SYRIA
VOCALI
ACUTE
LEPCH
LIGH
TURKI
DOUBLE-STRUC
FIVE
TAMI
FUNCTIONA
HAMZ
TELEGRAP
EIGHT
HORIZONTA
NINE
SEVEN
DASI
KAITH
LIMB
MAKSUR
BOPOMOF
KHAROSHTH
SQUARE
HEXAGRA
PSIL
REVERSE
MONOSPAC
SAMARITA
STROK
TURNE
ZZYX
ZZYT
ZZYRX
ZZYR
ZZYP
ZZUX
ZZURX
ZZUR
ZZUP
ZZOX
ZZOP
ZZIX
ZZIT
ZZIP
ZZIEX
ZZIET
ZZIEP
ZZIE
ZZEX
ZZEP
ZZEE
ZZAX
ZZAT
ZZAP
ZZAA
ZYGOS
ZWARAKAY
ZUOX
ZUOP
ZUBUR
ZQAPH
ZLAM
ZIZ2
ZIQAA
ZINOR
ZILDE
ZIGZA
ZHYX
ZHYT
ZHYRX
ZHYR
ZHYP
ZHWE
ZHWA
ZHUX
ZHUT
ZHURX
ZHUR
ZHUP
ZHUOX
ZHUOP
ZHUO
ZHOX
ZHOT
ZHOP
ZHOO
ZHIVETE
ZHEX
ZHET
ZHEP
ZHEE
ZHAX
ZHAT
ZHAR
ZHAP
ZHAIN
ZHAA
ZETA
ZERO
ZEMLYA
ZEMLJA
ZAYN
ZAYIN
ZAYI
ZAVIYANI
ZATA
ZARQA
ZAQE
ZAMX
ZAIN
ZAEF
Z016H
Z016G
Z016F
Z016E
Z016D
Z016C
Z016B
Z016A
Z016
Z015I
Z015H
Z015G
Z015F
Z015E
Z015D
Z015C
Z015B
Z015A
Z015
Z014
Z013
Z012
Z011
Z010
Z009
Z008
Z007
Z006
Z005A
Z005
Z004A
Z004
Z003B
Z003A
Z003
Z002D
Z002C
Z002B
Z002A
Z002
Z001
YYRX
YWOO
YWII
YWAA
YUUKALEAPINTU
YURX
YUOX
YUOT
YUOP
YUDH
YUAN
YU-YEO
YU-YE
YU-U
YU-O
YU-I
YU-EO
YU-E
YU-AE
YU-A
YPSILI
YPORROI
YPOKRISIS
YPOKRISI
YPOGEGRAMMENI
YOUTHFULNESS
YOUTHFU
YORI
YOMO
YOGH
YODH
YO-YEO
YO-YAE
YO-YA
YO-O
YO-I
YO-EO
YO-AE
YO-A
YIZET
YIWN
YING
YIEX
YIET
YIEP
YIDDIS
YI-U
YFESIS
YFESI
YETIV
YESTU
YESIEUNG-SIOS
YESIEUNG-PANSIOS
YESIEUNG-MIEUM
YESIEUNG-HIEUH
YESIEUNG
YERU
YERI
YERA
YEORINHIEUH
YEO-YA
YEO-U
YEO-O
YENISE
YENAP
YELLOW
YAZZ
YAZH
YAYANNA
YATT
YATI
YATH
YASS
YASH
YARR
YANG
YAMOK
YAMAKKAN
YAKHH
YAKH
YAKASH
YAJURVEDI
YAHH
YAGN
YAGHH
YAGH
YADH
YADDH
YADD
YACH
YABH
YAARU
YAAI
YAADO
YA-YO
YA-U
YA-O
Y008
Y007
Y006
Y005
Y004
Y003
Y002
Y001A
Y001
Y-CRE
XYRX
XYEE
XYAA
XWEE
XWAA
XUOX
XSHAAYATHIYA
XIRO
XIEX
XIET
XIEP
XESTE
X008A
X008
X007
X006A
X006
X005
X004B
X004A
X004
X003
X002
X001
WYNN
WUOX
WUOP
WUNJ
WULU
WRONG
WRITIN
WREAT
WRAP
WORK
WORDSPACE
WOON
WOOL
WOODS-CRE
WOOD
WOMAN
WOLOSO
WITHOU
WINTER
WINJA
WINE
WINDU
WIND
WIGNYAN
WIGGL
WIDE-HEADE
WIANGWAAK
WIANG
WHOL
WHITE-FEATHERE
WHITE
WHEELE
WHEELCHAI
WHEEL
WHEE
WHEAT
WESTER
WEST
WELL
WEIGH
WEEN
WEDGE-TAILE
WEAPON
WAW-AYIN-RESH
WAVE
WATTO
WATER
WATE
WATCH
WASTING
WASSALLAM
WASLA
WASL
WASALLAM
WASALLA
WARNIN
WANDERER
WALL
WALK
WAITING
WAEN
WAAVU
W025
W024A
W024
W023
W022
W021
W020
W019
W018A
W018
W017A
W017
W016
W015
W014A
W014
W013
W012
W011
W010A
W010
W009A
W009
W008
W007
W006
W005
W004
W003A
W003
W002
W001
VZMET
VYRX
VURX
VULGA
VRACHY
VOWEL-CARRIE
VOLUM
VOLTAG
VOICING
VOICELES
VOICE
VOCA
VISIGOTHI
VISARGAYA
VISARGA
VISARG
VIRIAM
VIRGO
VIRGA
VIRAMA
VINE
VILLAGE
VIEX
VIEWDAT
VIET
VIEP
VIDA
VICTOR
VESTA
VESSE
VERTICALLY
VERTICALL
VERTICAL-06-06
VERTICAL-06-05
VERTICAL-06-04
VERTICAL-06-03
VERTICAL-06-02
VERTICAL-06-01
VERTICAL-06-00
VERTICAL-05-06
VERTICAL-05-05
VERTICAL-05-04
VERTICAL-05-03
VERTICAL-05-02
VERTICAL-05-01
VERTICAL-05-00
VERTICAL-04-06
VERTICAL-04-05
VERTICAL-04-04
VERTICAL-04-03
VERTICAL-04-02
VERTICAL-04-01
VERTICAL-04-00
VERTICAL-03-06
VERTICAL-03-05
VERTICAL-03-04
VERTICAL-03-03
VERTICAL-03-02
VERTICAL-03-01
VERTICAL-03-00
VERTICAL-02-06
VERTICAL-02-05
VERTICAL-02-04
VERTICAL-02-03
VERTICAL-02-02
VERTICAL-02-01
VERTICAL-02-00
VERTICAL-01-06
VERTICAL-01-05
VERTICAL-01-04
VERTICAL-01-03
VERTICAL-01-02
VERTICAL-01-01
VERTICAL-01-00
VERTICAL-00-06
VERTICAL-00-05
VERTICAL-00-04
VERTICAL-00-03
VERTICAL-00-02
VERTICAL-00-01
VERTICAL-00-00
VERTICAL
VERSICLE
VERS
VERGE
VEND
VEDE
VECTO
VAYANNA
VATHY
VASTNES
VASIS
VARY
VARIKA
VARIAN
VARIA
VARI
VAREIA
VAREI
VANE
VAMAGOMUKHA
VAMAGOMUKH
VALLEY
VAAVU
V040A
V040
V039
V038
V037A
V037
V036
V035
V034
V033A
V033
V032
V031A
V031
V030A
V030
V029A
V029
V028A
V028
V027
V026
V025
V024
V023A
V023
V022
V021
V020L
V020K
V020J
V020I
V020H
V020G
V020F
V020E
V020D
V020C
V020B
V020A
V020
V019
V018
V017
V016
V015
V014
V013
V012B
V012A
V012
V011C
V011B
V011A
V011
V010
V009
V008
V007B
V007A
V007
V006
V005
V004
V003
V002A
V002
V001I
V001H
V001G
V001F
V001E
V001D
V001C
V001B
V001A
V001
UYANNA
UUYANNA
UUUU
UUU3
UUU2
UTUKI
USSU3
USSU
USHX
USHUMX
USH2
URUS
URUDA
URUD
URI3
URANUS
UPWARDS
UPWARD
UPWARD
UPWAR
UPTURN
UPSILON
UPSILO
UPRIGH
UPPE
UPADHMANIYA
UP-POINTIN
UNMARRIE
UNIVERSA
UNITY
UNIT
UNION
UNIO
UNIFIE
UNDERTIE
UNDERLIN
UNDERDOT
UNDERBAR
UNDE
UNCI
UNASPIRATED
UNAP
UMUM
UMBRELLA
UMBRELL
UMBIN
UKRAINIA
UKARA
UKAR
UILLEANN
UIGHU
UGARITI
UDUG
UDATTA
UDATT
UDAAT
UBUFILI
UBHAYAT
UBADAMA
UATH
U042
U041
U040
U039
U038
U037
U036
U035
U034
U033
U032A
U032
U031
U030
U029A
U029
U028
U027
U026
U025
U024
U023A
U023
U022
U021
U020
U019
U018
U017
U016
U015
U014
U013
U012
U011
U010
U009
U008
U007
U006B
U006A
U006
U005
U004
U003
U002
U001
U-I-I
U-EO-EU
TZOA
TZEE
TZAA
TYPE-
TYPE-
TYPE-
TYPE-
TYPE-
TYPE-
TYPE-
TWOO
TWO-WA
TWO-LIN
TWO-HEADE
TWII
TWENTY-TWO
TWENTY-THREE
TWENTY-SIX
TWENTY-SEVEN
TWENTY-ONE
TWENTY-NINE
TWENTY-FOUR
TWENTY-FIVE
TWENTY-EIGHT
TWENTY-EIGHT
TWENTY
TWENT
TWELVE
TWELV
TWAA
TVRIDO
TVIMADU
TUUMU
TUTEYASAT
TURX
TURU
TURTLE
TURO2
TURNSTILE
TURBAN
TUOX
TUOT
TUOP
TUNNY
TUMETES
TUKWENTIS
TUGRI
TUG2
TUARE
TTUDDAG
TTUDDAAG
TTTHA
TTSU
TTSO
TTSI
TTSEE
TTSE
TTSA
TTHWE
TTHOO
TTHO
TTHI
TTHE
TTHAA
TTEHEH
TTEHE
TTEH
TTEE
TTAYANNA
TTAA
TSWE
TSWA
TSSE
TSHUGS
TSHOOK
TSHOO
TSHES
TSHEG
TSHE
TSHE
TSHA
TSERE
TSADI
TSAD
TSAADIY
TSAA
TRYBLIO
TRUTH
TRUNK
TRUNCATE
TRUE
TRUCK
TROMIKOSYNAGMA
TROMIKOPSIFISTON
TROMIKOPARAKALESMA
TROMIKON
TROMIKO
TROMIKOLYGISMA
TROKUTAST
TROEZENIA
TRITO
TRITIMORION
TRISIMOU
TRISEME
TRIPOD
TRIPLI
TRIPL
TRIO
TRIISAP
TRIGRAMMO
TRIGRA
TRIGORGON
TRIFONIAS
TRIFOLIAT
TRICOLON
TRIANGULA
TRIANGLE-ROUN
TRIANGLE-HEADE
TRIANGLE
TRIANGL
TRIA
TRESILLO
TREMOLO-3
TREMOLO-2
TREMOLO-1
TREE
TREADING
TRAPEZIUM
TRANSVERSA
TRANSPOSITIO
TRANSMISSION
TRANSMISSIO
TRAFFIC
TRAD
TRACK
TOURNOI
TOTA
TORTOIS
TORCULUS
TORCULU
TOPBAR
TOP-LIGHTE
TOOTH
TONOS
TONGUE
TONG
TONE-6
TONE-5
TONE-4
TONE-3
TONE-2
TONE-1
TONE
TONA
TOLONG
TOGETHER
TOANDAKHIAT
TLHWE
TLHU
TLHOO
TLHO
TLHI
TLHEE
TLHE
TLHA
TLEE
TIWN
TIWA
TITLO
TIRYAK
TIRT
TIRONIA
TIPPI
TIPEHA
TINY
TINNE
TINAGMA
TIMES
TIME
TILDE
TILD
TIKEUT-THIEUTH
TIKEUT-SIOS-KIYEOK
TIKEUT-SIOS
TIKEUT-RIEUL
TIKEUT-PIEUP
TIKEUT-MIEUM
TIKEUT-KIYEOK
TIKEUT-CIEUC
TIKEUT-CHIEUCH
TIKEUT
TIKEU
TIGH
TIGER
TIFINAG
TIEX
TIEP
TICK
TIARA
THYOO
THWOO
THWO
THWII
THWI
THWEE
THWAA
THWA
THUR
THURISA
THUNG
THUNDERSTORM
THUNDER
THUNDE
THROUGH
THROUG
THREE-PER-E
THREE-LIN
THREE-
THREAD
THOUSAND
THOUSAND
THOUSAN
THOU
THORN
THOR
THONG
THOA
THIUTH
THITA
THIRTY-SECON
THIRTY-ONE
THIRTY
THIRT
THIRTEEN
THIRTEE
THIRDS
THIRD
THIRD
THIR
THII
THIGH
THIEUT
THEY
THETHE
THETH
THETA
THET
THESPIA
THESEOS
THESEO
THERMODYNAMIC
THEREFORE
THER
THEMATISMO
THEMA
THEM
THEH
THEE
THAW
THANTHAKHAT
THANNA
THAN
THAL
THAHAN
THAAN
THAALU
TH-CRE
TEXT
TEVIR
TETRASIMOU
TETRASEME
TETRAPLI
TETRAFONIAS
TETH
TETARTO
TETARTIMORION
TESSERA
TESSER
TESSARO
TERMINATOR
TENUTO
TENU
TENTH
TENT
TENG
TEMPU
TELU
TELOU
TELISH
TELEPHONE
TELEPHON
TELEIA
TEIWS
TEGEH
TEDUNG
TEARDROP-SPOKE
TEARDROP-SHANKE
TEARDROP-BARBE
TE-U
TCHEHEH
TCHEHE
TCHEH
TCHE
TCHE
TAWELLEME
TAWA
TAVIYANI
TAURUS
TATWEEL
TATWEE
TATTOOE
TARUNG
TAPER
TANNE
TAMING
TALL
TALING
TALIN
TALENTS
TALEN
TAKHALLUS
TAKE
TAK4
TAISYOU
TAILLES
TAIL
TAGBANW
TAGALO
TACK
TABULATION
TABLE
TAALUJ
TAAI
TAAF
TA-ROL
T036
T035
T034
T033A
T033
T032A
T032
T031
T030
T029
T028
T027
T026
T025
T024
T023
T022
T021
T020
T019
T018
T017
T016A
T016
T015
T014
T013
T012
T011A
T011
T010
T009A
T009
T008A
T008
T007A
T007
T006
T005
T004
T003A
T003
T002
T001
SZWG
SZWA
SZEE
SZAA
SYRX
SYRMATIKI
SYRMA
SYOUWA
SYNEVMA
SYNDESMO
SYNCHRONOU
SYNAGM
SYNAFI
SYMMETRY
SYMMETRI
SYMBOL-9
SYMBOL-8
SYMBOL-7
SYMBOL-6
SYMBOL-54
SYMBOL-53
SYMBOL-52
SYMBOL-51
SYMBOL-50
SYMBOL-5
SYMBOL-49
SYMBOL-48
SYMBOL-47
SYMBOL-45
SYMBOL-43
SYMBOL-42
SYMBOL-40
SYMBOL-4
SYMBOL-39
SYMBOL-38
SYMBOL-37
SYMBOL-36
SYMBOL-32
SYMBOL-30
SYMBOL-3
SYMBOL-29
SYMBOL-27
SYMBOL-26
SYMBOL-25
SYMBOL-24
SYMBOL-23
SYMBOL-22
SYMBOL-21
SYMBOL-20
SYMBOL-2
SYMBOL-19
SYMBOL-18
SYMBOL-17
SYMBOL-16
SYMBOL-15
SYMBOL-14
SYMBOL-13
SYMBOL-12
SYMBOL-11
SYMBOL-10
SYMBOL-1
SYLOT
SWUN
SWORDS
SWORD
SWOO
SWII
SWEET
SWAS
SWAPPING
SWAA
SVAST
SVARITA
SVARIT
SUSPENSIO
SURX
SURROUND
SURROUN
SURFAC
SURE
SURANG
SUR9
SUPRALINEA
SUPERVISE
SUPERSET
SUPERSE
SUPERSCRIP
SUPERIMPOSE
SUPERFIXE
SUOX
SUOP
SUNG
SUNDANES
SUMMER
SUMMATION
SUMMATIO
SUMASH
SUKUN
SUKU
SUKU
SUITABLE
SUIT
SUHUR
SUD2
SUCCEEDS
SUCCEED
SUCCEED
SUCCEE
SUBUNIT
SUBSTITUTIO
SUBSTITUTE
SUBSTITUT
SUBSET
SUBSE
SUBSCRIP
SUBPUNCTIS
SUBLINEA
SUBJOINE
SUBJECT
SUBITO
SUBGROUP
SUBGROU
STWA
STUDY
STROKES
STROKE
STROKE-9
STROKE-8
STROKE-7
STROKE-6
STROKE-5
STROKE-4
STROKE-3
STROKE-2
STROKE-11
STROKE-10
STROKE-1
STRIPE
STRIKETHROUGH
STRIDE
STRICTL
STRETCHE
STRES
STRENGTH
STRATIA
STRAINER
STRAIGHTNESS
STRAIGH
STRAIF
STRAGGISMATA
STOVE
STOPPING
STOPPAGE
STOP
STONE
STOCK
STIMME
STIL
STIL
STIGMA
STEP
STEM
STEAM
STAVROU
STAVROS
STAVRO
STAUROS
STATERS
STAR
STARK
STAR
STANDSTILL
STANDAR
STAND
STAN
STALLION
STAFF
STAF
STACCATO
STACCATISSIMO
SSYX
SSYT
SSYRX
SSYR
SSYP
SSUX
SSUT
SSUP
SSOX
SSOT
SSOP
SSIX
SSIT
SSIP
SSIEX
SSIEP
SSIE
SSHE
SSEX
SSEP
SSEE
SSAX
SSAT
SSAP
SSANGYEORINHIEUH
SSANGTIKEUT-PIEUP
SSANGTIKEUT
SSANGTHIEUTH
SSANGSIOS-TIKEUT
SSANGSIOS-PIEUP
SSANGSIOS-KIYEOK
SSANGSIOS
SSANGRIEUL-KHIEUKH
SSANGRIEUL
SSANGPIEUP
SSANGNIEUN
SSANGMIEUM
SSANGKIYEOK
SSANGIEUNG
SSANGHIEUH
SSANGCIEUC-HIEUH
SSANGCIEUC
SSANGARAEA
SSAA
SQUIS
SQUIRRE
SQUIGGL
SQUA
SQUARES
SQUARED
SQUARE
SPWA
SPUNG
SPROUT
SPRINGS
SPRING
SPRECHGESAN
SPOT
SPOON
SPLITTIN
SPIRITU
SPIRIT
SPIRI
SPIRANT
SPIRAL
SPIDER
SPICE
SPHERICA
SPESMIL
SPEECH
SPECIAL
SPEAR
SPATHI
SPARKLE
SPAD
SPACIN
SOWIL
SOUTH-SLAVE
SOUT
SOURCE
SOUND
SOUN
SOUNAP
SONG
SOLIDUS
SOLIDU
SOGDIA
SOFTWARE-FUNCTIO
SOCIETY
SOCCE
SNOWMAN
SNOWMA
SNOWFLAKE
SNOW
SNOUT
SNOU
SNAKE
SNAK
SMILIN
SMILE
SMEAR
SMAS
SMALLE
SMALL
SLUR
SLOWLY
SLOVO
SLOPIN
SLOPE
SLING
SLIDING
SLICE
SLAVONI
SLAVE
SLASH
SLAS
SLANTE
SKWA
SKUL
SKLIRO
SKIN
SKIER
SKEWE
SKATE
SIXTY-FOURT
SIXTY
SIXT
SIXTHS
SIXTH
SIXTH
SIXTEENTHS
SIXTEENTH
SIXTEENT
SIXTEEN
SIXTEE
SIX-STRIN
SIX-PER-E
SIX-LIN
SITE
SIRINGU
SIOS-THIEUTH
SIOS-SSANGSIOS
SIOS-RIEUL
SIOS-PIEUP-KIYEOK
SIOS-PHIEUPH
SIOS-PANSIOS
SIOS-NIEUN
SIOS-MIEUM
SIOS-KHIEUKH
SIOS-KAPYEOUNPIEUP
SIOS-IEUNG
SIOS-HIEUH
SIOS-CIEUC
SIOS-CHIEUCH
SINKING
SINGLE-LIN
SINGLE
SINGL
SINGAAT
SINDH
SIMPLIFIE
SIMILAR
SIMILA
SIMANSI
SIMA
SILK
SILIQU
SILA3
SIKI
SIK2
SIGNS
SIGMA
SIGM
SIGE
SIG4
SIDEWAY
SICKNESS
SICKLE
SHYX
SHYT
SHYRX
SHYR
SHYP
SHYE
SHYA
SHWOY
SHWOO
SHWO
SHWII
SHWI
SHWE
SHWAA
SHWA
SHUX
SHUT
SHURX
SHUR
SHUP
SHUOX
SHUOP
SHUO
SHUFFL
SHUBUR
SHU2
SHTAPIC
SHTA
SHRINE
SHOY
SHOX
SHOULDERE
SHOT
SHORTS
SHORT
SHORTENER
SHORT-TWIG-YR
SHORT-TWIG-TY
SHORT-TWIG-SO
SHORT-TWIG-OS
SHORT-TWIG-NAU
SHORT-TWIG-MAD
SHORT-TWIG-HAGAL
SHORT-TWIG-BJARKA
SHORT-TWIG-A
SHORT
SHOR
SHOP
SHOOT
SHOO
SHOG
SHOA
SHIYYAALAA
SHITA
SHIT
SHIR
SHIP
SHINT
SHINIG
SHIN
SHIMA
SHIM
SHIM
SHIIN
SHII
SHIF
SHIELD
SHID
SHHA
SHEX
SHEVA
SHEUX
SHET
SHESHLAM
SHESHIG
SHESHI
SHESH2
SHESH
SHEQE
SHEP
SHEN
SHELL
SHEL
SHELF
SHEI
SHEG9
SHEEP
SHEENU
SHEEN
SHEE
SHEE
SHE-GOAT
SHCHA
SHAY
SHAX
SHAVIYANI
SHAVIA
SHAT
SHARU
SHAR
SHARP
SHAR
SHARA
SHAR2
SHAR
SHAPING
SHAPES
SHAP
SHANG
SHAN
SHAMROCK
SHALSHELET
SHAKTI
SHADOWE
SHADE
SHADDA
SHADD
SHAD
SHAB6
SHAA
SHA6
SHA3
SEXTUL
SEXTILE
SEXTAN
SEVERANCE
SEVENTY
SEVENT
SEVENTH
SEVENTEEN
SEVENTEE
SEVE
SEUX
SESTERTIU
SESQUIQUADRATE
SESAM
SERVIC
SERIFS
SERIF
SEPTEMBER
SEPARATOR
SEPARATO
SENTO
SENTI
SEMUNCI
SEMKATH
SEMK
SEMIVOWE
SEMISOF
SEMISEXTILE
SEMIMINIM
SEMIDIREC
SEMICOLON
SEMICOLO
SEMICIRCULA
SEMICIRCL
SEMIBREVI
SEMI-VOICE
SELF
SELECTOR-99
SELECTOR-98
SELECTOR-97
SELECTOR-96
SELECTOR-95
SELECTOR-94
SELECTOR-93
SELECTOR-92
SELECTOR-91
SELECTOR-90
SELECTOR-9
SELECTOR-89
SELECTOR-88
SELECTOR-87
SELECTOR-86
SELECTOR-85
SELECTOR-84
SELECTOR-83
SELECTOR-82
SELECTOR-81
SELECTOR-80
SELECTOR-8
SELECTOR-79
SELECTOR-78
SELECTOR-77
SELECTOR-76
SELECTOR-75
SELECTOR-74
SELECTOR-73
SELECTOR-72
SELECTOR-71
SELECTOR-70
SELECTOR-7
SELECTOR-69
SELECTOR-68
SELECTOR-67
SELECTOR-66
SELECTOR-65
SELECTOR-64
SELECTOR-63
SELECTOR-62
SELECTOR-61
SELECTOR-60
SELECTOR-6
SELECTOR-59
SELECTOR-58
SELECTOR-57
SELECTOR-56
SELECTOR-55
SELECTOR-54
SELECTOR-53
SELECTOR-52
SELECTOR-51
SELECTOR-50
SELECTOR-5
SELECTOR-49
SELECTOR-48
SELECTOR-47
SELECTOR-46
SELECTOR-45
SELECTOR-44
SELECTOR-43
SELECTOR-42
SELECTOR-41
SELECTOR-40
SELECTOR-4
SELECTOR-39
SELECTOR-38
SELECTOR-37
SELECTOR-36
SELECTOR-35
SELECTOR-34
SELECTOR-33
SELECTOR-32
SELECTOR-31
SELECTOR-30
SELECTOR-3
SELECTOR-29
SELECTOR-28
SELECTOR-27
SELECTOR-26
SELECTOR-256
SELECTOR-255
SELECTOR-254
SELECTOR-253
SELECTOR-252
SELECTOR-251
SELECTOR-250
SELECTOR-25
SELECTOR-249
SELECTOR-248
SELECTOR-247
SELECTOR-246
SELECTOR-245
SELECTOR-244
SELECTOR-243
SELECTOR-242
SELECTOR-241
SELECTOR-240
SELECTOR-24
SELECTOR-239
SELECTOR-238
SELECTOR-237
SELECTOR-236
SELECTOR-235
SELECTOR-234
SELECTOR-233
SELECTOR-232
SELECTOR-231
SELECTOR-230
SELECTOR-23
SELECTOR-229
SELECTOR-228
SELECTOR-227
SELECTOR-226
SELECTOR-225
SELECTOR-224
SELECTOR-223
SELECTOR-222
SELECTOR-221
SELECTOR-220
SELECTOR-22
SELECTOR-219
SELECTOR-218
SELECTOR-217
SELECTOR-216
SELECTOR-215
SELECTOR-214
SELECTOR-213
SELECTOR-212
SELECTOR-211
SELECTOR-210
SELECTOR-21
SELECTOR-209
SELECTOR-208
SELECTOR-207
SELECTOR-206
SELECTOR-205
SELECTOR-204
SELECTOR-203
SELECTOR-202
SELECTOR-201
SELECTOR-200
SELECTOR-20
SELECTOR-2
SELECTOR-199
SELECTOR-198
SELECTOR-197
SELECTOR-196
SELECTOR-195
SELECTOR-194
SELECTOR-193
SELECTOR-192
SELECTOR-191
SELECTOR-190
SELECTOR-19
SELECTOR-189
SELECTOR-188
SELECTOR-187
SELECTOR-186
SELECTOR-185
SELECTOR-184
SELECTOR-183
SELECTOR-182
SELECTOR-181
SELECTOR-180
SELECTOR-18
SELECTOR-179
SELECTOR-178
SELECTOR-177
SELECTOR-176
SELECTOR-175
SELECTOR-174
SELECTOR-173
SELECTOR-172
SELECTOR-171
SELECTOR-170
SELECTOR-17
SELECTOR-169
SELECTOR-168
SELECTOR-167
SELECTOR-166
SELECTOR-165
SELECTOR-164
SELECTOR-163
SELECTOR-162
SELECTOR-161
SELECTOR-160
SELECTOR-16
SELECTOR-159
SELECTOR-158
SELECTOR-157
SELECTOR-156
SELECTOR-155
SELECTOR-154
SELECTOR-153
SELECTOR-152
SELECTOR-151
SELECTOR-150
SELECTOR-15
SELECTOR-149
SELECTOR-148
SELECTOR-147
SELECTOR-146
SELECTOR-145
SELECTOR-144
SELECTOR-143
SELECTOR-142
SELECTOR-141
SELECTOR-140
SELECTOR-14
SELECTOR-139
SELECTOR-138
SELECTOR-137
SELECTOR-136
SELECTOR-135
SELECTOR-134
SELECTOR-133
SELECTOR-132
SELECTOR-131
SELECTOR-130
SELECTOR-13
SELECTOR-129
SELECTOR-128
SELECTOR-127
SELECTOR-126
SELECTOR-125
SELECTOR-124
SELECTOR-123
SELECTOR-122
SELECTOR-121
SELECTOR-120
SELECTOR-12
SELECTOR-119
SELECTOR-118
SELECTOR-117
SELECTOR-116
SELECTOR-115
SELECTOR-114
SELECTOR-113
SELECTOR-112
SELECTOR-111
SELECTOR-110
SELECTOR-11
SELECTOR-109
SELECTOR-108
SELECTOR-107
SELECTOR-106
SELECTOR-105
SELECTOR-104
SELECTOR-103
SELECTOR-102
SELECTOR-101
SELECTOR-100
SELECTOR-10
SELECTOR-1
SELECTO
SEISMA
SEISM
SEGOL
SEGNO
SEGMENT
SEENU
SEEN
SECTOR
SECTION
SECTIO
SECRET
SECOND
SEBATBEI
SEAL
SEAGUL
SDON
SCWA
SCRUPLE
SCRIPT
SCREEN
SCREE
SCORPIUS
SCISSORS
SCHWA
SCHW
SCHROEDER
SCHOOL
SCHOLAR
SCHEM
SCANDICUS
SCANDICU
SCALES
SBRU
SAYIS
SAYANNA
SAXIMATA
SAWAN
SAUIL
SATURN
SATKAANKUU
SATKAAN
SASAK
SARI
SAPA
SANYOOG
SANYAK
SANTIIMU
SANNYA
SANGA2
SANAH
SAMYO
SAMPI
SAMPHAO
SAMKA
SAMEKH
SAMEK
SAMBA
SALTIRE
SALTILLO
SALT
SALLALLAHO
SALL
SALA
SALA
SAKOT
SAJDAH
SAILBOAT
SAIL
SAIKURU
SAGITTARIUS
SAGA
SAFHA
SADHE
SADE
SACRIFICIA
SAAI
SAADHU
SA-I
S046
S045
S044
S043
S042
S041
S040
S039
S038
S037
S036
S035A
S035
S034
S033
S032
S031
S030
S029
S028
S027
S026B
S026A
S026
S025
S024
S023
S022
S021
S020
S019
S018
S017A
S017
S016
S015
S014B
S014A
S014
S013
S012
S011
S010
S009
S008
S007
S006A
S006
S005
S004
S003
S002A
S002
S001
S-SHAPE
RYRX
RWOO
RWII
RWEE
RWAHA
RWAA
RUUBURU
RUSI
RURX
RUPII
RUPE
RUOX
RUOP
RUNOUT
RUMA
RULE-DELAYED
RULE
RUKKAKHA
RUIS
RTHAN
RTAGS
RTAG
RRYX
RRYT
RRYRX
RRYR
RRYP
RRUX
RRUT
RRURX
RRUR
RRUP
RRUOX
RRUO
RROX
RROT
RROP
RREX
RRET
RREP
RREH
RRAX
ROUNDE
ROUND-TIPPE
ROTUNDA
ROTATE
ROSH
ROSETTE
ROOT
ROOK
ROOF
ROMA
ROBAT
ROAR
RNYIN
RNOON
RNOO
RIVER
RITUAL
RITTORU
RITSI
RISIN
RISH
RIRA
RING
RINFORZANDO
RIKRIK
RIGVEDI
RIGHTWARDS
RIGHTHAN
RIGHT-TO-LEF
RIGHT-SID
RIGHT-SHADOWE
RIGHT-SHADE
RIGHT-POINTIN
RIGHT-HAN
RIGHT-FACIN
RIGHT
RIEUL-YESIEUNG
RIEUL-YEORINHIEUH-HIEUH
RIEUL-YEORINHIEUH
RIEUL-TIKEUT-HIEUH
RIEUL-TIKEUT
RIEUL-THIEUTH
RIEUL-SSANGTIKEUT
RIEUL-SSANGSIOS
RIEUL-SSANGPIEUP
RIEUL-SSANGKIYEOK
RIEUL-SIOS
RIEUL-PIEUP-TIKEUT
RIEUL-PIEUP-SIOS
RIEUL-PIEUP-PHIEUPH
RIEUL-PIEUP-HIEUH
RIEUL-PIEUP
RIEUL-PHIEUPH
RIEUL-PANSIOS
RIEUL-NIEUN
RIEUL-MIEUM-SIOS
RIEUL-MIEUM-KIYEOK
RIEUL-MIEUM-HIEUH
RIEUL-MIEUM
RIEUL-KIYEOK-SIOS
RIEUL-KIYEOK-HIEUH
RIEUL-KIYEOK
RIEUL-KAPYEOUNPIEUP
RIEUL-HIEUH
RIEUL-CIEUC
RIEU
RIEL
RIEE
RICEM
RICE
RHOTI
RGYINGS
RGYAN
REVOLUTION
REVMA
REVIA
REVERSED
REVERS
REUX
RETURN
RETUR
RETROFLE
RETREAT
RESUPINUS
RESTRICTE
REST
RESPONSE
RESOURCE
RESOLUTION
RESISTANCE
RESIDENCE
RERENGGAN
REREKAN
REPRESENT
REPLACEMEN
REPEATE
REPEAT
REPEA
REPA
RENTOGEN
REMU
RELIGION
RELEASE
RELATIONA
RELATION
RELAA
REJAN
REGISTERE
REFERENC
REDUPLICATION
RECYCLIN
RECYCLE
RECTILINEA
RECTANGULA
RECTANGLE
RECTANGL
RECORDIN
RECORDER
RECOR
RECEPTIV
REAHMUK
REACH
RBAS
RAYS
RAYANNA
RATIO
RATHA
RATH
RATA
RASWADI
RASOU
RASHA
RAPISMA
RANG
RANA
RAMBAT
RAKHANG
RAISE
RAIN
RAID
RAIDA
RAHMATULLA
RAFE
RADIOACTIV
RAAI
R029
R028
R027
R026
R025
R024
R023
R022
R021
R020
R019
R018
R017
R016A
R016
R015
R014
R013
R012
R011
R010A
R010
R009
R008
R007
R006
R005
R004
R003B
R003A
R003
R002A
R002
R001
R-CRE
QYRX
QYEE
QYAA
QWEE
QWAA
QUUV
QUSHSHAYA
QURX
QUOX
QUOT
QUOTATIO
QUOT
QUOP
QUINDICESIM
QUINCUNX
QUINARIU
QUILL
QUESTIONE
QUESTION
QUESTIO
QUEEN
QUBUTS
QUATERNIO
QUARTERS
QUARTER
QUARTER
QUARTE
QUANTIT
QUADRUPL
QUADRANT
QUADRAN
QUAD
QOPH
QOPA
QITSA
QIEX
QIET
QIEP
QHWI
QHWEE
QHWE
QHWAA
QHWA
QHEE
QHAA
QETANA
QATAN
QARNE
QAPH
QAMATS
QAMAT
QAIRTHRA
QADMA
QAAI
QAAFU
QAAF
Q007
Q006
Q005
Q004
Q003
Q002
Q001
PYRX
PWOY
PWOO
PWII
PWEE
PWAA
PUSHPIKA
PUSHIN
PURX
PURITY
PUOX
PUOP
PUNG
PUNCTUATION
PUNCTUATIO
PUMP
PUAE
PTHAH
PSIFISTOSYNAGMA
PSIFISTOPARAKALESMA
PSIFISTO
PSIFISTOLYGISMA
PROVE
PROTOVARY
PROTO
PROSGEGRAMMENI
PROPORTIONA
PROPORTION
PROPERT
PROPELLE
PROOF
PROLONGE
PROLATION
PROJECTIVE
PROJECTION
PROGRESS
PROFOUND
PRODUCT
PRODUC
PRIVATE
PRISHTHAMATR
PRINT
PRIN
PRIME
PRIM
PREVIOU
PRESENTATIO
PRESCRIPTIO
PREPONDERANCE
PRENKHA
PREFAC
PRECEDIN
PRECEDES
PRECEDE
PRECEDE
PRECEDE
PRECED
PRAM-PII
PRAM-PI
PRAM-MUOY
PRAM-MUO
PRAM-BUON
PRAM-BUO
PRAM-BEI
PRAM-BE
PRAM
POWER
POWER
POUN
POSTPOSITIO
POSTA
POSSESSION
PORRECTUS
PORRECTU
PONDO
POLE
POKRYTIE
POKOJI
POINTO
POINTER
POINTE
POINT
POIN
POETR
POETI
PODATUS
PNEUMATA
PLUTO
PLUS-MINU
PLUS
PLUME
PLUM
PLUK
PLOW
PLOPHU
PLETHRON
PLASTICS
PLANE
PLAN
PLANC
PLAK
PLAGIO
PLACEHOLDE
PLAC
PIZZICATO
PIWR
PITCHFORK
PITCHFOR
PISELEH
PISCES
PIRIG
PIRI
PIPING
PINWHEE
PILCRO
PIKURU
PIKO
PIEX
PIEUP-THIEUTH
PIEUP-SSANGSIOS
PIEUP-SIOS-TIKEUT
PIEUP-SIOS-THIEUTH
PIEUP-SIOS-PIEUP
PIEUP-SIOS-KIYEOK
PIEUP-SIOS-CIEUC
PIEUP-RIEUL-PHIEUPH
PIEUP-RIEUL
PIEUP-NIEUN
PIEUP-MIEUM
PIEUP-KHIEUKH
PIEUP-CIEUC
PIEUP-CHIEUCH
PIEU
PIEP
PIECE
PICK
PIASUTORU
PIASM
PIANO
PHWA
PHUTHAO
PHUNG
PHRASE
PHOENICIA
PHOA
PHNAE
PHINTHU
PHILIPPIN
PHIEUPH-THIEUTH
PHIEUPH-SIOS
PHIEUPH-PIEUP
PHIEUPH-HIEUH
PHIEUP
PHEE
PHARYNGEA
PHAR
PHAN
PHAM
PHAISTO
PHAGS-P
PHAARKAA
PHAA
PEUX
PETASTOKOUFISMA
PETASTI
PETASMA
PETALLE
PESO
PESH2
PESET
PERTH
PERSPECTIVE
PERSON
PERSO
PERSIA
PERPENDICULAR
PERPENDICULA
PERMANEN
PERISPOMENI
PERISPOMEN
PERFECTU
PERFECTA
PERFECT
PERCUSSIVE
PERCEN
PEPET
PEPE
PEORT
PENTASEME
PENTAGON
PENSU
PENN
PENIHI
PENGKAL
PENETRATION
PENCIL
PELASTON
PELASTO
PEITH
PEHEH
PEHE
PEEZI
PEEP
PEDESTRIAN
PEDESTAL
PEDESTA
PEDA
PEACE
PEAC
PAZER
PAYEROK
PAYANNA
PAWN
PAVIYANI
PATTERN
PATHAMASAT
PATAK
PATAH
PASUQ
PASSIVE-PULL-UP-OUTPU
PASSIVE-PULL-DOWN-OUTPU
PASHTA
PASEQ
PARTNERSHI
PARTIALLY-RECYCLE
PARTIA
PARTHIA
PARICHON
PARESTIGMENO
PAREREN
PARENTHESIS
PARENTHESI
PARAPHRAS
PARALLELOGRAM
PARALLEL
PARALLE
PARAKLITIKI
PARAKLITIK
PARAKALESM
PARAGRAPHOS
PARAGRAPH
PARAGRAP
PARA
PAPYRUS
PAPE
PANYUKU
PANYIKU
PANYECEK
PANYANGGA
PANYAKRA
PANTI
PANSIOS-PIEUP
PANSIOS-KAPYEOUNPIEUP
PANOLONG
PANGWISAD
PANGRANGKEP
PANGLAYAR
PANGKON
PANGKAT
PANGHULU
PANG
PANEULEUNG
PANAELAENG
PAMUNGKAH
PAMUDPOD
PAMPHYLIA
PAMINGKAL
PAMEPET
PAMENENG
PAMADA
PAMAAEH
PALUTA
PALOCHKA
PALLAWA
PALLAS
PALAUN
PALATALIZE
PALATALIZATION
PALATA
PAIYANNOI
PAIRTHRA
PAIRE
PAHLAV
PADM
PACKING
PAATU
PAASENTO
PAAI
PAA-PILLA
P011
P010
P009
P008
P007
P006
P005
P004
P003A
P003
P002
P001A
P001
OYRANISM
OYANNA
OXIA
OXEIA
OXEI
OVERRIDE
OVERLON
OVERLINE
OVERLAY
OVERLAPPIN
OVERLAID
OVERBAR
OUTLINE
OUTLINE
OUTE
OUNKI
OUNC
OTTAV
OTHALA
OTHAL
OSMANY
ORTHOGONA
ORTHODO
ORNAT
ORNAMENT
ORNAMEN
ORKHO
ORIGINA
ORIGIN
ORDINA
ORCHID
OPTIO
OPPRESSION
OPPOSITION
OPPOSIN
OPPOSE
OPERATOR
OPERATO
OPENIN
OPEN-P
OPEN-OUTLINE
OPEN-HEADE
OPEN-CIRCUIT-OUTPU
OOZE
OOYANNA
OOMU
OOBOOFILI
ONSU
ONKAR
ONESELF
ONE-WA
ONE-LIN
ONAP
OMISSIO
OMICRON
OMICRO
OMEGA
OMEG
OMALON
OLIVE
OLIGO
OKARA
OKAR
OJIBWA
OJEON
OGONEK
OGONE
OGHA
OCTOBER
OCCLUSION
OBSTRUCTION
OBOL
OBOFILI
OBLIQU
OBJEC
OBELUS
OBELOS
OABOAFILI
O051
O050B
O050A
O050
O049
O048
O047
O046
O045
O044
O043
O042
O041
O040
O039
O038
O037
O036D
O036C
O036B
O036A
O036
O035
O034
O033A
O033
O032
O031
O030A
O030
O029A
O029
O028
O027
O026
O025A
O025
O024A
O024
O023
O022
O021
O020A
O020
O019A
O019
O018
O017
O016
O015
O014
O013
O012
O011
O010C
O010B
O010A
O010
O009
O008
O007
O006F
O006E
O006D
O006C
O006B
O006A
O006
O005A
O005
O004
O003
O002
O001A
O001
O-YE
O-O-I
NZYX
NZYT
NZYRX
NZYR
NZYP
NZUX
NZURX
NZUR
NZUP
NZUOX
NZUO
NZOX
NZOP
NZIX
NZIT
NZIP
NZIEX
NZIEP
NZIE
NZEX
NZAX
NZAT
NZAP
NYWA
NYUX
NYUT
NYUP
NYUOX
NYUOP
NYUO
NYOX
NYOT
NYOP
NYOO
NYOA
NYJA
NYIX
NYIT
NYIP
NYIN-DO
NYIEX
NYIET
NYIEP
NYIE
NYEH
NYEE
NYCA
NYAA
NWOO
NWII
NWAA
NUUN
NUTILLU
NURX
NUOX
NUOP
NUNUZ
NUNU
NUNG
NUNAVU
NUNAVI
NUMER
NUMERATO
NUMERA
NUMBER
NULL
NUKTA
NUENG
NUBIA
NUAE
NU11
NU022A
NU022
NU021
NU020
NU019
NU018A
NU018
NU017
NU016
NU015
NU014
NU013
NU012
NU011A
NU011
NU010A
NU010
NU009
NU008
NU007
NU006
NU005
NU004
NU003
NU002
NU001
NTUU
NTEE
NSHA
NRYX
NRYT
NRYRX
NRYR
NRYP
NRUX
NRUT
NRURX
NRUR
NRUP
NROX
NROP
NREX
NRET
NREP
NRAX
NRAT
NRAP
NOVEMBER
NOTTO
NOTES
NOTEHEAD
NOTEHEA
NOTE
NOTCHE
NOTCH
NOSE
NORTHWES
NORT
NORMA
NOONU
NONFORKING
NON-JOINER
NON-BREAKIN
NOMINA
NOKHUK
NODE
NO-BREA
NNNA
NNGOO
NNGO
NNGII
NNGI
NNGAA
NNGA
NL020
NL019
NL018
NL017A
NL017
NL016
NL015
NL014
NL013
NL012
NL011
NL010
NL009
NL008
NL007
NL006
NL005A
NL005
NL004
NL003
NL002
NL001
NJYX
NJYT
NJYRX
NJYR
NJYP
NJUX
NJURX
NJUR
NJUP
NJUOX
NJUO
NJUAE
NJOX
NJOT
NJOP
NJOO
NJIX
NJIT
NJIP
NJIEX
NJIET
NJIEP
NJIE
NJEE
NJAEMLI
NJAEM
NISAG
NIRUGU
NINTH
NINETY
NINET
NINETEEN
NINETEE
NINDA2
NINDA
NIKHAHIT
NIKAHIT
NIHSHVASA
NIGIDAMIN
NIGIDAESH
NIGHT
NIGGAHITA
NIEX
NIEUN-TIKEUT
NIEUN-THIEUTH
NIEUN-SIOS
NIEUN-RIEUL
NIEUN-PIEUP
NIEUN-PANSIOS
NIEUN-KIYEOK
NIEUN-HIEUH
NIEUN-CIEUC
NIEUN-CHIEUCH
NIEU
NIEP
NHUE
NHJA
NGYE
NGVE
NGUOX
NGUOT
NGUO
NGOX
NGOU
NGOT
NGOP
NGON
NGOEH
NGOE
NGKWAEN
NGKA
NGIEX
NGIEP
NGIE
NGGU
NGGOO
NGGO
NGGI
NGGEN
NGGEE
NGGE
NGEX
NGEP
NGEN
NGEADAL
NGAX
NGAT
NGAP
NGAN
NGAI
NGAAI
NEWLINE
NEUTRA
NEUTER
NESTE
NEQUDAA
NEPTUNE
NENANO
NEITHE
NEGATIV
NEGATIO
NEGATE
NEBENSTIMME
NDUX
NDUT
NDURX
NDUR
NDUP
NDOX
NDOT
NDOP
NDOO
NDOL
NDIX
NDIT
NDIP
NDIEX
NDIE
NDEX
NDEP
NDEE
NDAX
NDAT
NDAP
NDAA
NBYX
NBYT
NBYRX
NBYR
NBYP
NBUX
NBUT
NBURX
NBUR
NBUP
NBOX
NBOT
NBOP
NBIX
NBIT
NBIP
NBIEX
NBIEP
NBIE
NBAX
NBAT
NBAP
NAYANNA
NAXIA
NAUTHS
NAUDI
NATURA
NATIONA
NASKAP
NASHI
NASALIZATIO
NARRO
NANGMONTHO
NAND
NANA
NAME
NAM2
NAIR
NAGR
NAGAR
NAGA
NABLA
NAASIKYAYA
NAAKSIKYAYA
NAAI
N042
N041
N040
N039
N038
N037A
N037
N036
N035A
N035
N034A
N034
N033A
N033
N032
N031
N030
N029
N028
N027
N026
N025A
N025
N024
N023
N022
N021
N020
N019
N018B
N018A
N018
N017
N016
N015
N014
N013
N012
N011
N010
N009
N008
N007
N006
N005
N004
N003
N002
N001
N-CRE
N-AR
MYSLITE
MWOO
MWII
MWEE
MWAA
MUUSIKATOAN
MUURDHAJ
MUSIC
MUSI
MUSH3
MUSH
MUSH
MURX
MURGU2
MURE
MURDA
MURD
MUQDAM
MUOX
MUOT
MUOP
MUNSUB
MUNAH
MULTISET
MULTISE
MULTIPLICATION
MULTIPLICATIO
MULTIPL
MULTIOCULA
MULTIMAP
MULT
MUKPHRENG
MUIN
MUCAAD
MUAN
MU-GAAHLA
MOVE
MOUTH
MOUT
MOUNTAIN
MOUND
MOUN
MOTHER
MORTAR
MORPHOLOGICA
MORNING
MOOSE-CRE
MOON
MONTH
MONT
MONOSTABL
MONOGRAP
MONOGRAMMO
MONOGRA
MONOFONIAS
MONOCULA
MOHAMMA
MODUL
MODESTY
MODELS
MODEL
MNYA
MNAS
MISRA
MIRIBAARU
MIRI
MIRED
MINY
MINUS-OR-PLU
MINUS
MINISTER
MINIMA
MIME
MILLION
MILLET
MILL
MIKURON
MIKRO
MIKRI
MIIN
MIEX
MIEUM-TIKEUT
MIEUM-SSANGSIOS
MIEUM-SSANGNIEUN
MIEUM-RIEUL
MIEUM-PIEUP-SIOS
MIEUM-PIEUP
MIEUM-PANSIOS
MIEUM-NIEUN
MIEUM-CIEUC
MIEUM-CHIEUCH
MIEU
MIEP
MIDLIN
MIDDLE-WELS
MIDDL
MICR
MGUX
MGUT
MGURX
MGUR
MGUP
MGUOX
MGUOP
MGUO
MGOX
MGOT
MGOP
MGIEX
MGIE
MGEX
MGEP
MGBU
MGBOO
MGBO
MGBI
MGBEE
MGBE
MGBA
MGAX
MGAT
MGAP
MEZZO
METRICA
METRIA
METRETE
METOBELUS
METEG
METAL
MESSENIA
MESO
MESI
MESH
MERKHA
MERKH
MERI
MERGE
MERCURY
MENDUT
MEMBERSHIP
MEMBER
MEMBE
MEM-QOPH
MELON
MELODI
MELIK
MEIZI
MEGATON
MEGALI
MEETORU
MEETE
MEET
MEEMU
MEEM
MEEEE
MEDIUM
MEDIU
MEDICINE
MEAT
MEASURE
MEASURE
MEASUR
MBOO
MBEN
MBEE
MBAA
MAYE
MAYANNA
MAXIMA
MATTOCK
MATRIX
MATERIALS
MASSING
MASOR
MASHFAAT
MASH2
MASCULIN
MARUKU
MARTYRI
MARRYIN
MARRIAG
MARKER
MARK-4
MARK-3
MARK-2
MARK-1
MARE
MARCH
MARCATO-STACCATO
MARCATO
MARBUTA
MARBUT
MAQAF
MAPIQ
MANSYON
MANNA
MANNA
MANGALAM
MANCH
MANACLES
MALTES
MALE
MALAKO
MAKSURA
MAIYAMOK
MAITAIKHU
MAIRU
MAIMUAN
MAIMALAI
MAIKURO
MAIDEN
MAHJON
MAHHA
MAHAPRANA
MAHAPAKH
MAHAAPRAAN
MADYA
MADU
MADDA
MADDA
MADD
MACRON-GRAVE
MACRON-BREVE
MACRON-ACUTE
MACRON
MACRO
MAAI
M044
M043
M042
M041
M040A
M040
M039
M038
M037
M036
M035
M034
M033B
M033A
M033
M032
M031A
M031
M030
M029
M028A
M028
M027
M026
M025
M024A
M024
M023
M022A
M022
M021
M020
M019
M018
M017A
M017
M016A
M016
M015A
M015
M014
M013
M012H
M012G
M012F
M012E
M012D
M012C
M012B
M012A
M012
M011
M010A
M010
M009
M008
M007
M006
M005
M004
M003A
M003
M002
M001B
M001A
M001
LYRX
LYDIA
LYCIA
LWOO
LWII
LWAA
LURX
LUOX
LUOT
LUOP
LUNGSI
LUNAT
LUIS
LUHUR
LUGAL
LUGA
LOZENGE
LOZENG
LOWE
LOW-
LOURE
LOTUS
LORRAINE
LOOT
LOOP
LONSUM
LONGA
LONG
LONG-BRANCH-YR
LONG-BRANCH-SO
LONG-BRANCH-OS
LONG-BRANCH-MAD
LONG-BRANCH-HAGAL
LONG-BRANCH-A
LOLL
LOGOTYP
LOGOGRA
LOCATIVE
LOCATIO
LLLA
LJUDIJE
LIWN
LIVR
LITTL
LITR
LISH
LIQUI
LINKIN
LINGSA
LINES
LINE
LINE-9
LINE-7
LINE-3
LINE-1
LIMMU4
LIMMU2
LIMMU
LIMM
LIMITE
LIMITATION
LIMIT
LILY
LILITH
LIGHTNING
LIGHTHOUSE
LIGHT
LIFE
LIEX
LIET
LIEP
LIBRA
LIABILIT
LHII
LHAVIYANI
LHAA
LEZH
LEVE
LETTER
LESSE
LESS-THAN
LESS-THA
LENTICULA
LENIS
LENGTHENER
LENGT
LENGA
LENG
LEMOI
LELET
LELE
LEIMMA
LEIMM
LEGS
LEGION
LEGETO
LEFTWARDS
LEFT-TO-RIGH
LEFT-STE
LEFT-SID
LEFT-SHADE
LEFT-POINTIN
LEFT-HAN
LEFT-FACIN
LEFT
LEEK
LEEEE
LEATHER
LEAF
LEADER
LDAN
LAYANNA
LAULA
LAUKA
LATINAT
LATIK
LATERA
LARYNGEA
LARGE
LARG
LANGUAG
LANES
LAMEDH
LAMED
LAME
LAME
LAMDA
LAMD
LAMBD
LAMADH
LAKKHANGYAO
LAJANYALAN
LAHSHU
LAGUS
LAGAR
LAGA
LAGAB
LAGA
LAEV
LACK
LACA
LABOURING
LABOR
LABIALIZATIO
LABAT
LAAN
LAAMU
LAAI
L006A
L002A
L-TYP
L-SHAPE
KYURII
KYLISMA
KYEE
KYATHO
KYAA
KXWI
KXWEE
KXWE
KXWAA
KXWA
KXEE
KXAA
KWU318
KWOO
KWII
KWEE
KWAY
KWAA
KUUH
KUSMA
KUSHU2
KURX
KURUZEIRO
KURT
KUROONE
KUOX
KUOP
KUNG
KUNDDALIYA
KSSA
KREMASTI
KRATIMOYPORROON
KRATIMOKOUFISMA
KRATIMATA
KRATIM
KPOO
KPEN
KPEE
KPAN
KOVUU
KOTO
KORUNA
KORONIS
KOREA
KORANI
KOQNDON
KOPPA
KOOPO
KOOMUUT
KONTEVMA
KONTEVM
KOMBUVA
KOMBUV
KOMB
KOGHOM
KOET
KNIGHT
KNIFE
KNIF
KLITON
KLASMA
KLASM
KKEE
KIYEOK-TIKEUT
KIYEOK-SIOS-KIYEOK
KIYEOK-RIEUL
KIYEOK-PIEUP
KIYEOK-NIEUN
KIYEOK-KHIEUKH
KIYEOK-CHIEUCH
KIYEO
KISIM5
KISIM
KISH
KISAL
KIROWATTO
KIROMEETORU
KIROGURAMU
KIRO
KIRGHI
KINSHIP
KINDERGARTEN
KIEX
KIEP
KICK
KHWAI
KHUEN-LU
KHUE
KHUAT
KHOU
KHON
KHOMUT
KHIT
KHIEUK
KHHO
KHHA
KHETH
KHEI
KHEE
KHAR
KHAPH
KHAN
KHAND
KHAN
KHAMT
KHAKASSIA
KHAI
KHAH
KHAA
KEYCAP
KEYBOARD
KEUX
KETT
KESH2
KERET
KEOW
KENTIMATA
KENTIMAT
KENTIM
KENAT
KEMPUL
KEMPU
KEMPLI
KEMPL
KEMPHRENG
KEMBANG
KELVI
KEHEH
KEHE
KEFULA
KEESU
KEEPIN
KEENG
KCAL
KAZAK
KAYANNA
KAYA
KAWI
KAVYKA
KAUNA
KATO
KATHISTI
KATHAK
KATAVASMA
KATAV
KATAKANA-HIRAGAN
KASRATAN
KASRATA
KASRA
KASR
KASKAL
KASKA
KASHMIR
KARSHANA
KARORII
KARE
KARATTO
KARAN
KAPYEOUNSSANGPIEUP
KAPYEOUNRIEUL
KAPYEOUNPHIEUPH
KAPYEOUNMIEUM
KAPPA
KAPP
KAPO
KAPH
KAPAL
KAPA
KANTAJ
KANG
KANAKO
KAM4
KAM2
KAKO
KAKABAT
KAIRI
KAD5
KAD4
KAD3
KAD2
KAAI
KAAFU
KAAF
K008
K007
K006
K005
K004
K003
K002
K001
JUPITER
JUOT
JUOP
JUNO
JUNE
JULY
JUEUI
JUDGE
JUDEO-SPANIS
JOYOU
JONG
JOKER
JOINED
JOIN
JJYX
JJYT
JJYP
JJUX
JJUT
JJURX
JJUR
JJUP
JJUOX
JJUOP
JJUO
JJOX
JJOT
JJOP
JJIX
JJIT
JJIP
JJIEX
JJIET
JJIEP
JJIE
JJEE
JIHVAMULIYA
JHEH
JHAN
JHAM
JERUSALEM
JERA
JERA
JEGOGAN
JEEM
JAYANNA
JAVIYANI
JAPANES
JANUARY
JALLAJALALOUHOU
JADE
J-SIMPLIFIE
IZHITSA
IZHITS
IZHE
IYEK
IYANNA
IUJA
ITERATIO
ITEM
ISSHAR
ISON
ISEN-ISEN
ISAKI
IS-PILLA
IRUYANNA
IRUUYANNA
IOTIFIE
IOTATE
IOTA
IODHADH
INVISIBL
INVERTED
INVERTE
INVERS
INTI
INTERSYLLABI
INTERSECTION
INTERSECTIO
INTERSECTIN
INTERROBANG
INTERPOLATIO
INTERLOCKE
INTERLINEA
INTERIO
INTERES
INTERCALATE
INTEGRATION
INTEGRATIO
INTEGRAL
INTEGRA
INSULA
INSTRUMENTA
INSIDE
INSERTIO
INSECT
INSCRIPTIONA
INNOCENCE
INNN
INNER
INNE
ININGU
INHIBI
INHEREN
INGWAZ
INFORMATIO
INFLUENCE
INFINITY
INFINIT
INDUSTRIA
INDIREC
INDICATOR
INDI
INDEX
INDEPENDEN
INCREMENT
INCREASE
INCREASE
INCOMPLET
INCLUDIN
INCH
INAP
IN-ALAF
IMPERIA
IMPERFECTU
IMPERFECTA
IMPERFECT
IMISEO
IMIN3
IMIN
IMIFTHORON
IMIFTHORA
IMIFONON
IMIDIARGON
IMAG
ILUYANNA
ILUY
ILUUYANNA
ILUT
ILIMMU4
ILIMMU3
ILIMMU
ILIMM
IKARA
IKAR
IIYANNA
IGGWS
IFIN
IEUNG-TIKEUT
IEUNG-THIEUTH
IEUNG-SSANGKIYEOK
IEUNG-RIEUL
IEUNG-PIEUP
IEUNG-PHIEUPH
IEUNG-KIYEOK
IEUNG-KHIEUKH
IEUNG-CIEUC
IEUNG-CHIEUCH
IEUN
IDLE
IDIM
IDEOGRAPH-FAD9
IDEOGRAPH-FAD8
IDEOGRAPH-FAD7
IDEOGRAPH-FAD6
IDEOGRAPH-FAD5
IDEOGRAPH-FAD4
IDEOGRAPH-FAD3
IDEOGRAPH-FAD2
IDEOGRAPH-FAD1
IDEOGRAPH-FAD0
IDEOGRAPH-FACF
IDEOGRAPH-FACE
IDEOGRAPH-FACD
IDEOGRAPH-FACC
IDEOGRAPH-FACB
IDEOGRAPH-FACA
IDEOGRAPH-FAC9
IDEOGRAPH-FAC8
IDEOGRAPH-FAC7
IDEOGRAPH-FAC6
IDEOGRAPH-FAC5
IDEOGRAPH-FAC4
IDEOGRAPH-FAC3
IDEOGRAPH-FAC2
IDEOGRAPH-FAC1
IDEOGRAPH-FAC0
IDEOGRAPH-FABF
IDEOGRAPH-FABE
IDEOGRAPH-FABD
IDEOGRAPH-FABC
IDEOGRAPH-FABB
IDEOGRAPH-FABA
IDEOGRAPH-FAB9
IDEOGRAPH-FAB8
IDEOGRAPH-FAB7
IDEOGRAPH-FAB6
IDEOGRAPH-FAB5
IDEOGRAPH-FAB4
IDEOGRAPH-FAB3
IDEOGRAPH-FAB2
IDEOGRAPH-FAB1
IDEOGRAPH-FAB0
IDEOGRAPH-FAAF
IDEOGRAPH-FAAE
IDEOGRAPH-FAAD
IDEOGRAPH-FAAC
IDEOGRAPH-FAAB
IDEOGRAPH-FAAA
IDEOGRAPH-FAA9
IDEOGRAPH-FAA8
IDEOGRAPH-FAA7
IDEOGRAPH-FAA6
IDEOGRAPH-FAA5
IDEOGRAPH-FAA4
IDEOGRAPH-FAA3
IDEOGRAPH-FAA2
IDEOGRAPH-FAA1
IDEOGRAPH-FAA0
IDEOGRAPH-FA9F
IDEOGRAPH-FA9E
IDEOGRAPH-FA9D
IDEOGRAPH-FA9C
IDEOGRAPH-FA9B
IDEOGRAPH-FA9A
IDEOGRAPH-FA99
IDEOGRAPH-FA98
IDEOGRAPH-FA97
IDEOGRAPH-FA96
IDEOGRAPH-FA95
IDEOGRAPH-FA94
IDEOGRAPH-FA93
IDEOGRAPH-FA92
IDEOGRAPH-FA91
IDEOGRAPH-FA90
IDEOGRAPH-FA8F
IDEOGRAPH-FA8E
IDEOGRAPH-FA8D
IDEOGRAPH-FA8C
IDEOGRAPH-FA8B
IDEOGRAPH-FA8A
IDEOGRAPH-FA89
IDEOGRAPH-FA88
IDEOGRAPH-FA87
IDEOGRAPH-FA86
IDEOGRAPH-FA85
IDEOGRAPH-FA84
IDEOGRAPH-FA83
IDEOGRAPH-FA82
IDEOGRAPH-FA81
IDEOGRAPH-FA80
IDEOGRAPH-FA7F
IDEOGRAPH-FA7E
IDEOGRAPH-FA7D
IDEOGRAPH-FA7C
IDEOGRAPH-FA7B
IDEOGRAPH-FA7A
IDEOGRAPH-FA79
IDEOGRAPH-FA78
IDEOGRAPH-FA77
IDEOGRAPH-FA76
IDEOGRAPH-FA75
IDEOGRAPH-FA74
IDEOGRAPH-FA73
IDEOGRAPH-FA72
IDEOGRAPH-FA71
IDEOGRAPH-FA70
IDEOGRAPH-FA6D
IDEOGRAPH-FA6C
IDEOGRAPH-FA6B
IDEOGRAPH-FA6A
IDEOGRAPH-FA69
IDEOGRAPH-FA68
IDEOGRAPH-FA67
IDEOGRAPH-FA66
IDEOGRAPH-FA65
IDEOGRAPH-FA64
IDEOGRAPH-FA63
IDEOGRAPH-FA62
IDEOGRAPH-FA61
IDEOGRAPH-FA60
IDEOGRAPH-FA5F
IDEOGRAPH-FA5E
IDEOGRAPH-FA5D
IDEOGRAPH-FA5C
IDEOGRAPH-FA5B
IDEOGRAPH-FA5A
IDEOGRAPH-FA59
IDEOGRAPH-FA58
IDEOGRAPH-FA57
IDEOGRAPH-FA56
IDEOGRAPH-FA55
IDEOGRAPH-FA54
IDEOGRAPH-FA53
IDEOGRAPH-FA52
IDEOGRAPH-FA51
IDEOGRAPH-FA50
IDEOGRAPH-FA4F
IDEOGRAPH-FA4E
IDEOGRAPH-FA4D
IDEOGRAPH-FA4C
IDEOGRAPH-FA4B
IDEOGRAPH-FA4A
IDEOGRAPH-FA49
IDEOGRAPH-FA48
IDEOGRAPH-FA47
IDEOGRAPH-FA46
IDEOGRAPH-FA45
IDEOGRAPH-FA44
IDEOGRAPH-FA43
IDEOGRAPH-FA42
IDEOGRAPH-FA41
IDEOGRAPH-FA40
IDEOGRAPH-FA3F
IDEOGRAPH-FA3E
IDEOGRAPH-FA3D
IDEOGRAPH-FA3C
IDEOGRAPH-FA3B
IDEOGRAPH-FA3A
IDEOGRAPH-FA39
IDEOGRAPH-FA38
IDEOGRAPH-FA37
IDEOGRAPH-FA36
IDEOGRAPH-FA35
IDEOGRAPH-FA34
IDEOGRAPH-FA33
IDEOGRAPH-FA32
IDEOGRAPH-FA31
IDEOGRAPH-FA30
IDEOGRAPH-FA2D
IDEOGRAPH-FA2C
IDEOGRAPH-FA2B
IDEOGRAPH-FA2A
IDEOGRAPH-FA29
IDEOGRAPH-FA28
IDEOGRAPH-FA27
IDEOGRAPH-FA26
IDEOGRAPH-FA25
IDEOGRAPH-FA24
IDEOGRAPH-FA23
IDEOGRAPH-FA22
IDEOGRAPH-FA21
IDEOGRAPH-FA20
IDEOGRAPH-FA1F
IDEOGRAPH-FA1E
IDEOGRAPH-FA1D
IDEOGRAPH-FA1C
IDEOGRAPH-FA1B
IDEOGRAPH-FA1A
IDEOGRAPH-FA19
IDEOGRAPH-FA18
IDEOGRAPH-FA17
IDEOGRAPH-FA16
IDEOGRAPH-FA15
IDEOGRAPH-FA14
IDEOGRAPH-FA13
IDEOGRAPH-FA12
IDEOGRAPH-FA11
IDEOGRAPH-FA10
IDEOGRAPH-FA0F
IDEOGRAPH-FA0E
IDEOGRAPH-FA0D
IDEOGRAPH-FA0C
IDEOGRAPH-FA0B
IDEOGRAPH-FA0A
IDEOGRAPH-FA09
IDEOGRAPH-FA08
IDEOGRAPH-FA07
IDEOGRAPH-FA06
IDEOGRAPH-FA05
IDEOGRAPH-FA04
IDEOGRAPH-FA03
IDEOGRAPH-FA02
IDEOGRAPH-FA01
IDEOGRAPH-FA00
IDEOGRAPH-F9FF
IDEOGRAPH-F9FE
IDEOGRAPH-F9FD
IDEOGRAPH-F9FC
IDEOGRAPH-F9FB
IDEOGRAPH-F9FA
IDEOGRAPH-F9F9
IDEOGRAPH-F9F8
IDEOGRAPH-F9F7
IDEOGRAPH-F9F6
IDEOGRAPH-F9F5
IDEOGRAPH-F9F4
IDEOGRAPH-F9F3
IDEOGRAPH-F9F2
IDEOGRAPH-F9F1
IDEOGRAPH-F9F0
IDEOGRAPH-F9EF
IDEOGRAPH-F9EE
IDEOGRAPH-F9ED
IDEOGRAPH-F9EC
IDEOGRAPH-F9EB
IDEOGRAPH-F9EA
IDEOGRAPH-F9E9
IDEOGRAPH-F9E8
IDEOGRAPH-F9E7
IDEOGRAPH-F9E6
IDEOGRAPH-F9E5
IDEOGRAPH-F9E4
IDEOGRAPH-F9E3
IDEOGRAPH-F9E2
IDEOGRAPH-F9E1
IDEOGRAPH-F9E0
IDEOGRAPH-F9DF
IDEOGRAPH-F9DE
IDEOGRAPH-F9DD
IDEOGRAPH-F9DC
IDEOGRAPH-F9DB
IDEOGRAPH-F9DA
IDEOGRAPH-F9D9
IDEOGRAPH-F9D8
IDEOGRAPH-F9D7
IDEOGRAPH-F9D6
IDEOGRAPH-F9D5
IDEOGRAPH-F9D4
IDEOGRAPH-F9D3
IDEOGRAPH-F9D2
IDEOGRAPH-F9D1
IDEOGRAPH-F9D0
IDEOGRAPH-F9CF
IDEOGRAPH-F9CE
IDEOGRAPH-F9CD
IDEOGRAPH-F9CC
IDEOGRAPH-F9CB
IDEOGRAPH-F9CA
IDEOGRAPH-F9C9
IDEOGRAPH-F9C8
IDEOGRAPH-F9C7
IDEOGRAPH-F9C6
IDEOGRAPH-F9C5
IDEOGRAPH-F9C4
IDEOGRAPH-F9C3
IDEOGRAPH-F9C2
IDEOGRAPH-F9C1
IDEOGRAPH-F9C0
IDEOGRAPH-F9BF
IDEOGRAPH-F9BE
IDEOGRAPH-F9BD
IDEOGRAPH-F9BC
IDEOGRAPH-F9BB
IDEOGRAPH-F9BA
IDEOGRAPH-F9B9
IDEOGRAPH-F9B8
IDEOGRAPH-F9B7
IDEOGRAPH-F9B6
IDEOGRAPH-F9B5
IDEOGRAPH-F9B4
IDEOGRAPH-F9B3
IDEOGRAPH-F9B2
IDEOGRAPH-F9B1
IDEOGRAPH-F9B0
IDEOGRAPH-F9AF
IDEOGRAPH-F9AE
IDEOGRAPH-F9AD
IDEOGRAPH-F9AC
IDEOGRAPH-F9AB
IDEOGRAPH-F9AA
IDEOGRAPH-F9A9
IDEOGRAPH-F9A8
IDEOGRAPH-F9A7
IDEOGRAPH-F9A6
IDEOGRAPH-F9A5
IDEOGRAPH-F9A4
IDEOGRAPH-F9A3
IDEOGRAPH-F9A2
IDEOGRAPH-F9A1
IDEOGRAPH-F9A0
IDEOGRAPH-F99F
IDEOGRAPH-F99E
IDEOGRAPH-F99D
IDEOGRAPH-F99C
IDEOGRAPH-F99B
IDEOGRAPH-F99A
IDEOGRAPH-F999
IDEOGRAPH-F998
IDEOGRAPH-F997
IDEOGRAPH-F996
IDEOGRAPH-F995
IDEOGRAPH-F994
IDEOGRAPH-F993
IDEOGRAPH-F992
IDEOGRAPH-F991
IDEOGRAPH-F990
IDEOGRAPH-F98F
IDEOGRAPH-F98E
IDEOGRAPH-F98D
IDEOGRAPH-F98C
IDEOGRAPH-F98B
IDEOGRAPH-F98A
IDEOGRAPH-F989
IDEOGRAPH-F988
IDEOGRAPH-F987
IDEOGRAPH-F986
IDEOGRAPH-F985
IDEOGRAPH-F984
IDEOGRAPH-F983
IDEOGRAPH-F982
IDEOGRAPH-F981
IDEOGRAPH-F980
IDEOGRAPH-F97F
IDEOGRAPH-F97E
IDEOGRAPH-F97D
IDEOGRAPH-F97C
IDEOGRAPH-F97B
IDEOGRAPH-F97A
IDEOGRAPH-F979
IDEOGRAPH-F978
IDEOGRAPH-F977
IDEOGRAPH-F976
IDEOGRAPH-F975
IDEOGRAPH-F974
IDEOGRAPH-F973
IDEOGRAPH-F972
IDEOGRAPH-F971
IDEOGRAPH-F970
IDEOGRAPH-F96F
IDEOGRAPH-F96E
IDEOGRAPH-F96D
IDEOGRAPH-F96C
IDEOGRAPH-F96B
IDEOGRAPH-F96A
IDEOGRAPH-F969
IDEOGRAPH-F968
IDEOGRAPH-F967
IDEOGRAPH-F966
IDEOGRAPH-F965
IDEOGRAPH-F964
IDEOGRAPH-F963
IDEOGRAPH-F962
IDEOGRAPH-F961
IDEOGRAPH-F960
IDEOGRAPH-F95F
IDEOGRAPH-F95E
IDEOGRAPH-F95D
IDEOGRAPH-F95C
IDEOGRAPH-F95B
IDEOGRAPH-F95A
IDEOGRAPH-F959
IDEOGRAPH-F958
IDEOGRAPH-F957
IDEOGRAPH-F956
IDEOGRAPH-F955
IDEOGRAPH-F954
IDEOGRAPH-F953
IDEOGRAPH-F952
IDEOGRAPH-F951
IDEOGRAPH-F950
IDEOGRAPH-F94F
IDEOGRAPH-F94E
IDEOGRAPH-F94D
IDEOGRAPH-F94C
IDEOGRAPH-F94B
IDEOGRAPH-F94A
IDEOGRAPH-F949
IDEOGRAPH-F948
IDEOGRAPH-F947
IDEOGRAPH-F946
IDEOGRAPH-F945
IDEOGRAPH-F944
IDEOGRAPH-F943
IDEOGRAPH-F942
IDEOGRAPH-F941
IDEOGRAPH-F940
IDEOGRAPH-F93F
IDEOGRAPH-F93E
IDEOGRAPH-F93D
IDEOGRAPH-F93C
IDEOGRAPH-F93B
IDEOGRAPH-F93A
IDEOGRAPH-F939
IDEOGRAPH-F938
IDEOGRAPH-F937
IDEOGRAPH-F936
IDEOGRAPH-F935
IDEOGRAPH-F934
IDEOGRAPH-F933
IDEOGRAPH-F932
IDEOGRAPH-F931
IDEOGRAPH-F930
IDEOGRAPH-F92F
IDEOGRAPH-F92E
IDEOGRAPH-F92D
IDEOGRAPH-F92C
IDEOGRAPH-F92B
IDEOGRAPH-F92A
IDEOGRAPH-F929
IDEOGRAPH-F928
IDEOGRAPH-F927
IDEOGRAPH-F926
IDEOGRAPH-F925
IDEOGRAPH-F924
IDEOGRAPH-F923
IDEOGRAPH-F922
IDEOGRAPH-F921
IDEOGRAPH-F920
IDEOGRAPH-F91F
IDEOGRAPH-F91E
IDEOGRAPH-F91D
IDEOGRAPH-F91C
IDEOGRAPH-F91B
IDEOGRAPH-F91A
IDEOGRAPH-F919
IDEOGRAPH-F918
IDEOGRAPH-F917
IDEOGRAPH-F916
IDEOGRAPH-F915
IDEOGRAPH-F914
IDEOGRAPH-F913
IDEOGRAPH-F912
IDEOGRAPH-F911
IDEOGRAPH-F910
IDEOGRAPH-F90F
IDEOGRAPH-F90E
IDEOGRAPH-F90D
IDEOGRAPH-F90C
IDEOGRAPH-F90B
IDEOGRAPH-F90A
IDEOGRAPH-F909
IDEOGRAPH-F908
IDEOGRAPH-F907
IDEOGRAPH-F906
IDEOGRAPH-F905
IDEOGRAPH-F904
IDEOGRAPH-F903
IDEOGRAPH-F902
IDEOGRAPH-F901
IDEOGRAPH-F900
IDEOGRAPH-904A
IDEOGRAPH-8D70
IDEOGRAPH-8CA9
IDEOGRAPH-89E3
IDEOGRAPH-7D42
IDEOGRAPH-76D7
IDEOGRAPH-751F
IDEOGRAPH-7121
IDEOGRAPH-70B9
IDEOGRAPH-6F14
IDEOGRAPH-672C
IDEOGRAPH-6620
IDEOGRAPH-65B0
IDEOGRAPH-6599
IDEOGRAPH-6557
IDEOGRAPH-6355
IDEOGRAPH-6307
IDEOGRAPH-6295
IDEOGRAPH-6253
IDEOGRAPH-624B
IDEOGRAPH-5F8C
IDEOGRAPH-5DE6
IDEOGRAPH-5B89
IDEOGRAPH-5B57
IDEOGRAPH-5929
IDEOGRAPH-591A
IDEOGRAPH-58F0
IDEOGRAPH-5439
IDEOGRAPH-53F3
IDEOGRAPH-53CC
IDEOGRAPH-52DD
IDEOGRAPH-524D
IDEOGRAPH-521D
IDEOGRAPH-518D
IDEOGRAPH-4EA4
IDEOGRAPH-4E8C
IDEOGRAPH-4E2D
IDEOGRAPH-4E09
IDEOGRAPH-4E00
IDEOGRAPH-2FA1D
IDEOGRAPH-2FA1C
IDEOGRAPH-2FA1B
IDEOGRAPH-2FA1A
IDEOGRAPH-2FA19
IDEOGRAPH-2FA18
IDEOGRAPH-2FA17
IDEOGRAPH-2FA16
IDEOGRAPH-2FA15
IDEOGRAPH-2FA14
IDEOGRAPH-2FA13
IDEOGRAPH-2FA12
IDEOGRAPH-2FA11
IDEOGRAPH-2FA10
IDEOGRAPH-2FA0F
IDEOGRAPH-2FA0E
IDEOGRAPH-2FA0D
IDEOGRAPH-2FA0C
IDEOGRAPH-2FA0B
IDEOGRAPH-2FA0A
IDEOGRAPH-2FA09
IDEOGRAPH-2FA08
IDEOGRAPH-2FA07
IDEOGRAPH-2FA06
IDEOGRAPH-2FA05
IDEOGRAPH-2FA04
IDEOGRAPH-2FA03
IDEOGRAPH-2FA02
IDEOGRAPH-2FA01
IDEOGRAPH-2FA00
IDEOGRAPH-2F9FF
IDEOGRAPH-2F9FE
IDEOGRAPH-2F9FD
IDEOGRAPH-2F9FC
IDEOGRAPH-2F9FB
IDEOGRAPH-2F9FA
IDEOGRAPH-2F9F9
IDEOGRAPH-2F9F8
IDEOGRAPH-2F9F7
IDEOGRAPH-2F9F6
IDEOGRAPH-2F9F5
IDEOGRAPH-2F9F4
IDEOGRAPH-2F9F3
IDEOGRAPH-2F9F2
IDEOGRAPH-2F9F1
IDEOGRAPH-2F9F0
IDEOGRAPH-2F9EF
IDEOGRAPH-2F9EE
IDEOGRAPH-2F9ED
IDEOGRAPH-2F9EC
IDEOGRAPH-2F9EB
IDEOGRAPH-2F9EA
IDEOGRAPH-2F9E9
IDEOGRAPH-2F9E8
IDEOGRAPH-2F9E7
IDEOGRAPH-2F9E6
IDEOGRAPH-2F9E5
IDEOGRAPH-2F9E4
IDEOGRAPH-2F9E3
IDEOGRAPH-2F9E2
IDEOGRAPH-2F9E1
IDEOGRAPH-2F9E0
IDEOGRAPH-2F9DF
IDEOGRAPH-2F9DE
IDEOGRAPH-2F9DD
IDEOGRAPH-2F9DC
IDEOGRAPH-2F9DB
IDEOGRAPH-2F9DA
IDEOGRAPH-2F9D9
IDEOGRAPH-2F9D8
IDEOGRAPH-2F9D7
IDEOGRAPH-2F9D6
IDEOGRAPH-2F9D5
IDEOGRAPH-2F9D4
IDEOGRAPH-2F9D3
IDEOGRAPH-2F9D2
IDEOGRAPH-2F9D1
IDEOGRAPH-2F9D0
IDEOGRAPH-2F9CF
IDEOGRAPH-2F9CE
IDEOGRAPH-2F9CD
IDEOGRAPH-2F9CC
IDEOGRAPH-2F9CB
IDEOGRAPH-2F9CA
IDEOGRAPH-2F9C9
IDEOGRAPH-2F9C8
IDEOGRAPH-2F9C7
IDEOGRAPH-2F9C6
IDEOGRAPH-2F9C5
IDEOGRAPH-2F9C4
IDEOGRAPH-2F9C3
IDEOGRAPH-2F9C2
IDEOGRAPH-2F9C1
IDEOGRAPH-2F9C0
IDEOGRAPH-2F9BF
IDEOGRAPH-2F9BE
IDEOGRAPH-2F9BD
IDEOGRAPH-2F9BC
IDEOGRAPH-2F9BB
IDEOGRAPH-2F9BA
IDEOGRAPH-2F9B9
IDEOGRAPH-2F9B8
IDEOGRAPH-2F9B7
IDEOGRAPH-2F9B6
IDEOGRAPH-2F9B5
IDEOGRAPH-2F9B4
IDEOGRAPH-2F9B3
IDEOGRAPH-2F9B2
IDEOGRAPH-2F9B1
IDEOGRAPH-2F9B0
IDEOGRAPH-2F9AF
IDEOGRAPH-2F9AE
IDEOGRAPH-2F9AD
IDEOGRAPH-2F9AC
IDEOGRAPH-2F9AB
IDEOGRAPH-2F9AA
IDEOGRAPH-2F9A9
IDEOGRAPH-2F9A8
IDEOGRAPH-2F9A7
IDEOGRAPH-2F9A6
IDEOGRAPH-2F9A5
IDEOGRAPH-2F9A4
IDEOGRAPH-2F9A3
IDEOGRAPH-2F9A2
IDEOGRAPH-2F9A1
IDEOGRAPH-2F9A0
IDEOGRAPH-2F99F
IDEOGRAPH-2F99E
IDEOGRAPH-2F99D
IDEOGRAPH-2F99C
IDEOGRAPH-2F99B
IDEOGRAPH-2F99A
IDEOGRAPH-2F999
IDEOGRAPH-2F998
IDEOGRAPH-2F997
IDEOGRAPH-2F996
IDEOGRAPH-2F995
IDEOGRAPH-2F994
IDEOGRAPH-2F993
IDEOGRAPH-2F992
IDEOGRAPH-2F991
IDEOGRAPH-2F990
IDEOGRAPH-2F98F
IDEOGRAPH-2F98E
IDEOGRAPH-2F98D
IDEOGRAPH-2F98C
IDEOGRAPH-2F98B
IDEOGRAPH-2F98A
IDEOGRAPH-2F989
IDEOGRAPH-2F988
IDEOGRAPH-2F987
IDEOGRAPH-2F986
IDEOGRAPH-2F985
IDEOGRAPH-2F984
IDEOGRAPH-2F983
IDEOGRAPH-2F982
IDEOGRAPH-2F981
IDEOGRAPH-2F980
IDEOGRAPH-2F97F
IDEOGRAPH-2F97E
IDEOGRAPH-2F97D
IDEOGRAPH-2F97C
IDEOGRAPH-2F97B
IDEOGRAPH-2F97A
IDEOGRAPH-2F979
IDEOGRAPH-2F978
IDEOGRAPH-2F977
IDEOGRAPH-2F976
IDEOGRAPH-2F975
IDEOGRAPH-2F974
IDEOGRAPH-2F973
IDEOGRAPH-2F972
IDEOGRAPH-2F971
IDEOGRAPH-2F970
IDEOGRAPH-2F96F
IDEOGRAPH-2F96E
IDEOGRAPH-2F96D
IDEOGRAPH-2F96C
IDEOGRAPH-2F96B
IDEOGRAPH-2F96A
IDEOGRAPH-2F969
IDEOGRAPH-2F968
IDEOGRAPH-2F967
IDEOGRAPH-2F966
IDEOGRAPH-2F965
IDEOGRAPH-2F964
IDEOGRAPH-2F963
IDEOGRAPH-2F962
IDEOGRAPH-2F961
IDEOGRAPH-2F960
IDEOGRAPH-2F95F
IDEOGRAPH-2F95E
IDEOGRAPH-2F95D
IDEOGRAPH-2F95C
IDEOGRAPH-2F95B
IDEOGRAPH-2F95A
IDEOGRAPH-2F959
IDEOGRAPH-2F958
IDEOGRAPH-2F957
IDEOGRAPH-2F956
IDEOGRAPH-2F955
IDEOGRAPH-2F954
IDEOGRAPH-2F953
IDEOGRAPH-2F952
IDEOGRAPH-2F951
IDEOGRAPH-2F950
IDEOGRAPH-2F94F
IDEOGRAPH-2F94E
IDEOGRAPH-2F94D
IDEOGRAPH-2F94C
IDEOGRAPH-2F94B
IDEOGRAPH-2F94A
IDEOGRAPH-2F949
IDEOGRAPH-2F948
IDEOGRAPH-2F947
IDEOGRAPH-2F946
IDEOGRAPH-2F945
IDEOGRAPH-2F944
IDEOGRAPH-2F943
IDEOGRAPH-2F942
IDEOGRAPH-2F941
IDEOGRAPH-2F940
IDEOGRAPH-2F93F
IDEOGRAPH-2F93E
IDEOGRAPH-2F93D
IDEOGRAPH-2F93C
IDEOGRAPH-2F93B
IDEOGRAPH-2F93A
IDEOGRAPH-2F939
IDEOGRAPH-2F938
IDEOGRAPH-2F937
IDEOGRAPH-2F936
IDEOGRAPH-2F935
IDEOGRAPH-2F934
IDEOGRAPH-2F933
IDEOGRAPH-2F932
IDEOGRAPH-2F931
IDEOGRAPH-2F930
IDEOGRAPH-2F92F
IDEOGRAPH-2F92E
IDEOGRAPH-2F92D
IDEOGRAPH-2F92C
IDEOGRAPH-2F92B
IDEOGRAPH-2F92A
IDEOGRAPH-2F929
IDEOGRAPH-2F928
IDEOGRAPH-2F927
IDEOGRAPH-2F926
IDEOGRAPH-2F925
IDEOGRAPH-2F924
IDEOGRAPH-2F923
IDEOGRAPH-2F922
IDEOGRAPH-2F921
IDEOGRAPH-2F920
IDEOGRAPH-2F91F
IDEOGRAPH-2F91E
IDEOGRAPH-2F91D
IDEOGRAPH-2F91C
IDEOGRAPH-2F91B
IDEOGRAPH-2F91A
IDEOGRAPH-2F919
IDEOGRAPH-2F918
IDEOGRAPH-2F917
IDEOGRAPH-2F916
IDEOGRAPH-2F915
IDEOGRAPH-2F914
IDEOGRAPH-2F913
IDEOGRAPH-2F912
IDEOGRAPH-2F911
IDEOGRAPH-2F910
IDEOGRAPH-2F90F
IDEOGRAPH-2F90E
IDEOGRAPH-2F90D
IDEOGRAPH-2F90C
IDEOGRAPH-2F90B
IDEOGRAPH-2F90A
IDEOGRAPH-2F909
IDEOGRAPH-2F908
IDEOGRAPH-2F907
IDEOGRAPH-2F906
IDEOGRAPH-2F905
IDEOGRAPH-2F904
IDEOGRAPH-2F903
IDEOGRAPH-2F902
IDEOGRAPH-2F901
IDEOGRAPH-2F900
IDEOGRAPH-2F8FF
IDEOGRAPH-2F8FE
IDEOGRAPH-2F8FD
IDEOGRAPH-2F8FC
IDEOGRAPH-2F8FB
IDEOGRAPH-2F8FA
IDEOGRAPH-2F8F9
IDEOGRAPH-2F8F8
IDEOGRAPH-2F8F7
IDEOGRAPH-2F8F6
IDEOGRAPH-2F8F5
IDEOGRAPH-2F8F4
IDEOGRAPH-2F8F3
IDEOGRAPH-2F8F2
IDEOGRAPH-2F8F1
IDEOGRAPH-2F8F0
IDEOGRAPH-2F8EF
IDEOGRAPH-2F8EE
IDEOGRAPH-2F8ED
IDEOGRAPH-2F8EC
IDEOGRAPH-2F8EB
IDEOGRAPH-2F8EA
IDEOGRAPH-2F8E9
IDEOGRAPH-2F8E8
IDEOGRAPH-2F8E7
IDEOGRAPH-2F8E6
IDEOGRAPH-2F8E5
IDEOGRAPH-2F8E4
IDEOGRAPH-2F8E3
IDEOGRAPH-2F8E2
IDEOGRAPH-2F8E1
IDEOGRAPH-2F8E0
IDEOGRAPH-2F8DF
IDEOGRAPH-2F8DE
IDEOGRAPH-2F8DD
IDEOGRAPH-2F8DC
IDEOGRAPH-2F8DB
IDEOGRAPH-2F8DA
IDEOGRAPH-2F8D9
IDEOGRAPH-2F8D8
IDEOGRAPH-2F8D7
IDEOGRAPH-2F8D6
IDEOGRAPH-2F8D5
IDEOGRAPH-2F8D4
IDEOGRAPH-2F8D3
IDEOGRAPH-2F8D2
IDEOGRAPH-2F8D1
IDEOGRAPH-2F8D0
IDEOGRAPH-2F8CF
IDEOGRAPH-2F8CE
IDEOGRAPH-2F8CD
IDEOGRAPH-2F8CC
IDEOGRAPH-2F8CB
IDEOGRAPH-2F8CA
IDEOGRAPH-2F8C9
IDEOGRAPH-2F8C8
IDEOGRAPH-2F8C7
IDEOGRAPH-2F8C6
IDEOGRAPH-2F8C5
IDEOGRAPH-2F8C4
IDEOGRAPH-2F8C3
IDEOGRAPH-2F8C2
IDEOGRAPH-2F8C1
IDEOGRAPH-2F8C0
IDEOGRAPH-2F8BF
IDEOGRAPH-2F8BE
IDEOGRAPH-2F8BD
IDEOGRAPH-2F8BC
IDEOGRAPH-2F8BB
IDEOGRAPH-2F8BA
IDEOGRAPH-2F8B9
IDEOGRAPH-2F8B8
IDEOGRAPH-2F8B7
IDEOGRAPH-2F8B6
IDEOGRAPH-2F8B5
IDEOGRAPH-2F8B4
IDEOGRAPH-2F8B3
IDEOGRAPH-2F8B2
IDEOGRAPH-2F8B1
IDEOGRAPH-2F8B0
IDEOGRAPH-2F8AF
IDEOGRAPH-2F8AE
IDEOGRAPH-2F8AD
IDEOGRAPH-2F8AC
IDEOGRAPH-2F8AB
IDEOGRAPH-2F8AA
IDEOGRAPH-2F8A9
IDEOGRAPH-2F8A8
IDEOGRAPH-2F8A7
IDEOGRAPH-2F8A6
IDEOGRAPH-2F8A5
IDEOGRAPH-2F8A4
IDEOGRAPH-2F8A3
IDEOGRAPH-2F8A2
IDEOGRAPH-2F8A1
IDEOGRAPH-2F8A0
IDEOGRAPH-2F89F
IDEOGRAPH-2F89E
IDEOGRAPH-2F89D
IDEOGRAPH-2F89C
IDEOGRAPH-2F89B
IDEOGRAPH-2F89A
IDEOGRAPH-2F899
IDEOGRAPH-2F898
IDEOGRAPH-2F897
IDEOGRAPH-2F896
IDEOGRAPH-2F895
IDEOGRAPH-2F894
IDEOGRAPH-2F893
IDEOGRAPH-2F892
IDEOGRAPH-2F891
IDEOGRAPH-2F890
IDEOGRAPH-2F88F
IDEOGRAPH-2F88E
IDEOGRAPH-2F88D
IDEOGRAPH-2F88C
IDEOGRAPH-2F88B
IDEOGRAPH-2F88A
IDEOGRAPH-2F889
IDEOGRAPH-2F888
IDEOGRAPH-2F887
IDEOGRAPH-2F886
IDEOGRAPH-2F885
IDEOGRAPH-2F884
IDEOGRAPH-2F883
IDEOGRAPH-2F882
IDEOGRAPH-2F881
IDEOGRAPH-2F880
IDEOGRAPH-2F87F
IDEOGRAPH-2F87E
IDEOGRAPH-2F87D
IDEOGRAPH-2F87C
IDEOGRAPH-2F87B
IDEOGRAPH-2F87A
IDEOGRAPH-2F879
IDEOGRAPH-2F878
IDEOGRAPH-2F877
IDEOGRAPH-2F876
IDEOGRAPH-2F875
IDEOGRAPH-2F874
IDEOGRAPH-2F873
IDEOGRAPH-2F872
IDEOGRAPH-2F871
IDEOGRAPH-2F870
IDEOGRAPH-2F86F
IDEOGRAPH-2F86E
IDEOGRAPH-2F86D
IDEOGRAPH-2F86C
IDEOGRAPH-2F86B
IDEOGRAPH-2F86A
IDEOGRAPH-2F869
IDEOGRAPH-2F868
IDEOGRAPH-2F867
IDEOGRAPH-2F866
IDEOGRAPH-2F865
IDEOGRAPH-2F864
IDEOGRAPH-2F863
IDEOGRAPH-2F862
IDEOGRAPH-2F861
IDEOGRAPH-2F860
IDEOGRAPH-2F85F
IDEOGRAPH-2F85E
IDEOGRAPH-2F85D
IDEOGRAPH-2F85C
IDEOGRAPH-2F85B
IDEOGRAPH-2F85A
IDEOGRAPH-2F859
IDEOGRAPH-2F858
IDEOGRAPH-2F857
IDEOGRAPH-2F856
IDEOGRAPH-2F855
IDEOGRAPH-2F854
IDEOGRAPH-2F853
IDEOGRAPH-2F852
IDEOGRAPH-2F851
IDEOGRAPH-2F850
IDEOGRAPH-2F84F
IDEOGRAPH-2F84E
IDEOGRAPH-2F84D
IDEOGRAPH-2F84C
IDEOGRAPH-2F84B
IDEOGRAPH-2F84A
IDEOGRAPH-2F849
IDEOGRAPH-2F848
IDEOGRAPH-2F847
IDEOGRAPH-2F846
IDEOGRAPH-2F845
IDEOGRAPH-2F844
IDEOGRAPH-2F843
IDEOGRAPH-2F842
IDEOGRAPH-2F841
IDEOGRAPH-2F840
IDEOGRAPH-2F83F
IDEOGRAPH-2F83E
IDEOGRAPH-2F83D
IDEOGRAPH-2F83C
IDEOGRAPH-2F83B
IDEOGRAPH-2F83A
IDEOGRAPH-2F839
IDEOGRAPH-2F838
IDEOGRAPH-2F837
IDEOGRAPH-2F836
IDEOGRAPH-2F835
IDEOGRAPH-2F834
IDEOGRAPH-2F833
IDEOGRAPH-2F832
IDEOGRAPH-2F831
IDEOGRAPH-2F830
IDEOGRAPH-2F82F
IDEOGRAPH-2F82E
IDEOGRAPH-2F82D
IDEOGRAPH-2F82C
IDEOGRAPH-2F82B
IDEOGRAPH-2F82A
IDEOGRAPH-2F829
IDEOGRAPH-2F828
IDEOGRAPH-2F827
IDEOGRAPH-2F826
IDEOGRAPH-2F825
IDEOGRAPH-2F824
IDEOGRAPH-2F823
IDEOGRAPH-2F822
IDEOGRAPH-2F821
IDEOGRAPH-2F820
IDEOGRAPH-2F81F
IDEOGRAPH-2F81E
IDEOGRAPH-2F81D
IDEOGRAPH-2F81C
IDEOGRAPH-2F81B
IDEOGRAPH-2F81A
IDEOGRAPH-2F819
IDEOGRAPH-2F818
IDEOGRAPH-2F817
IDEOGRAPH-2F816
IDEOGRAPH-2F815
IDEOGRAPH-2F814
IDEOGRAPH-2F813
IDEOGRAPH-2F812
IDEOGRAPH-2F811
IDEOGRAPH-2F810
IDEOGRAPH-2F80F
IDEOGRAPH-2F80E
IDEOGRAPH-2F80D
IDEOGRAPH-2F80C
IDEOGRAPH-2F80B
IDEOGRAPH-2F80A
IDEOGRAPH-2F809
IDEOGRAPH-2F808
IDEOGRAPH-2F807
IDEOGRAPH-2F806
IDEOGRAPH-2F805
IDEOGRAPH-2F804
IDEOGRAPH-2F803
IDEOGRAPH-2F802
IDEOGRAPH-2F801
IDEOGRAPH-2F800
IDENTIFICATION
IDENTICA
ICHOU
ICHOS
ICHIMATOS
ICHADIN
ICELANDIC-YR
IBIFILI
IAUDA
I015
I014
I013
I012
I011A
I011
I010A
I010
I009A
I009
I008
I007
I006
I005A
I005
I004
I003
I002
I001
I-YU
I-YO
I-YEO
I-YE
I-YAE
I-YA-O
I-YA
I-O-I
I-EU
I-BEAM
I-ARAEA
HZZZG
HZZZ
HZZP
HZWG
HYSTERESI
HYPODIASTOLE
HYPHENATIO
HYPHEN-MINUS
HYPHEN
HYPHE
HXWG
HXUOX
HXUOT
HXUOP
HXUO
HXOX
HXOT
HXOP
HXIX
HXIT
HXIP
HXIEX
HXIET
HXIEP
HXIE
HXEX
HXEP
HXAX
HXAT
HXAP
HWAIR
HURAN
HUOT
HUNDRED
HUNDRE
HUMAN
HUMA
HUL2
HUIITO
HUB2
HUARADDO
HRYVNI
HPWG
HOURGLASS
HOTA
HORSE
HORIZONTALL
HORIZONTAL-06-06
HORIZONTAL-06-05
HORIZONTAL-06-04
HORIZONTAL-06-03
HORIZONTAL-06-02
HORIZONTAL-06-01
HORIZONTAL-06-00
HORIZONTAL-05-06
HORIZONTAL-05-05
HORIZONTAL-05-04
HORIZONTAL-05-03
HORIZONTAL-05-02
HORIZONTAL-05-01
HORIZONTAL-05-00
HORIZONTAL-04-06
HORIZONTAL-04-05
HORIZONTAL-04-04
HORIZONTAL-04-03
HORIZONTAL-04-02
HORIZONTAL-04-01
HORIZONTAL-04-00
HORIZONTAL-03-06
HORIZONTAL-03-05
HORIZONTAL-03-04
HORIZONTAL-03-03
HORIZONTAL-03-02
HORIZONTAL-03-01
HORIZONTAL-03-00
HORIZONTAL-02-06
HORIZONTAL-02-05
HORIZONTAL-02-04
HORIZONTAL-02-03
HORIZONTAL-02-02
HORIZONTAL-02-01
HORIZONTAL-02-00
HORIZONTAL-01-06
HORIZONTAL-01-05
HORIZONTAL-01-04
HORIZONTAL-01-03
HORIZONTAL-01-02
HORIZONTAL-01-01
HORIZONTAL-01-00
HORIZONTAL-00-06
HORIZONTAL-00-05
HORIZONTAL-00-04
HORIZONTAL-00-03
HORIZONTAL-00-02
HORIZONTAL-00-01
HORIZONTAL-00-00
HORIZONTAL
HORI
HOORU
HOON
HOMOTHETIC
HOMOTHETI
HOLE
HOLDIN
HOLAM
HOLA
HOKA
HNUT
HNUOX
HNUO
HNOX
HNOT
HNOP
HNIX
HNIT
HNIP
HNIEX
HNIET
HNIEP
HNIE
HNEX
HNEP
HNAX
HNAT
HNAP
HMYX
HMYRX
HMYR
HMYP
HMUX
HMUT
HMURX
HMUR
HMUP
HMUOX
HMUOP
HMUO
HMOX
HMOT
HMOP
HMIX
HMIT
HMIP
HMIEX
HMIEP
HMIE
HMAX
HMAT
HMAP
HLYX
HLYT
HLYRX
HLYR
HLYP
HLUX
HLUT
HLURX
HLUR
HLUP
HLUOX
HLUOP
HLUO
HLOX
HLOP
HLIX
HLIT
HLIP
HLIEX
HLIEP
HLIE
HLEX
HLEP
HLAX
HLAT
HLAP
HIZB
HISTORI
HIRIQ
HIGH-REVERSED-
HIEX
HIEUH-SIOS
HIEUH-RIEUL
HIEUH-PIEUP
HIEUH-NIEUN
HIEUH-MIEUM
HIEU
HIDIN
HIDET
HIDE
HHWA
HHEE
HHAA
HEXIFOR
HEXAGON
HERUTU
HERU
HERMITIA
HERMIONIA
HERMES
HERAEU
HENG
HEMP
HELMET
HELME
HEKUTAARU
HEISEI
HEAVY
HEAVENL
HEAVEN
HEAVE
HEART
HEAR
HEADSTROKE
HEADSTON
HEADING
HBASA-ESAS
HBAS
HAYANNA
HAVE
HAUPTSTIMME
HATHI
HATE
HATA
HASE
HASANTA
HARPOON
HARPOO
HARMONIC
HARKLEA
HARDNESS
HANUNO
HANGZHO
HANDS
HANDLES
HAND
HAN-AKAT
HAMZA
HAMME
HALF
HALBERD
HALANTA
HAITU
HAIR
HAGLA
HAGL
HAFUKHA
HAFUKH
HAEG
HAARU
HAAM
HA-HA
H008
H007
H006A
H006
H005
H004
H003
H002
H001
H-TYP
GYON
GYEE
GYAS
GYAA
GWEE
GWAA
GURUSH
GURUN
GURAMUTON
GUR7
GUNU
GUEH
GUARDEDNESS
GUARAN
GSUM
GROUND
GRONTHISMATA
GREGORIA
GREE
GREATNESS
GREATER-THAN
GREATER-THA
GREATE
GREA
GRAVEYAR
GRAVE-MACRON
GRAVE-ACUTE-GRAVE
GRAV
GRATER
GRASS
GRAS
GRAPHEM
GRAMM
GRAIN
GRACE
GRAC
GORTHMIKO
GORT
GORGOTERI
GORGOSYNTHETON
GORGO
GORGI
GORA
GONG
GOLD
GOIN
GOAL
GNYIS
GNAVIYANI
GLOTTA
GLISSAND
GLEIC
GLAGOLI
GISH
GISAL
GIRUDAA
GIR3
GIR2
GINII
GIMEL
GIME
GIGA
GIET
GIDIM
GIBA
GHWA
GHUNNA
GHUNN
GHOU
GHOST
GHHA
GHEE
GHAYN
GHAN
GHAMAL
GHAINU
GHAIN
GHAI
GHAD
GGWI
GGWEE
GGWE
GGWAA
GGWA
GGUX
GGUT
GGURX
GGUR
GGUP
GGUOX
GGUOT
GGUOP
GGUO
GGOX
GGOT
GGOP
GGIX
GGIT
GGIEX
GGIEP
GGIE
GGEX
GGET
GGEP
GGAX
GGAT
GGAP
GGAA
GESHU
GESHTIN
GESHTI
GESH2
GERSHAYIM
GERMA
GERESH
GERES
GEOMETRICALL
GEOMETRI
GENTL
GENITIVE
GENIK
GENERI
GEMINI
GEMINATIO
GEDOLA
GEDE
GEAR
GDAN
GCIG
GBON
GBEN
GBAKURUNEN
GAYANUKITTA
GAYANNA
GAUNTLET
GATHERING
GATHERIN
GATE
GASHAN
GARSHUNI
GARON
GARMENT
GAR3
GAPPE
GANMA
GANGIA
GAND
GAN2
GAMMA
GAMLA
GAML
GAMAN
GAMAL
GAMA
GAETTA-PILLA
GADOL
GABA
GAAFU
G054
G053
G052
G051
G050
G049
G048
G047
G046
G045A
G045
G044
G043A
G043
G042
G041
G040
G039
G038
G037A
G037
G036A
G036
G035
G034
G033
G032
G031
G030
G029
G028
G027
G026A
G026
G025
G024
G023
G022
G021
G020A
G020
G019
G018
G017
G016
G015
G014
G013
G012
G011A
G011
G010
G009
G008
G007B
G007A
G007
G006A
G006
G005
G004
G003
G002
G001
FWEE
FWAA
FUSE
FURX
FUNERA
FUNCTION
FULLNESS
FTHOR
FROWNIN
FROWN
FRONT-TILTE
FROG
FRITU
FRICATIVE
FRETBOARD
FRENC
FRAN
FRAME
FRAGRANT
FRAGMENT
FRACTIO
FOURTEEN
FOURTEE
FOUR-STRIN
FOUR-PER-E
FOUR-LIN
FOUNTAIN
FOSTERING
FORTY
FORT
FORTE
FORM
FORMATTING
FORKE
FORCES
FORCE
FOOTSTOOL
FOOTNOT
FOOT
FONGMAN
FOLLY
FOLLOWING
FLUTE
FLOWER
FLOWE
FLOURISH
FLORETTE
FLORA
FLOOR
FLIP
FLIGHT
FLEXUS
FLEUR-DE-LIS
FLATTENE
FLATNESS
FLAT
FLAG-5
FLAG-4
FLAG-3
FLAG-2
FLAG-1
FLAG
FIXED-FOR
FIVE-LIN
FITA
FISHHOOK
FISHHOO
FISHEYE
FISH
FIRS
FIRE
FINIT
FINGERNAILS
FINGERE
FINANCIAL
FILLER
FILLE
FILL
FIGURE-3
FIGURE-2
FIGURE-1
FIGUR
FIGHT
FIFTY
FIFT
FIFTHS
FIFTH
FIFTEEN
FIFTEE
FIELD
FHTOR
FESTIVAL
FERRY
FERMATA
FERMAT
FENCE
FEMININ
FEMALE
FEMAL
FELLOWSHIP
FEENG
FEED
FEBRUARY
FEATHER
FEATHE
FEARN
FAYANNA
FATHER
FATHATAN
FATHATA
FATHA
FATH
FARS
FANG
FANEROSI
FAMILY
FALLIN
FAILURE
FAIHU
FAHRENHEIT
FACTO
FACSIMIL
FACE-6
FACE-5
FACE-4
FACE-3
FACE-2
FACE-1
FAAMAE
FAAI
FAAFU
F053
F052
F051C
F051B
F051A
F051
F050
F049
F048
F047A
F047
F046A
F046
F045A
F045
F044
F043
F042
F041
F040
F039
F038A
F038
F037A
F037
F036
F035
F034
F033
F032
F031A
F031
F030
F029
F028
F027
F026
F025
F024
F023
F022
F021A
F021
F020
F019
F018
F017
F016
F015
F014
F013A
F013
F012
F011
F010
F009
F008
F007
F006
F005
F004
F003
F002
F001A
F001
EZEN
EYBEYFILI
EYANNA
EXTRA-LO
EXTRA-HIG
EXTENSION
EXTENDE
EXPONEN
EXISTS
EXIST
EXHAUSTION
EXCLAMATION
EXCLAMATIO
EXCESS
EXCELLENT
EVENING
EURO-CURRENC
EULE
EU-U
EU-O
EU-EU
EU-EO
EU-E
EU-A
ETNAHTA
ETHE
ETERO
ETERNITY
ESUKUUDO
ESTIMATES
ESTIMATE
ESHE3
ESH21
ESH16
ESCAPE
ES-TE
ERROR-BARRE
ERIN2
ERAS
EQUIVALEN
EQUID
EQUIANGULA
EQUALS
EQUAL
EQUAL
EPSILON
EPSILO
EPIGRAPHI
EPIDAUREA
EPENTHETI
EPEGERMA
EOLHX
ENVELOPE
ENUMERATIO
ENTRY-2
ENTRY-1
ENTRY
ENTHUSIASM
ENTERPRISE
ENTERIN
ENTER
ENTE
ENQUIRY
ENLARGEMENT
ENDOFONON
ENDIN
ENDEP
ENDEAVOUR
ENCOUNTERS
ENCLOSURE
ENCLOSIN
ENARXI
ENARMONIO
EMPT
EMPHATI
EMPHASI
EMBROIDERY
EMBELLISHMENT
EMBEDDING
ELLIPSIS
ELLIPSE
ELIFI
ELEVEN
ELEVE
ELEMEN
ELECTRICA
ELECTRI
ELAFRON
EKSTREPTON
EKFONITIKON
EKARA
EJEC
EIGHTY
EIGHT
EIGHTHS
EIGHTH
EIGHTH
EIGHTEEN
EIGHTEE
EHWA
EGYPTOLOGICA
EGIR
EEYANNA
EEKAA
EEBEEFILI
EDITORIA
EDIN
EBEFILI
EASTER
EARTHL
EARTH
EART
EARL
EAMHANCHOLL
EAGLE
EADHADH
EABHADH
E038
E037
E036
E034A
E034
E033
E032
E031
E030
E029
E028A
E028
E027
E026
E025
E024
E023
E022
E021
E020A
E020
E019
E018
E017A
E017
E016A
E016
E015
E014
E013
E012
E011
E010
E009A
E009
E008A
E008
E007
E006
E005
E004
E003
E002
E001
DZZE
DZWE
DZJE
DZHE
DZHA
DZELO
DZEE
DYEH
DVISVARA
DUTIES
DURATION
DUR2
DUPONDIU
DUOX
DUN4
DUN3
DUGUD
DUB2
DRUM
DROPS
DROP-SHADOWE
DRIVE
DRIV
DRAUGHT
DRAGON
DRAFTIN
DRACHMAS
DRACHMA
DRACHM
DOWNWARDS
DOWNWARD
DOWN-POINTIN
DOWN
DOVE
DOUBT
DOUBLE
DOUBLE-LIN
DOUBLE-ENDE
DOUBLE
DOTTED-P
DOTTED-N
DOTTED-L
DOTTED
DOTTE
DOTS-8
DOTS-78
DOTS-7
DOTS-68
DOTS-678
DOTS-67
DOTS-6
DOTS-58
DOTS-578
DOTS-57
DOTS-568
DOTS-5678
DOTS-567
DOTS-56
DOTS-5
DOTS-48
DOTS-478
DOTS-47
DOTS-468
DOTS-4678
DOTS-467
DOTS-46
DOTS-458
DOTS-4578
DOTS-457
DOTS-4568
DOTS-45678
DOTS-4567
DOTS-456
DOTS-45
DOTS-4
DOTS-38
DOTS-378
DOTS-37
DOTS-368
DOTS-3678
DOTS-367
DOTS-36
DOTS-358
DOTS-3578
DOTS-357
DOTS-3568
DOTS-35678
DOTS-3567
DOTS-356
DOTS-35
DOTS-348
DOTS-3478
DOTS-347
DOTS-3468
DOTS-34678
DOTS-3467
DOTS-346
DOTS-3458
DOTS-34578
DOTS-3457
DOTS-34568
DOTS-345678
DOTS-34567
DOTS-3456
DOTS-345
DOTS-34
DOTS-3
DOTS-28
DOTS-278
DOTS-27
DOTS-268
DOTS-2678
DOTS-267
DOTS-26
DOTS-258
DOTS-2578
DOTS-257
DOTS-2568
DOTS-25678
DOTS-2567
DOTS-256
DOTS-25
DOTS-248
DOTS-2478
DOTS-247
DOTS-2468
DOTS-24678
DOTS-2467
DOTS-246
DOTS-2458
DOTS-24578
DOTS-2457
DOTS-24568
DOTS-245678
DOTS-24567
DOTS-2456
DOTS-245
DOTS-24
DOTS-238
DOTS-2378
DOTS-237
DOTS-2368
DOTS-23678
DOTS-2367
DOTS-236
DOTS-2358
DOTS-23578
DOTS-2357
DOTS-23568
DOTS-235678
DOTS-23567
DOTS-2356
DOTS-235
DOTS-2348
DOTS-23478
DOTS-2347
DOTS-23468
DOTS-234678
DOTS-23467
DOTS-2346
DOTS-23458
DOTS-234578
DOTS-23457
DOTS-234568
DOTS-2345678
DOTS-234567
DOTS-23456
DOTS-2345
DOTS-234
DOTS-23
DOTS-2
DOTS-18
DOTS-178
DOTS-17
DOTS-168
DOTS-1678
DOTS-167
DOTS-16
DOTS-158
DOTS-1578
DOTS-157
DOTS-1568
DOTS-15678
DOTS-1567
DOTS-156
DOTS-15
DOTS-148
DOTS-1478
DOTS-147
DOTS-1468
DOTS-14678
DOTS-1467
DOTS-146
DOTS-1458
DOTS-14578
DOTS-1457
DOTS-14568
DOTS-145678
DOTS-14567
DOTS-1456
DOTS-145
DOTS-14
DOTS-138
DOTS-1378
DOTS-137
DOTS-1368
DOTS-13678
DOTS-1367
DOTS-136
DOTS-1358
DOTS-13578
DOTS-1357
DOTS-13568
DOTS-135678
DOTS-13567
DOTS-1356
DOTS-135
DOTS-1348
DOTS-13478
DOTS-1347
DOTS-13468
DOTS-134678
DOTS-13467
DOTS-1346
DOTS-13458
DOTS-134578
DOTS-13457
DOTS-134568
DOTS-1345678
DOTS-134567
DOTS-13456
DOTS-1345
DOTS-134
DOTS-13
DOTS-128
DOTS-1278
DOTS-127
DOTS-1268
DOTS-12678
DOTS-1267
DOTS-126
DOTS-1258
DOTS-12578
DOTS-1257
DOTS-12568
DOTS-125678
DOTS-12567
DOTS-1256
DOTS-125
DOTS-1248
DOTS-12478
DOTS-1247
DOTS-12468
DOTS-124678
DOTS-12467
DOTS-1246
DOTS-12458
DOTS-124578
DOTS-12457
DOTS-124568
DOTS-1245678
DOTS-124567
DOTS-12456
DOTS-1245
DOTS-124
DOTS-1238
DOTS-12378
DOTS-1237
DOTS-12368
DOTS-123678
DOTS-12367
DOTS-1236
DOTS-12358
DOTS-123578
DOTS-12357
DOTS-123568
DOTS-1235678
DOTS-123567
DOTS-12356
DOTS-1235
DOTS-12348
DOTS-123478
DOTS-12347
DOTS-123468
DOTS-1234678
DOTS-123467
DOTS-12346
DOTS-123458
DOTS-1234578
DOTS-123457
DOTS-1234568
DOTS-12345678
DOTS-1234567
DOTS-123456
DOTS-12345
DOTS-1234
DOTS-123
DOTS-12
DOTS-1
DOTS
DOTLES
DORU
DOOR
DOONG
DONG
DOMAI
DOLLA
DOLIUM
DOKMAI
DOIT
DODEKATA
DOBRO
DOACHASHMEE
DOACHASHME
DO-O
DLEE
DKAR
DJERVI
DJERV
DIVORC
DIVISION
DIVISIO
DIVINATION
DIVIDES
DIVIDER
DIVIDE
DIVIDE
DIVID
DIVERGENCE
DITT
DISTORTION
DISTINGUISH
DISPERSION
DISIMOU
DISH
DISCONTINUOU
DISABLE
DIRG
DIRECTL
DIRECTIONA
DIPTE
DIPPER
DIPLOUN
DIPLI
DIPL
DINGBA
DIMMING
DIMINUTION-3
DIMINUTION-2
DIMINUTION-1
DIMINISHMENT
DIMIDI
DIMENSIONA
DIMENSIO
DIM2
DIGRAPH
DIGRAP
DIGRAMMO
DIGRAMM
DIGRA
DIGORGON
DIGORGO
DIGAMMA
DIFTOGGO
DIFONIAS
DIFFICULT
DIFFICULTIES
DIFFERENTIAL
DIFFERENC
DIFAT
DIESIS
DIESI
DIEP
DIATONO
DIATONIK
DIASTOL
DIAMOND
DIAMON
DIAMETE
DIALYTIKA
DIALYTIK
DIALECT-
DIAGONAL
DIAGONA
DIAERESIZE
DIAERESIS
DIAERESI
DHOU
DHOO
DHHU
DHHOO
DHHO
DHHI
DHHEE
DHHE
DHHA
DHEE
DHARMA
DHALETH
DHALATH
DHAL
DHADHE
DHAALU
DEYTERO
DEYTERO
DEXIA
DEVIC
DEVELOPMENT
DEUNG
DESI
DESCRIPTIO
DESCENDIN
DESCENDER
DERET-HIDET
DERET
DEPARTURE
DEPARTIN
DENTISTR
DENTA
DENOMINATOR
DENOMINATO
DENNEN
DENG
DENARIU
DELTA
DELT
DELT
DELPHI
DELIVERANCE
DELIMITER
DELIMITE
DELETE
DELET
DEKA
DEHI
DEGRE
DEFINITION
DEFECTIVENES
DEER
DEEL
DECRESCENDO
DECREASE
DECISIVENESS
DECIMA
DECEMBER
DECAYED
DEBI
DEATH
DEAD
DDWA
DDUX
DDUT
DDURX
DDUR
DDUP
DDUOX
DDUOP
DDUO
DDOX
DDOT
DDOP
DDOA
DDIX
DDIT
DDIP
DDIEX
DDIEP
DDIE
DDHO
DDHA
DDEX
DDEP
DDEE
DDDHA
DDDA
DDAYANNA
DDAX
DDAT
DDAP
DDAL
DDAHAL
DDAHA
DDAA
DAVIYANI
DAVID
DASIA
DASHE
DASH
DASEIA
DART
DARKENING
DARKENIN
DARGA
DARA4
DARA3
DAP-PRA
DAP-PI
DAP-MUO
DAP-BUO
DAP-BE
DANTAJ
DANG
DANDA
DAMP
DAMMATAN
DAMMATA
DAMMA
DAMM
DAMARU
DALETH
DALET
DALE
DALDA
DALATH
DALAT
DALAT
DAIR
DAING
DAHYAAUSH-2
DAHYAAUSH
DAGS
DAGGER
DAGESH
DAGES
DAGBASINNA
DAGA
DAGALGA
DAENG
DAASU
DAADHU
D067H
D067G
D067F
D067E
D067D
D067C
D067B
D067A
D067
D066
D065
D064
D063
D062
D061
D060
D059
D058
D057
D056
D055
D054A
D054
D053
D052A
D052
D051
D050I
D050H
D050G
D050F
D050E
D050D
D050C
D050B
D050A
D050
D049
D048A
D048
D047
D046A
D046
D045
D044
D043
D042
D041
D040
D039
D038
D037
D036
D035
D034A
D034
D033
D032
D031A
D031
D030
D029
D028
D027A
D027
D026
D025
D024
D023
D022
D021
D020
D019
D018
D017
D016
D015
D014
D013
D012
D011
D010
D009
D008A
D008
D007
D006
D005
D004
D003
D002
D001
CYRX
CYRENAI
CYPRIO
CYPERUS
CYLINDRICITY
CWOO
CWII
CWEORTH
CWAA
CUSTOME
CURX
CURVIN
CURVE
CURVE
CURV
CURRENT
CURREN
CURL
CURL
CUOX
CUOP
CUBED
CUATRILLO
CUATRILL
CRYPTOGRAMMI
CRUZEIR
CROSSIN
CROSSHATC
CROSSED-TAIL
CROSSE
CROSSBONES
CROSS
CROS
CROP
CROIX
CRESCENT
CRESCEN
CREDI
CREATIV
COVER
COUNTIN
COUNTERSINK
COUNTERBORE
COUNCI
CORRESPOND
CORRECT
CORPSE
CORPORATION
CORONIS
CORNERS
CORNER
CORNE
COPYRIGHT
COPYRIGH
COPY
COPRODUCT
CONVERGIN
CONTRO
CONTRARIETY
CONTRACTION
CONTOURE
CONTOU
CONTENTION
CONTEMPLATION
CONTAIN
CONTAININ
CONTAI
CONTACT
CONSTANT
CONSTAN
CONSTANCY
CONSONAN
CONSECUTIV
CONJUNCTION
CONJUGAT
CONJOININ
CONICA
CONGRUEN
CONGRATULATION
CONFLICT
CONCAVE-SIDE
CONCAVE-POINTE
COMPOSITION
COMPOSITIO
COMPLIANCE
COMPLETION
COMPLETED
COMPLEMENT
COMPARE
COMMO
COMMERCIA
COMMA
COMM
COMIN
COMET
COMB
COLUMN
COLOR
COLL
COFFIN
COENG
CODA
CLUSTE
CLUB-SPOKE
CLUB
CLOUD
CLOU
CLOTHES
CLOTH
CLOSENESS
CLOSED
CLOSE
CLOS
CLOCKWIS
CLIVIS
CLINGIN
CLIMACUS
CLIFF
CLICK
CLEF-2
CLEF-1
CLEF
CLEA
CLAW
CLAN
CIVILIAN
CIRCUMFLEX
CIRCUMFLE
CIRCULATIO
CIRCLES
CIRCLE
CIEX
CIEUC-SSANGPIEUP
CIEUC-PIEUP
CIEUC-IEUNG
CIEU
CIET
CIEP
CHYX
CHYT
CHYRX
CHYR
CHYP
CHUX
CHURX
CHURCH
CHUR
CHUP
CHUOX
CHUOT
CHUOP
CHUO
CHULA
CHRYSANTHEMUM
CHRONOU
CHRONON
CHROM
CHRO
CHRIVI
CHOX
CHOT
CHOREVM
CHOP
CHOKE
CHOE
CHOA
CHITUEUMSSANGSIOS
CHITUEUMSSANGCIEUC
CHITUEUMSIOS
CHITUEUMCIEUC
CHITUEUMCHIEUCH
CHIRON
CHIRET
CHING
CHINES
CHIN
CHILL
CHILD
CHIL
CHIK
CHIEUCH-KHIEUKH
CHIEUCH-HIEUH
CHIEUC
CHHA
CHEX
CHEVRO
CHET
CHES
CHEP
CHEINAP
CHEIKHEI
CHEE
CHECK
CHEC
CHAX
CHAVIYANI
CHATTAWA
CHAT
CHARIOT
CHARIO
CHARACTERS
CHARACTER
CHAR
CHAP
CHANGE
CHANG
CHAN
CHAMKO
CHAMILON
CHAMILI
CHAIR
CHAINS
CHADA
CHAA
CERES
CEREK
CER-WA
CEONGCHIEUMSSANGSIOS
CEONGCHIEUMSSANGCIEUC
CEONGCHIEUMSIOS
CEONGCHIEUMCIEUC
CEONGCHIEUMCHIEUCH
CENTURIA
CENTRELIN
CENTRE
CENTRE
CENTR
CELSIUS
CEIRT
CEILING
CEDILLA
CEDILL
CECEK
CECAK
CECA
CEALC
CCHU
CCHO
CCHI
CCHEE
CCHE
CCHAA
CCHA
CCEE
CCAA
CAYN
CAYANNA
CAVE
CAUTIO
CAULDRON
CAUDA
CATAWA
CASTLE
CARYSTIA
CART
CARRIAG
CARPENTR
CARON
CARO
CARI
CARIA
CARET
CARE
CAPTIVE
CAPRICORN
CAPO
CAPITAL
CANTILLATIO
CANDRABINDU
CANDRABIND
CANDRA
CANDR
CANCER
CANCELLATIO
CANCEL
CANCE
CAMNU
CALYA
CALY
CALL
CALC
CAKRA
CAESURA
CADUCEUS
CAANG
CAAI
C024
C023
C022
C021
C020
C019
C018
C017
C016
C015
C014
C013
C012
C011
C010A
C010
C009
C008
C007
C006
C005
C004
C003
C002C
C002B
C002A
C002
C001
C-SIMPLIFIE
C-39
C-18
BZUN
BYELORUSSIAN-UKRAINIA
BWEE
BUUMISH
BUSSYERU
BUR2
BUOX
BUOP
BUMP
BULUG
BULU
BULLSEYE
BULL
BULLET
BULLE
BULL
BUKY
BUHI
BUGINES
BUCKLE
BSTAR
BSKU
BSKA
BSDU
BRUSH
BRUS
BRONZE
BROKE
BROA
BRISTLE
BRIDG
BREVIS
BREVE-MACRON
BREV
BREAT
BREAKTHROUGH
BRANCHIN
BRANCH
BRANC
BRAKCET
BRACKETE
BRACKE
BRACE
BOWTIE
BOWTI
BOUNDAR
BOTTOM-LIGHTE
BOTTOM
BOTTO
BORUTO
BOOMERANG
BONE
BODY
BOAR
BLUE
BLOOD
BLOCK
BLENDE
BLANK
BLAN
BLAD
BLACKFOO
BLACK-LETTE
BLACK-FEATHERE
BLACK
BITTER
BITIN
BISMILLA
BISHOP
BISECTIN
BISAH
BIRU
BIRGA
BIRD
BIOHAZAR
BINOCULA
BINDIN
BINDI
BINAR
BILABIA
BIET
BIDENTA
BIBLE-CRE
BHOO
BHETH
BHEE
BHAM
BEYYAL
BEVERAGE
BETWEEN
BETWEE
BETH
BETA
BESID
BERKANA
BERBE
BEOR
BENZEN
BENDE
BEND
BELT
BELO
BELL
BELGTHO
BEITH
BEHIN
BEHEH
BEHE
BEGINNING
BEGI
BEFOR
BEETA
BEEHIVE
BEEH
BECAUSE
BEAVE
BEAT
BEAN
BEAME
BCAD
BBYX
BBYT
BBYP
BBUX
BBUT
BBURX
BBUR
BBUP
BBUOX
BBUOP
BBUO
BBOX
BBOT
BBOP
BBIX
BBIT
BBIP
BBIEX
BBIET
BBIEP
BBIE
BBEX
BBEP
BBAX
BBAT
BBAP
BAYANNA
BATHTUB
BATHAMASAT
BASSA
BASHKI
BASH
BASEBALL
BASE
BARS
BARRIER
BARREKH
BARREE
BARRE
BARLINE
BARLEY
BARIYOOSAN
BARA2
BANTOC
BAND
BAN2
BAMBOOS
BAMBOO
BALUDA
BALLO
BALLOON-SPOKE
BALAG
BAIRKAN
BAIMAI
BAHT
BAHIRGOMUKHA
BAHAR2
BAGA
BAG3
BADGER
BACKSPACE
BACKSLASH
BACKSLAS
BACK-TILTE
BACK
BAARERU
B305
B259
B258
B257
B256
B255
B253
B252
B251
B250
B249
B248
B246
B245
B236
B234
B232
B229
B228
B227
B226
B222
B221
B219
B218
B217
B216
B215
B214
B213
B212
B211
B210
B209
B208
B207
B206
B205
B204
B203
B202
B201
B200
B190
B189
B185
B184
B183
B182
B181
B180
B179
B178
B177
B174
B172
B171
B170
B169
B168
B167
B166
B165
B164
B161
B160
B158
B157
B155
B154
B153
B152
B150
B146
B142
B132
B109
B109
B108
B108
B107
B107
B106
B106
B105
B105
B089
B086
B083
B082
B079
B064
B063
B056
B049
B047
B034
B022
B019
B018
B009
B008
B007
B006
B005A
B005
B004
B003
B002
B001
AYAH
AVESTA
AVERAG
AVAKRAHASANYA
AVAGRAHA
AUYANNA
AUTUMN
AUSTRA
AURAMAZDAAHA
AURAMAZDAA-2
AURAMAZDAA
AUNN
AUGUST
AUGMENTATIO
ATTI
ATTHACAN
ATTENTION
ATTA
ATNA
ATMAAU
ATIYA
ATHARVAVEDI
ATHAPASCA
ASYUR
ASYMPTOTICALL
ASTROLOGICA
ASTERISM
ASTERISK
ASTERISK
ASTERIS
ASTERISCUS
ASSYRIA
ASSERTION
ASPIRATE
ASPER
ASHGAB
ASH9
ASCENT
ASCENDIN
ASAL2
ARUHUA
ARTAB
ARSEOS
ARSEO
ARROWS
ARROWHEAD
ARROWHEA
ARROW-TAIL
ARRIVE
ARRAY
ARPEGGIAT
AROUSIN
AROUR
AROUND-PROFILE
AROUN
ARMY
ARMOUR
ARLAU
ARKTIK
ARKAB
ARKAANU
ARISTERA
ARISTER
ARIES
ARGOTERI
ARGOSYNTHETON
ARGI
AREPA
ARDHAVISARGA
ARCHAION
ARCHAIO
ARCHAI
ARAMAI
ARAEAE
ARAEA-U
ARAEA-I
ARAEA-EO
ARAEA-E
ARAEA-A
ARAD
ARABIC-INDI
ARABIA
AR-RAHMA
AR-RAHEEM
AQUARIUS
APRIL
APPROXIMATEL
APPROXIMATE
APPROACHE
APPROACH
APPLICATION
APOTHES
APOTHEMA
APOSTROPHE
APOSTROFOS
APOSTROFO
APOSTROFO
APODEXIA
APODERM
APLOUN
APIN
APES
APART
APAATO
ANUSVARAYA
ANUSVARA
ANUSVAR
ANUDATTA
ANUDATT
ANTIRESTRICTION
ANTIKENOMA
ANTIKENOKYLISMA
ANTIFONIA
ANTICLOCKWISE-ROTATE
ANTICLOCKWIS
ANTARGOMUKHA
ANSU
ANSHE
ANPEA
ANNUIT
ANNOTATIO
ANNAAU
ANKH
ANHU
ANGULAR
ANGSTRO
ANGKHANKHU
ANGED
ANDAP
ANCORA
ANCHOR
ANATRICHISMA
ANAP
AMPS
AMPERSAND
AMOUN
AMAR
AMALGAMATIO
ALVEOLA
ALTERNATIV
ALTERNATIO
ALTERNAT
ALTA
ALPHA
ALPH
ALPAPRANA
ALPAPRAAN
ALPA
ALMOS
ALLO
ALLIANCE
ALLA
ALIGNE
ALIFU
ALGI
ALFA
ALEU
ALEPH
ALEMBIC
ALEF
ALAYHE
ALAYH
ALAPH
AL-LAKUNA
AKTIESELSKAB
AKHMIMI
AKBA
AKARA
AKAR
AIYANNA
AIVILI
AITO
AIRPLANE
AINN
AILM
AIKARA
AIHVUS
AHSDA
AHSA
AHAGGA
AHAD
AGUNG
AGOG
AGGRAVATION
AGGRAVATE
AGAIN
AFTE
AFSAAQ
AFRICA
AFOREMENTIONED
AFGHAN
AEYANNA
AESCULAPIUS
AESC
AELA-PILLA
AEGEA
AEEYANNA
AEDA-PILLA
ADVANCE
ADEG
ADDRESSE
ADDAK
ACUTE-MACRON
ACUTE-GRAVE-ACUTE
ACUT
ACTUALL
ACTIVAT
ACROPHONI
ACKNOWLEDGE
ACCUMULATION
ACCOUN
ACCENT-STACCATO
ACCENT
ACCEN
ACADEM
ABYSMA
ABUNDANCE
ABKHASIA
ABBREVIATIO
ABAFILI
AAYANNA
AABAAFILI
AA032
AA031
AA030
AA029
AA028
AA027
AA026
AA025
AA024
AA023
AA022
AA021
AA020
AA019
AA018
AA017
AA016
AA015
AA014
AA013
AA012
AA011
AA010
AA009
AA008
AA007B
AA007A
AA007
AA006
AA005
AA004
AA003
AA002
AA001
A070
A069
A068
A067
A066
A065
A064
A063
A062
A061
A060
A059
A058
A057
A056
A055
A054
A053
A052
A051
A050
A049
A048
A047
A046
A045A
A045
A044
A043A
A043
A042A
A042
A041
A040A
A040
A039
A038
A037
A036
A035
A034
A033
A032A
A017A
A014A
A006B
A006A
A005A
A-EU
-PHRU
-KHYU
-KHYIL
-DZU
-CHA
-CHAL
This module provides access to the Unicode Character Database which
defines character properties for all Unicode characters. The data in
this database is based on the UnicodeData.txt file version
5.2.0 which is publically available from ftp://ftp.unicode.org/.
The module uses the same names and symbols as defined by the
UnicodeData File Format 5.2.0 (see
http://www.unicode.org/reports/tr44/tr44-4.html).
xxsubtype is an example module showing how to subtype builtin types from C.
test_descr.py in the standard test suite requires it in order to complete.
If you don't care about the examples, and don't intend to run the Python
test suite, you can recompile Python without Modules/xxsubtype.c.
methodcaller(name, ...) --> methodcaller object
Return a callable object that calls the given method on its operand.
After f = methodcaller('name'), the call f(r) returns r.name().
After g = methodcaller('name', 'date', foo=1), the call g(r) returns
r.name('date', foo=1).
attrgetter(attr, ...) --> attrgetter object
Return a callable object that fetches the given attribute(s) from its operand.
After f = attrgetter('name'), the call f(r) returns r.name.
After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
After h = attrgetter('name.first', 'name.last'), the call h(r) returns
(r.name.first, r.name.last).
itemgetter(item, ...) --> itemgetter object
Return a callable object that fetches the given item(s) from its operand.
After f = itemgetter(2), the call f(r) returns r[2].
After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
compare_digest(a, b) -> bool
Return 'a == b'.  This function uses an approach designed to prevent
timing analysis, making it appropriate for cryptography.
a and b must both be of the same type: either str (ASCII only),
or any type that supports the buffer protocol (e.g. bytes).
Note: If a and b are of different lengths, or if an error occurs,
a timing attack could theoretically reveal information about the
types and lengths of a and b--but not their values.
statvfs_result: Result from statvfs or fstatvfs.
This object may be accessed either as a tuple of
  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),
or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.
See os.statvfs for more information.
stat_result: Result from stat or lstat.
This object may be accessed either as a tuple of
  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)
or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.
Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,
or st_flags, they are available as attributes only.
See os.stat for more information.
urandom(n) -> str
Return n random bytes suitable for cryptographic use.
getresgid() -> (rgid, egid, sgid)
Get tuple of the current process's real, effective, and saved group ids.
getresuid() -> (ruid, euid, suid)
Get tuple of the current process's real, effective, and saved user ids.
setresgid(rgid, egid, sgid)
Set the current process's real, effective, and saved group ids.
setresuid(ruid, euid, suid)
Set the current process's real, effective, and saved user ids.
getloadavg() -> (float, float, float)
Return the number of processes in the system run queue averaged over
the last 1, 5, and 15 minutes or raises OSError if the load average
was unobtainable
abort() -> does not return!
Abort the interpreter immediately.  This 'dumps core' or otherwise fails
in the hardest way possible on the hosting operating system.
pathconf(path, name) -> integer
Return the configuration limit name for the file or directory path.
If there is no limit, return -1.
fpathconf(fd, name) -> integer
Return the configuration limit name for the file descriptor fd.
If there is no limit, return -1.
sysconf(name) -> integer
Return an integer-valued system configuration variable.
confstr(name) -> string
Return a string-valued system configuration variable.
tmpnam() -> string
Return a unique name for a temporary file.
tempnam([dir[, prefix]]) -> string
Return a unique name for a temporary file.
The directory and a prefix may be specified as strings; they may be omitted
or None if not needed.
tmpfile() -> file object
Create a temporary file with no directory entries.
statvfs(path) -> statvfs result
Perform a statvfs system call on the given path.
fstatvfs(fd) -> statvfs result
Perform an fstatvfs system call on the given fd.
WSTOPSIG(status) -> integer
Return the signal that stopped the process that provided
the 'status' value.
WTERMSIG(status) -> integer
Return the signal that terminated the process that provided the 'status'
value.
WEXITSTATUS(status) -> integer
Return the process return code from 'status'.
WIFEXITED(status) -> bool
Return true if the process returning 'status' exited using the exit()
system call.
WIFSIGNALED(status) -> bool
Return True if the process returning 'status' was terminated by a signal.
WIFSTOPPED(status) -> bool
Return True if the process returning 'status' was stopped.
WIFCONTINUED(status) -> bool
Return True if the process returning 'status' was continued from a
job control stop.
WCOREDUMP(status) -> bool
Return True if the process returning 'status' was dumped to a core file.
fdatasync(fildes)
force write of file with filedescriptor to disk.
 does not force update of metadata.
fsync(fildes)
force write of file with filedescriptor to disk.
fchdir(fildes)
Change to the directory of the given file descriptor.  fildes must be
opened on a directory, not a file.
strerror(code) -> string
Translate an error code to a message string.
unsetenv(key)
Delete an environment variable.
putenv(key, value)
Change or add an environment variable.
ftruncate(fd, length)
Truncate a file to a specified length.
makedev(major, minor) -> device number
Composes a raw device number from the major and minor device numbers.
minor(device) -> minor number
Extracts a device minor number from a raw device number.
major(device) -> major number
Extracts a device major number from a raw device number.
mknod(filename [, mode=0600, device])
Create a filesystem node (file, device special file or named pipe)
named filename. mode specifies both the permissions to use and the
type of node to be created, being combined (bitwise OR) with one of
S_IFREG, S_IFCHR, S_IFBLK, and S_IFIFO. For S_IFCHR and S_IFBLK,
device defines the newly created device special file (probably using
os.makedev()), otherwise it is ignored.
mkfifo(filename [, mode=0666])
Create a FIFO (a POSIX named pipe).
pipe() -> (read_end, write_end)
Create a pipe.
isatty(fd) -> bool
Return True if the file descriptor 'fd' is an open file descriptor
connected to the slave end of a terminal.
fdopen(fd [, mode='r' [, bufsize]]) -> file_object
Return an open file object connected to a file descriptor.
fstat(fd) -> stat result
Like stat(), but for an open file descriptor.
write(fd, string) -> byteswritten
Write a string to a file descriptor.
read(fd, buffersize) -> string
Read a file descriptor.
lseek(fd, pos, how) -> newpos
Set the current position of a file descriptor.
Return the new cursor position in bytes, starting from the beginning.
dup2(old_fd, new_fd)
Duplicate file descriptor.
dup(fd) -> fd2
Return a duplicate of a file descriptor.
closerange(fd_low, fd_high)
Closes all file descriptors in [fd_low, fd_high), ignoring errors.
close(fd)
Close a file descriptor (for low level IO).
open(filename, flag [, mode=0777]) -> fd
Open a file (for low level IO).
tcsetpgrp(fd, pgid)
Set the process group associated with the terminal given by a fd.
tcgetpgrp(fd) -> pgid
Return the process group associated with the terminal given by a fd.
setpgid(pid, pgrp)
Call the system call setpgid().
setsid()
Call the system call setsid().
getsid(pid) -> sid
Call the system call getsid().
waitpid(pid, options) -> (pid, status)
Wait for completion of a given child process.
wait4(pid, options) -> (pid, status, rusage)
Wait for completion of a given child process.
wait3(options) -> (pid, status, rusage)
Wait for completion of a child process.
wait() -> (pid, status)
Wait for completion of a child process.
setpgrp()
Make this process the process group leader.
getpgid(pid) -> pgid
Call the system call getpgid().
initgroups(username, gid) -> None
Call the system initgroups() to initialize the group access list with all of
the groups of which the specified username is a member, plus the specified
group id.
setgroups(list)
Set the groups of the current process to list.
setgid(gid)
Set the current process's group id.
setregid(rgid, egid)
Set the current process's real and effective group ids.
setreuid(ruid, euid)
Set the current process's real and effective user ids.
setegid(gid)
Set the current process's effective group id.
seteuid(uid)
Set the current process's effective user id.
setuid(uid)
Set the current process's user id.
popen(command [, mode='r' [, bufsize]]) -> pipe
Open a pipe to/from a command returning a file object.
killpg(pgid, sig)
Kill a process group with a signal.
kill(pid, sig)
Kill a process with a signal.
getlogin() -> string
Return the actual login name.
getuid() -> uid
Return the current process's user id.
getppid() -> ppid
Return the parent's process id.
getpgrp() -> pgrp
Return the current process group id.
getpid() -> pid
Return the current process id
getgroups() -> list of group IDs
Return list of supplemental group IDs for the process.
getgid() -> gid
Return the current process's group id.
geteuid() -> euid
Return the current process's effective user id.
getegid() -> egid
Return the current process's effective group id.
forkpty() -> (pid, master_fd)
Fork a new process with a new pseudo-terminal as controlling tty.
Like fork(), return 0 as pid to child process, and PID of child to parent.
To both, return fd of newly opened pseudo-terminal.
openpty() -> (master_fd, slave_fd)
Open a pseudo-terminal, returning open fd's for both master and slave end.
fork() -> pid
Fork a child process.
Return 0 to child process and PID of child to parent process.
execve(path, args, env)
Execute a path with arguments and environment, replacing current process.
    path: path of executable file
    args: tuple or list of arguments
    env: dictionary of strings mapping to strings
execv(path, args)
Execute an executable path with arguments, replacing current process.
    path: path of executable file
    args: tuple or list of strings
_exit(status)
Exit to the system with specified status, without normal exit processing.
times() -> (utime, stime, cutime, cstime, elapsed_time)
Return a tuple of floating point numbers indicating process times.
utime(path, (atime, mtime))
utime(path, None)
Set the access and modified time of the file to the given values.  If the
second form is used, set the access and modified times to the current time.
remove(path)
Remove a file (same as unlink(path)).
unlink(path)
Remove a file (same as remove(path)).
uname() -> (sysname, nodename, release, version, machine)
Return a tuple identifying the current operating system.
umask(new_mask) -> old_mask
Set the current numeric umask and return the previous umask.
system(command) -> exit_status
Execute the command (a string) in a subshell.
symlink(src, dst)
Create a symbolic link pointing to src named dst.
stat_float_times([newval]) -> oldval
Determine whether os.[lf]stat represents time stamps as float objects.
If newval is True, future calls to stat() return floats, if it is False,
future calls return ints. 
If newval is omitted, return the current setting.
stat(path) -> stat result
Perform a stat system call on the given path.
rmdir(path)
Remove a directory.
rename(old, new)
Rename a file or directory.
readlink(path) -> path
Return a string representing the path to which the symbolic link points.
nice(inc) -> new_priority
Decrease the priority of process by inc and return the new priority.
mkdir(path [, mode=0777])
Create a directory.
lstat(path) -> stat result
Like stat(path), but do not follow symbolic links.
listdir(path) -> list_of_strings
Return a list containing the names of the entries in the directory.
    path: path of directory to list
The list is in arbitrary order.  It does not include the special
entries '.' and '..' even if they are present in the directory.
link(src, dst)
Create a hard link to a file.
getcwdu() -> path
Return a unicode string representing the current working directory.
getcwd() -> path
Return a string representing the current working directory.
ctermid() -> string
Return the name of the controlling terminal for this process.
chroot(path)
Change root directory to path.
lchown(path, uid, gid)
Change the owner and group id of path to the numeric uid and gid.
This function will not follow symbolic links.
fchown(fd, uid, gid)
Change the owner and group id of the file given by file descriptor
fd to the numeric uid and gid.
chown(path, uid, gid)
Change the owner and group id of path to the numeric uid and gid.
fchmod(fd, mode)
Change the access permissions of the file given by file
descriptor fd.
chmod(path, mode)
Change the access permissions of a file.
chdir(path)
Change the current working directory to the specified path.
ttyname(fd) -> string
Return the name of the terminal device connected to 'fd'.
access(path, mode) -> True if granted, False otherwise
Use the real uid/gid to test for access to a path.  Note that most
operations will use the effective uid/gid, therefore this routine can
be used in a suid/sgid environment to test if the invoking user has the
specified access to the path.  The mode argument can be F_OK to test
existence, or the inclusive-OR of R_OK, W_OK, and X_OK.
pwd.struct_passwd: Results from getpw*() routines.
This object may be accessed either as a tuple of
  (pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell)
or via the object attributes as named in the above tuple.
getpwall() -> list_of_entries
Return a list of all available password database entries, in arbitrary order.
See help(pwd) for more on password database entries.
getpwnam(name) -> (pw_name,pw_passwd,pw_uid,
                    pw_gid,pw_gecos,pw_dir,pw_shell)
Return the password database entry for the given user name.
See help(pwd) for more on password database entries.
getpwuid(uid) -> (pw_name,pw_passwd,pw_uid,
                  pw_gid,pw_gecos,pw_dir,pw_shell)
Return the password database entry for the given numeric user ID.
See help(pwd) for more on password database entries.
poll( [timeout] ) -> list of (fd, event) 2-tuples
Polls the set of registered file descriptors, returning a list containing 
any descriptors that have events or errors to report.
unregister(fd) -> None
Remove a file descriptor being tracked by the polling object.
modify(fd, eventmask) -> None
Modify an already registered file descriptor.
fd -- either an integer, or an object with a fileno() method returning an
      int.
events -- an optional bitmask describing the type of events to check for
register(fd [, eventmask] ) -> None
Register a file descriptor with the polling object.
fd -- either an integer, or an object with a fileno() method returning an
      int.
events -- an optional bitmask describing the type of events to check for
poll([timeout=-1[, maxevents=-1]]) -> [(fd, events), (...)]
Wait for events on the epoll file descriptor for a maximum time of timeout
in seconds (as float). -1 makes poll wait indefinitely.
Up to maxevents are returned to the caller.
unregister(fd) -> None
fd is the target file descriptor of the operation.
register(fd[, eventmask]) -> None
Registers a new fd or raises an IOError if the fd is already registered.
fd is the target file descriptor of the operation.
events is a bit set composed of the various EPOLL constants; the default
is EPOLL_IN | EPOLL_OUT | EPOLL_PRI.
The epoll interface supports all file descriptors that support poll.
modify(fd, eventmask) -> None
fd is the target file descriptor of the operation
events is a bit set composed of the various EPOLL constants
fileno() -> int
Return the epoll control file descriptor.
close() -> None
Close the epoll control file descriptor. Further operations on the epoll
object will raise an exception.
fromfd(fd) -> epoll
Create an epoll object from a given control fd.
select.epoll([sizehint=-1])
Returns an epolling object
sizehint must be a positive integer or -1 for the default size. The
sizehint is used to optimize internal data structures. It doesn't limit
the maximum number of monitored events.
Returns a polling object, which supports registering and
unregistering file descriptors, and then polling them for I/O events.
select(rlist, wlist, xlist[, timeout]) -> (rlist, wlist, xlist)
Wait until one or more file descriptors are ready for some kind of I/O.
The first three arguments are sequences of file descriptors to be waited for:
rlist -- wait until ready for reading
wlist -- wait until ready for writing
xlist -- wait for an ``exceptional condition''
If only one kind of condition is required, pass [] for the other lists.
A file descriptor is either a socket or file object, or a small integer
gotten from a fileno() method call on one of those.
The optional 4th argument specifies a timeout in seconds; it may be
a floating point number to specify fractions of seconds.  If it is absent
or None, the call will never time out.
The return value is a tuple of three lists corresponding to the first three
arguments; each contains the subset of the corresponding file descriptors
that are ready.
*** IMPORTANT NOTICE ***
On Windows and OpenVMS, only sockets are supported; on Unix, all file
descriptors can be used.
Update this hash object's state with the provided string.
Return the digest value as a string of hexadecimal digits.
Return the digest value as a string of binary data.
Return a copy of the hash object.
Return a new SHA-224 hash object; optionally initialized with a string.
Return a new SHA-256 hash object; optionally initialized with a string.
Operator interface.
This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience.
This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).  Refer to the library manual and
corresponding Unix manual entries for more information on calls.
This module provides access to the Unix password database.
It is available on all Unix versions.
Password database entries are reported as 7-tuples containing the following
items from the password database (see `<pwd.h>'), in order:
pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell.
The uid and gid items are integers, all others are strings. An
exception is raised if the entry asked for cannot be found.
This module supports asynchronous I/O on multiple file descriptors.
*** IMPORTANT NOTICE ***
On Windows and OpenVMS, only sockets are supported; on Unix, all file descriptors.
A buffered reader and writer object together.
A buffered reader object and buffered writer object put together to
form a sequential IO object that can read and write. This is typically
used with a socket or two-way pipe.
reader and writer are RawIOBase objects that are readable and
writeable respectively. If the buffer_size is omitted it defaults to
DEFAULT_BUFFER_SIZE.
truncate([size]) -> int.  Truncate the file to at most size bytes.
Size defaults to the current file position, as returned by tell().
The current file position is unchanged.  Returns the new size.
seek(pos, whence=0) -> int.  Change stream position.
Seek to byte offset pos relative to position indicated by whence:
     0  Start of stream (the default).  pos should be >= 0;
     1  Current position - pos may be negative;
     2  End of stream - pos usually negative.
Returns the new absolute position.
getvalue() -> bytes.
Retrieve the entire contents of the BytesIO object.
read([size]) -> read at most size bytes, returned as a string.
If the size argument is negative, read until EOF is reached.
Return an empty string at EOF.
readlines([size]) -> list of strings, each a line from the file.
Call readline() repeatedly and return a list of the lines so read.
The optional size argument, if given, is an approximate bound on the
total number of bytes in the lines returned.
readline([size]) -> next line from the file, as a string.
Retain newline.  A non-negative size argument limits the maximum
number of bytes to return (an incomplete line may be returned then).
Return an empty string at EOF.
readinto(bytearray) -> int.  Read up to len(b) bytes into b.
Returns number of bytes read (0 for EOF), or None if the object
is set not to block as has no data to read.
read1(size) -> read at most size bytes, returned as a string.
If the size argument is negative or omitted, read until EOF is reached.
Return an empty string at EOF.
writelines(sequence_of_strings) -> None.  Write strings to the file.
Note that newlines are not added.  The sequence can be any iterable
object producing strings. This is equivalent to calling write() for
each string.
write(bytes) -> int.  Write bytes to file.
Return the number of bytes written.
tell() -> current file position, an integer
isatty() -> False.
Always returns False since BytesIO objects are not connected
to a tty-like device.
flush() -> None.  Does nothing.
close() -> None.  Disable all I/O operations.
writable() -> bool. Returns True if the IO object can be written.
seekable() -> bool. Returns True if the IO object can be seeked.
readable() -> bool. Returns True if the IO object can be read.
BytesIO([buffer]) -> object
Create a buffered I/O implementation using an in-memory bytes
buffer, ready for reading and writing.
LSVt1)
0eaususboi(cQPbR
ascii
Low-level inferface to warnings functionality.
Issue a warning, or maybe ignore it or raise an exception.
_warnings provides basic warning filtering support.
It is a helper module to speed up interpreter start-up.
S.__sizeof__() -> size of S in memory, in bytes
S.unpack_from(buffer[, offset]) -> (v1, v2, ...)
Return tuple containing values unpacked according to this Struct's format.
Unlike unpack, unpack_from can unpack values from any object supporting
the buffer API, not just str. Requires len(buffer[offset:]) >= self.size.
See struct.__doc__ for more on format strings.
S.unpack(str) -> (v1, v2, ...)
Return tuple containing values unpacked according to this Struct's format.
Requires len(str) == self.size. See struct.__doc__ for more on format
strings.
S.pack_into(buffer, offset, v1, v2, ...)
Pack the values v1, v2, ... according to this Struct's format, write 
the packed bytes into the writable buffer buf starting at offset.  Note
that the offset is not an optional argument.  See struct.__doc__ for 
more on format strings.
S.pack(v1, v2, ...) -> string
Return a string containing values v1, v2, ... packed according to this
Struct's format. See struct.__doc__ for more on format strings.
Compiled struct object
Unpack the buffer, containing packed C structure data, according to
fmt, starting at offset. Requires len(buffer[offset:]) >= calcsize(fmt).
Unpack the string containing packed C structure data, according to fmt.
Requires len(string) == calcsize(fmt).
Pack the values v1, v2, ... according to fmt.
Write the packed bytes into the writable buffer buf starting at offset.
Return string containing values v1, v2, ... packed according to fmt.
Return size of C struct described by format string fmt.
Clear the internal cache.
proxy(object[, callback]) -- create a proxy object that weakly
references 'object'.  'callback', if given, is called with a
reference to the proxy when 'object' is about to be finalized.
getweakrefs(object) -- return a list of all weak reference objects
that point to 'object'.
getweakrefcount(object) -- return the number of weak references
to 'object'.
__sizeof__() -> int
Size of the array in memory, in bytes.
tounicode() -> unicode
Convert the array to a unicode string.  The array must be
a type 'u' array; otherwise a ValueError is raised.  Use
array.tostring().decode() to obtain a unicode string from
an array of some other type.
tostring() -> string
Convert the array to an array of machine values and return the string
representation.
tolist() -> list
Convert array to an ordinary list with the same items.
tofile(f)
Write all items (as machine values) to the file object f.  Also called as
write.
reverse()
Reverse the order of the items in the array.
remove(x)
Remove the first occurrence of x in the array.
Return state information for pickling.
pop([i])
Return the i-th element and delete it from the array. i defaults to -1.
insert(i,x)
Insert a new item x into the array before position i.
index(x)
Return index of first occurrence of x in the array.
fromunicode(ustr)
Extends this array with data from the unicode string ustr.
The array must be a type 'u' array; otherwise a ValueError
is raised.  Use array.fromstring(ustr.decode(...)) to
append Unicode data to an array of some other type.
fromstring(string)
Appends items from the string, interpreting it as an array of machine
values,as if it had been read from a file using the fromfile() method).
fromlist(list)
Append items to array from list.
fromfile(f, n)
Read n objects from the file object f and append them to the end of the
array.  Also called as read.
extend(array or iterable)
 Append items to the end of the array.
count(x)
Return number of occurrences of x in the array.
copy(array)
 Return a copy of the array.
byteswap()
Byteswap all items of the array.  If the items in the array are not 1, 2,
4, or 8 bytes in size, RuntimeError is raised.
buffer_info() -> (address, length)
Return a tuple (address, length) giving the current memory address and
the length in items of the buffer used to hold array's contents
The length should be multiplied by the itemsize attribute to calculate
the buffer length in bytes.
append(x)
Append new value x to the end of the array.
array(typecode [, initializer]) -> array
Return a new array whose items are restricted by typecode, and
initialized from the optional initializer value, which must be a list,
string or iterable over elements of the appropriate type.
Arrays represent basic values and behave very much like lists, except
the type of objects stored in them is constrained.
Methods:
append() -- append a new item to the end of the array
buffer_info() -- return information giving the current memory info
byteswap() -- byteswap all the items of the array
count() -- return number of occurrences of an object
extend() -- extend array by appending multiple elements from an iterable
fromfile() -- read items from a file object
fromlist() -- append items from the list
fromstring() -- append items from the string
index() -- return index of first occurrence of an object
insert() -- insert a new item into the array at a provided position
pop() -- remove and return item (default last)
read() -- DEPRECATED, use fromfile()
remove() -- remove first occurrence of an object
reverse() -- reverse the order of the items in the array
tofile() -- write all items to a file object
tolist() -- return the array converted to an ordinary list
tostring() -- return the array converted to a string
write() -- DEPRECATED, use tofile()
Attributes:
typecode -- the typecode character used to create the array
itemsize -- the length in bytes of one array item
b2a_qp(data, quotetabs=0, istext=1, header=0) -> s; 
 Encode a string using quoted-printable encoding. 
On encoding, when istext is set, newlines are not encoded, and white 
space at end of lines is.  When istext is not set, \r and \n (CR/LF) are 
both encoded.  When quotetabs is set, space and tabs are encoded.
Decode a string of qp-encoded data
(data, oldcrc = 0) -> newcrc. Compute CRC-32 incrementally
(data, oldcrc) -> newcrc. Compute hqx CRC incrementally
Decode hexbin RLE-coded string
Binhex RLE-code binary data
a2b_hex(hexstr) -> s; Binary data of hexadecimal representation.
hexstr must contain an even number of hex digits (upper or lower case).
This function is also available as "unhexlify()"
b2a_hex(data) -> s; Hexadecimal representation of binary data.
This function is also available as "hexlify()".
Encode .hqx data
ascii -> bin, done. Decode .hqx coding
(bin) -> ascii. Base64-code line of data
(ascii) -> bin. Decode a line of base64 data
(bin) -> ascii. Uuencode line of data
(ascii) -> bin. Decode a line of uuencoded data
Functions to convert between Python values and C structs represented
as Python strings. It uses format strings (explained below) as compact
descriptions of the lay-out of the C structs and the intended conversion
to/from Python values.
The optional first format char indicates byte order, size and alignment:
  @: native order, size & alignment (default)
  =: native order, std. size & alignment
  <: little-endian, std. size & alignment
  >: big-endian, std. size & alignment
  !: same as >
The remaining chars indicate types of args and must match exactly;
these can be preceded by a decimal repeat count:
  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;
  ?: _Bool (requires C99; if not available, char is used instead)
  h:short; H:unsigned short; i:int; I:unsigned int;
  l:long; L:unsigned long; f:float; d:double.
Special cases (preceding decimal count indicates length):
  s:string (array of char); p: pascal string (with count byte).
Special case (only available in native format):
  P:an integer type that is wide enough to hold a pointer.
Special case (not in native mode unless 'long long' in platform C):
  q:long long; Q:unsigned long long
Whitespace between formats is ignored.
The variable struct.error is an exception raised on errors.
This module defines an object type which can efficiently represent
an array of basic values: characters, integers, floating point
numbers.  Arrays are sequence types and behave very much like lists,
except that the type of objects stored in them is constrained.  The
type is specified at object creation time by using a type code, which
is a single character.  The following type codes are defined:
    Type code   C Type             Minimum size in bytes 
    'c'         character          1 
    'b'         signed integer     1 
    'B'         unsigned integer   1 
    'u'         Unicode character  2 
    'h'         signed integer     2 
    'H'         unsigned integer   2 
    'i'         signed integer     2 
    'I'         unsigned integer   2 
    'l'         signed integer     4 
    'L'         unsigned integer   4 
    'f'         floating point     4 
    'd'         floating point     8 
The constructor is:
array(typecode [, initializer]) -- create a new array
Conversion between binary data and ASCII
Find the n smallest elements in a dataset.
Equivalent to:  sorted(iterable)[:n]
Find the n largest elements in a dataset.
Equivalent to:  sorted(iterable, reverse=True)[:n]
Transform list into a heap, in-place, in O(len(heap)) time.
heapreplace(heap, item) -> value. Pop and return the current smallest value, and add the new item.
This is more efficient than heappop() followed by heappush(), and can be
more appropriate when using a fixed-size heap.  Note that the value
returned may be larger than item!  That constrains reasonable uses of
this routine unless written as part of a conditional replacement:
    if item > heap[0]:
        item = heapreplace(heap, item)
Pop the smallest item off the heap, maintaining the heap invariant.
heappushpop(heap, item) -> value. Push item on the heap, then pop and return the smallest item
from the heap. The combined action runs more efficiently than
heappush() followed by a separate call to heappop().
heappush(heap, item) -> None. Push item onto heap, maintaining the heap invariant.
Open file and return a stream.  Raise IOError upon failure.
file is either a text or byte string giving the name (and the path
if the file isn't in the current working directory) of the file to
be opened or an integer file descriptor of the file to be
wrapped. (If a file descriptor is given, it is closed when the
returned I/O object is closed, unless closefd is set to False.)
mode is an optional string that specifies the mode in which the file
is opened. It defaults to 'r' which means open for reading in text
mode.  Other common values are 'w' for writing (truncating the file if
it already exists), and 'a' for appending (which on some Unix systems,
means that all writes append to the end of the file regardless of the
current seek position). In text mode, if encoding is not specified the
encoding used is platform dependent. (For reading and writing raw
bytes use binary mode and leave encoding unspecified.) The available
modes are:
========= ===============================================================
Character Meaning
--------- ---------------------------------------------------------------
'r'       open for reading (default)
'w'       open for writing, truncating the file first
'a'       open for writing, appending to the end of the file if it exists
'b'       binary mode
't'       text mode (default)
'+'       open a disk file for updating (reading and writing)
'U'       universal newline mode (for backwards compatibility; unneeded
          for new code)
========= ===============================================================
The default mode is 'rt' (open for reading text). For binary random
access, the mode 'w+b' opens and truncates the file to 0 bytes, while
'r+b' opens the file without truncation.
Python distinguishes between files opened in binary and text modes,
even when the underlying operating system doesn't. Files opened in
binary mode (appending 'b' to the mode argument) return contents as
bytes objects without any decoding. In text mode (the default, or when
't' is appended to the mode argument), the contents of the file are
returned as strings, the bytes having been first decoded using a
platform-dependent encoding or using the specified encoding if given.
buffering is an optional integer used to set the buffering policy.
Pass 0 to switch buffering off (only allowed in binary mode), 1 to select
line buffering (only usable in text mode), and an integer > 1 to indicate
the size of a fixed-size chunk buffer.  When no buffering argument is
given, the default buffering policy works as follows:
* Binary files are buffered in fixed-size chunks; the size of the buffer
  is chosen using a heuristic trying to determine the underlying device's
  "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.
  On many systems, the buffer will typically be 4096 or 8192 bytes long.
* "Interactive" text files (files for which isatty() returns True)
  use line buffering.  Other text files use the policy described above
  for binary files.
encoding is the name of the encoding used to decode or encode the
file. This should only be used in text mode. The default encoding is
platform dependent, but any encoding supported by Python can be
passed.  See the codecs module for the list of supported encodings.
errors is an optional string that specifies how encoding errors are to
be handled---this argument should not be used in binary mode. Pass
'strict' to raise a ValueError exception if there is an encoding error
(the default of None has the same effect), or pass 'ignore' to ignore
errors. (Note that ignoring encoding errors can lead to data loss.)
See the documentation for codecs.register for a list of the permitted
encoding error strings.
newline controls how universal newlines works (it only applies to text
mode). It can be None, '', '\n', '\r', and '\r\n'.  It works as
follows:
* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.
* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '', no translation takes place. If newline is any of the
  other legal values, any '\n' characters written are translated to
  the given string.
If closefd is False, the underlying file descriptor will be kept open
when the file is closed. This does not work when a file name is given
and must be True in that case.
open() returns a file object whose type depends on the mode, and
through which the standard file operations such as reading and writing
are performed. When open() is used to open a file in a text mode ('w',
'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open
a file in a binary mode, the returned class varies: in read binary
mode, it returns a BufferedReader; in write binary and append binary
modes, it returns a BufferedWriter, and in read/write mode, it returns
a BufferedRandom.
It is also possible to use a string or bytearray as a file for both
reading and writing. For strings StringIO can be used like a file
opened in a text mode, and for bytes a BytesIO can be used like a file
opened in a binary mode.
bind_textdomain_codeset(domain, codeset) -> string
Bind the C library's domain to codeset.
bindtextdomain(domain, dir) -> string
Bind the C library's domain to dir.
textdomain(domain) -> string
Set the C library's textdmain to domain, returning the new domain.
dcgettext(domain, msg, category) -> string
Return translation of msg in domain and category.
dgettext(domain, msg) -> string
Return translation of msg in domain.
gettext(msg) -> string
Return translation of msg.
nl_langinfo(key) -> string
Return the value for the locale information associated with key.
string -> string. Returns a string that behaves for cmp locale-aware.
string,string -> int. Compares two strings according to the locale.
() -> dict. Returns numeric and monetary locale-specific parameters.
(integer,string=None) -> string. Activates/queries locale processing.
Random() -> create a random number generator with its own internal state.
finditer(string[, pos[, endpos]]) --> iterator.
    Return an iterator over all non-overlapping matches for the 
    RE pattern in string. For each match, the iterator returns a
    match object.
findall(string[, pos[, endpos]]) --> list.
   Return a list of all non-overlapping matches of pattern in string.
split(string[, maxsplit = 0])  --> list.
    Split string by the occurrences of pattern.
subn(repl, string[, count = 0]) --> (newstring, number of subs)
    Return the tuple (new_string, number_of_subs_made) found by replacing
    the leftmost non-overlapping occurrences of pattern with the
    replacement repl.
sub(repl, string[, count = 0]) --> newstring
    Return the string obtained by replacing the leftmost non-overlapping
    occurrences of pattern in string by the replacement repl.
search(string[, pos[, endpos]]) --> match object or None.
    Scan through string looking for a match, and return a corresponding
    match object instance. Return None if no position in the string matches.
match(string[, pos[, endpos]]) --> match object or None.
    Matches zero or more characters at the beginning of the string
Compiled regular expression objects
expand(template) -> str.
    Return the string obtained by doing backslash substitution
    on the string template, as done by the sub() method.
groupdict([default=None]) -> dict.
    Return a dictionary containing all the named subgroups of the match,
    keyed by the subgroup name. The default argument is used for groups
    that did not participate in the match
groups([default=None]) -> tuple.
    Return a tuple containing all the subgroups of the match, from 1.
    The default argument is used for groups
    that did not participate in the match
span([group]) -> tuple.
    For MatchObject m, return the 2-tuple (m.start(group), m.end(group)).
end([group=0]) -> int.
    Return index of the end of the substring matched by group.
start([group=0]) -> int.
    Return index of the start of the substring matched by group.
group([group1, ...]) -> str or tuple.
    Return subgroup(s) of the match by indices or names.
    For 0 returns the entire match.
The result of re.match() and re.search().
Match objects always have a boolean value of True.
Heap queues
[explanation by Fran
ois Pinard]
Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.
The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are `k', not a[k]:
                                   0
                  1                                 2
          3               4                5               6
      7       8       9       10      11      12      13      14
    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30
In the tree above, each cell `k' is topping `2*k+1' and `2*k+2'.  In
an usual binary tournament we see in sports, each cell is the winner
over the two cells it tops, and we can trace the winner down the tree
to see all opponents s/he had.  However, in many computer applications
of such tournaments, we do not need to trace the history of a winner.
To be more memory efficient, when a winner is promoted, we try to
replace it by something else at a lower level, and the rule becomes
that a cell and the two cells it tops contain three different items,
but the top cell "wins" over the two topped cells.
If this heap invariant is protected at all time, index 0 is clearly
the overall winner.  The simplest algorithmic way to remove it and
find the "next" winner is to move some loser (let's say cell 30 in the
diagram above) into the 0 position, and then percolate this new 0 down
the tree, exchanging values, until the invariant is re-established.
This is clearly logarithmic on the total number of items in the tree.
By iterating over all items, you get an O(n ln n) sort.
A nice feature of this sort is that you can efficiently insert new
items while the sort is going on, provided that the inserted items are
not "better" than the last 0'th element you extracted.  This is
especially useful in simulation contexts, where the tree holds all
incoming events, and the "win" condition means the smallest scheduled
time.  When an event schedule other events for execution, they are
scheduled into the future, so they can easily go into the heap.  So, a
heap is a good structure for implementing schedulers (this is what I
used for my MIDI sequencer :-).
Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy,
the speed is almost constant, and the worst case is not much different
than the average case.  However, there are other representations which
are more efficient overall, yet the worst cases might be terrible.
Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, which size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often
very cleverly organised[1].  It is very important that the initial
sort produces the longest runs possible.  Tournaments are a good way
to that.  If, using all the memory available to hold a tournament, you
replace and percolate items that happen to fit the current run, you'll
produce runs which are twice the size of the memory for random input,
and much better for input fuzzily ordered.
Moreover, if you output the 0'th item on disk and get an input which
may not fit in the current tournament (because the value "wins" over
the last output value), it cannot fit in the heap, so the size of the
heap decreases.  The freed memory could be cleverly reused immediately
for progressively building a second heap, which grows at exactly the
same rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!
In a word, heaps are useful memory structures to know.  I use them in
a few applications, and I think it is good to keep a `heap' module
around. :-)
--------------------
[1] The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big
tape drives, the story was quite different, and one had to be very
clever to ensure (far in advance) that each tape movement will be the
most effective possible (that is, will best participate at
"progressing" the merge).  Some tapes were even able to read
backwards, and this was also used to avoid the rewinding time.
Believe me, real good tape sorts were quite spectacular to watch!
From all times, sorting has always been a Great Art! :-)
Heap queue algorithm (a.k.a. priority queue).
Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.
Usage:
heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged
Our API differs from textbook heap algorithms as follows:
- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.
- Our heappop() method returns the smallest item, not the largest.
These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.
At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an IOError if they do not support a given operation.
Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.
BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.
Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is a in-memory stream for text.
Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.
data:
DEFAULT_BUFFER_SIZE
   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
Support for POSIX locales.
Module implements the Mersenne Twister random number generator.
 SRE 2.2.2 Copyright (c) 1997-2002 by Secret Labs AB 
release_lock() -> None
Release the interpreter's import lock.
On platforms without threads, this function does nothing.
acquire_lock() -> None
Acquires the interpreter's import lock for the current thread.
This lock should be used by import hooks to ensure thread-safety
when importing modules.
On platforms without threads, this function does nothing.
lock_held() -> boolean
Return True if the import lock is currently held, else False.
On platforms without threads, return False.
new_module(name) -> module
Create a new module.  Do not enter it in sys.modules.
The module name must include the full package name, if any.
load_module(name, file, filename, (suffix, mode, type)) -> module
Load a module, given information returned by find_module().
The module name must include the full package name, if any.
get_suffixes() -> [(suffix, mode, type), ...]
Return a list of (suffix, mode, type) tuples describing the files
that find_module() looks for.
get_magic() -> string
Return the magic number for .pyc or .pyo files.
find_module(name, [path]) -> (file, filename, (suffix, mode, type))
Search for a module.  If path is omitted or None, search for a
built-in, frozen or special module and continue search in sys.path.
The module name cannot contain '.'; to search for a submodule of a
package, pass the submodule name and the package's __path__.
reload(module) -> module
Reload the module.  The module must have been successfully imported before.
This module provides the components needed to build your own
__import__ function.  Undocumented functions are obsolete.
get_referents(*objs) -> list
Return the list of objects that are directly referred to by objs.
get_referrers(*objs) -> list
Return the list of objects that directly refer to any of objs.
is_tracked(obj) -> bool
Returns true if the object is tracked by the garbage collector.
Simple atomic objects will return false.
get_objects() -> [...]
Return a list of objects tracked by the collector (excluding the list
returned).
collect([generation]) -> n
With no arguments, run a full collection.  The optional argument
may be an integer specifying which generation to collect.  A ValueError
is raised if the generation number is invalid.
The number of unreachable objects is returned.
get_threshold() -> (threshold0, threshold1, threshold2)
Return the current collection thresholds
set_threshold(threshold0, [threshold1, threshold2]) -> None
Sets the collection thresholds.  Setting threshold0 to zero disables
collection.
get_count() -> (count0, count1, count2)
Return the current collection counts
get_debug() -> flags
Get the garbage collection debugging flags.
set_debug(flags) -> None
Set the garbage collection debugging flags. Debugging information is
written to sys.stderr.
flags is an integer and can have the following bits turned on:
  DEBUG_STATS - Print statistics during collection.
  DEBUG_COLLECTABLE - Print collectable objects found.
  DEBUG_UNCOLLECTABLE - Print unreachable but uncollectable objects found.
  DEBUG_INSTANCES - Print instance objects.
  DEBUG_OBJECTS - Print objects other than instances.
  DEBUG_SAVEALL - Save objects to gc.garbage rather than freeing them.
  DEBUG_LEAK - Debug leaking programs (everything but STATS).
isenabled() -> status
Returns true if automatic garbage collection is enabled.
disable() -> None
Disable automatic garbage collection.
enable() -> None
Enable automatic garbage collection.
insort_left(a, x[, lo[, hi]])
Insert item x in list a, and keep it sorted assuming a is sorted.
If x is already in a, insert it to the left of the leftmost x.
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
bisect_left(a, x[, lo[, hi]]) -> index
Return the index where to insert item x in list a, assuming a is sorted.
The return value i is such that all e in a[:i] have e < x, and all e in
a[i:] have e >= x.  So if x already appears in the list, i points just
before the leftmost x already there.
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
insort(a, x[, lo[, hi]])
insort_right(a, x[, lo[, hi]])
Insert item x in list a, and keep it sorted assuming a is sorted.
If x is already in a, insert it to the right of the rightmost x.
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
bisect(a, x[, lo[, hi]]) -> index
bisect_right(a, x[, lo[, hi]]) -> index
Return the index where to insert item x in list a, assuming a is sorted.
The return value i is such that all e in a[:i] have e <= x, and all e in
a[i:] have e > x.  So if x already appears in the list, i points just
beyond the rightmost x already there
Optional args lo (default 0) and hi (default len(a)) bound the
slice of a to be searched.
lookup_error(errors) -> handler
Return the error handler for the specified error handling name
or raise a LookupError, if no handler exists under this name.
register_error(errors, handler)
Register the specified error handler under the name
errors. handler must be a callable object, that
will be called with an exception instance containing
information about the location of the encoding/decoding
error and must return a (replacement, new position) tuple.
decode(obj, [encoding[,errors]]) -> object
Decodes obj using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a ValueError. Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle ValueErrors.
encode(obj, [encoding[,errors]]) -> object
Encodes obj using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a ValueError. Other possible values are 'ignore', 'replace' and
'xmlcharrefreplace' as well as any other name registered with
codecs.register_error that can handle ValueErrors.
lookup(encoding) -> CodecInfo
Looks up a codec tuple in the Python codec registry and returns
a CodecInfo object.
register(search_function)
Register a codec search function. Search functions are expected to take
one argument, the encoding name in all lower case letters, and return
a tuple of functions (encoder, decoder, stream_reader, stream_writer)
(or a CodecInfo object).
Private method returning an estimate of len(list(it)).
D.copy() -> a shallow copy of D.
__missing__(key) # Called by __getitem__ for missing key; pseudo-code:
  if self.default_factory is None: raise KeyError((key,))
  self[key] = value = self.default_factory()
  return value
D.__sizeof__() -- size of D in memory, in bytes
Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left.
D.reverse() -- reverse *IN PLACE*
D.__reversed__() -- return a reverse iterator over the deque
D.remove(value) -- remove first occurrence of value.
Return state information for pickling.
Remove and return the leftmost element.
Remove and return the rightmost element.
Extend the left side of the deque with elements from the iterable
Extend the right side of the deque with elements from the iterable
D.count(value) -> integer -- return number of occurrences of value
Return a shallow copy of a deque.
Remove all elements from the deque.
Add an element to the left side of the deque.
Add an element to the right side of the deque.
defaultdict(default_factory[, ...]) --> dict with default factory
The default factory is called without arguments to produce
a new value when a key is not present, in __getitem__ only.
A defaultdict compares equal to a dict with the same items.
All remaining arguments are treated the same as if they were
passed to the dict constructor, including keyword arguments.
deque([iterable[, maxlen]]) --> deque object
Build an ordered collection with optimized access from its endpoints.
reduce(function, sequence[, initial]) -> value
Apply a function of two arguments cumulatively to the items of a sequence,
from left to right, so as to reduce the sequence to a single value.
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
of the sequence in the calculation, and serves as a default when the
sequence is empty.
partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
lib/python2.7
This module provides access to the garbage collector for reference cycles.
enable() -- Enable automatic garbage collection.
disable() -- Disable automatic garbage collection.
isenabled() -- Returns true if automatic collection is enabled.
collect() -- Do a full collection right now.
get_count() -- Return the current collection counts.
set_debug() -- Set debugging flags.
get_debug() -- Get debugging flags.
set_threshold() -- Set the collection thresholds.
get_threshold() -- Return the current the collection thresholds.
get_objects() -- Return a list of all objects tracked by the collector.
is_tracked() -- Returns true if a given object is tracked.
get_referrers() -- Return the list of objects that refer to an object.
get_referents() -- Return the list of objects that an object refers to.
Bisection algorithms.
This module provides support for maintaining a list in sorted order without
having to sort the list after each insertion. For long lists of items with
expensive comparison operations, this can be an improvement over the more
common approach.
High performance data structures.
- deque:        ordered collection accessible from endpoints only
- defaultdict:  dict subclass with a default value factory
Tools that operate on functions.
sys.long_info
A struct sequence that holds information about Python's
internal representation of integers.  The attributes are read only.
n_unnamed_fields
n_fields
n_sequence_fields
Abstract base class for time zone info objects.
time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object
All arguments are optional. tzinfo may be None, or an instance of
a tzinfo subclass. The remaining arguments may be ints or longs.
Difference between two datetime values.
datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
The year, month and day arguments are required. tzinfo may be None, or an
instance of a tzinfo subclass. The remaining arguments may be ints or longs.
date(year, month, day) --> date object
lockf (fd, operation, length=0, start=0, whence=0)
This is essentially a wrapper around the fcntl() locking calls.  fd is the
file descriptor of the file to lock or unlock, and operation is one of the
following values:
    LOCK_UN - unlock
    LOCK_SH - acquire a shared lock
    LOCK_EX - acquire an exclusive lock
When operation is LOCK_SH or LOCK_EX, it can also be bitwise ORed with
LOCK_NB to avoid blocking on lock acquisition.  If LOCK_NB is used and the
lock cannot be acquired, an IOError will be raised and the exception will
have an errno attribute set to EACCES or EAGAIN (depending on the operating
system -- for portability, check for either value).
length is the number of bytes to lock, with the default meaning to lock to
EOF.  start is the byte offset, relative to whence, to that the lock
starts.  whence is as with fileobj.seek(), specifically:
    0 - relative to the start of the file (SEEK_SET)
    1 - relative to the current buffer position (SEEK_CUR)
    2 - relative to the end of the file (SEEK_END)
flock(fd, operation)
Perform the lock operation op on file descriptor fd.  See the Unix 
manual page for flock(2) for details.  (On some systems, this function is
emulated using fcntl().)
ioctl(fd, op[, arg[, mutate_flag]])
Perform the operation op on file descriptor fd.  The values used for op
are operating system dependent, and are available as constants in the
fcntl or termios library modules, using the same names as used in the
relevant C header files.
The argument arg is optional, and defaults to 0; it may be an int or a
buffer containing character data (most likely a string or an array). 
If the argument is a mutable buffer (such as an array) and if the
mutate_flag argument (which is only allowed in this case) is true then the
buffer is (in effect) passed to the operating system and changes made by
the OS will be reflected in the contents of the buffer after the call has
returned.  The return value is the integer returned by the ioctl system
call.
If the argument is a mutable buffer and the mutable_flag argument is not
passed or is false, the behavior is as if a string had been passed.  This
behavior will change in future releases of Python.
If the argument is an immutable buffer (most likely a string) then a copy
of the buffer is passed to the operating system and the return value is a
string of the same length containing whatever the operating system put in
the buffer.  The length of the arg buffer in this case is not allowed to
exceed 1024 bytes.
If the arg given is an integer or if none is specified, the result value is
an integer corresponding to the return value of the ioctl call in the C
code.
fcntl(fd, op, [arg])
Perform the operation op on file descriptor fd.  The values used
for op are operating system dependent, and are available
as constants in the fcntl module, using the same names as used in
the relevant C header files.  The argument arg is optional, and
defaults to 0; it may be an int or a string.  If arg is given as a string,
the return value of fcntl is a string of that length, containing the
resulting value put in the arg buffer by the operating system.  The length
of the arg string is not allowed to exceed 1024 bytes.  If the arg given
is an integer or if none is specified, the result value is an integer
corresponding to the return value of the fcntl call in the C code.
This module makes available standard errno system symbols.
The value of each symbol is the corresponding integer value,
e.g., on most systems, errno.ENOENT equals the integer 2.
The dictionary errno.errorcode maps numeric codes to symbol names,
e.g., errno.errorcode[2] could be the string 'ENOENT'.
Symbols that are not relevant to the underlying system are not defined.
To map error codes to error messages, use the function os.strerror(),
e.g. os.strerror(2) could return 'No such file or directory'.
This module performs file control and I/O control on file 
descriptors.  It is an interface to the fcntl() and ioctl() Unix
routines.  File descriptors can be obtained with the fileno() method of
a file or socket object.
Python's standard exception class hierarchy.
Exceptions found here are defined both in the exceptions module and the
built-in namespace.  It is recommended that user-defined exceptions
inherit from Exception.  See the documentation for the exception
inheritance hierarchy.
sys.float_info
A structseq holding information about the float type. It contains low level
information about the precision and internal representation. Please study
your system's :file:`float.h` for more information.
Object wrapper with a custom sort key.
cmp() wrapper for sort with custom keys.
Private method returning an estimate of len(list(it)).
Private method returning an estimate of len(list(it)).
Update this hash object's state with the provided string.
Return the digest value as a string of hexadecimal digits.
Return the digest value as a string of binary data.
Return a copy of the hash object.
Return a new SHA-384 hash object; optionally initialized with a string.
Return a new SHA-512 hash object; optionally initialized with a string.
Update this hashing object's state with the provided string.
Return the digest value as a string of hexadecimal digits.
Return the digest value as a string of binary data.
Return a copy of the hashing object.
Return a new SHA hashing object.  An optional string argument
may be provided; if present, this string will be automatically
hashed.
default_int_handler(...)
The default handler for SIGINT installed by Python.
It raises KeyboardInterrupt.
pause()
Wait until a signal arrives.
siginterrupt(sig, flag) -> None
change system call restart behaviour: if flag is False, system calls
will be restarted when interrupted by signal sig, else system calls
will be interrupted.
set_wakeup_fd(fd) -> fd
Sets the fd to be written to (with '\0') when a signal
comes in.  A library can use this to wakeup select or poll.
The previous fd is returned.
The fd must be non-blocking.
getsignal(sig) -> action
Return the current action for the given signal.  The return value can be:
SIG_IGN -- if the signal is being ignored
SIG_DFL -- if the default action for the signal is in effect
None -- if an unknown handler is in effect
anything else -- the callable Python object used as a handler
signal(sig, action) -> action
Set the action for the given signal.  The action can be SIG_DFL,
SIG_IGN, or a callable Python object.  The previous action is
returned.  See getsignal() for possible return values.
*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.
getitimer(which)
Returns current value of given itimer.
setitimer(which, seconds[, interval])
Sets given itimer (one of ITIMER_REAL, ITIMER_VIRTUAL
or ITIMER_PROF) to fire after value seconds and after
that every interval seconds.
The itimer can be cleared by setting seconds to zero.
Returns old values as a tuple: (delay, interval).
alarm(seconds)
Arrange for SIGALRM to arrive after the given number of seconds.
shutdown(flag)
Shut down the reading side of the socket (flag == SHUT_RD), the writing side
of the socket (flag == SHUT_WR), or both ends (flag == SHUT_RDWR).
setsockopt(level, option, value)
Set a socket option.  See the Unix manual for level and option.
The value argument can either be an integer or a string.
gettimeout() -> timeout
Returns the timeout in seconds (float) associated with socket 
operations. A timeout of None indicates that timeouts on socket 
operations are disabled.
settimeout(timeout)
Set a timeout on socket operations.  'timeout' can be a float,
giving in seconds, or None.  Setting a timeout of None disables
the timeout feature and is equivalent to setblocking(1).
Setting a timeout of zero is the same as setblocking(0).
setblocking(flag)
Set the socket to blocking (flag is true) or non-blocking (false).
setblocking(True) is equivalent to settimeout(None);
setblocking(False) is equivalent to settimeout(0.0).
sendto(data[, flags], address) -> count
Like send(data, flags) but allows specifying the destination address.
For IP sockets, the address is a pair (hostaddr, port).
sendall(data[, flags])
Send a data string to the socket.  For the optional flags
argument, see the Unix manual.  This calls send() repeatedly
until all data is sent.  If an error occurs, it's impossible
to tell how much data has been sent.
send(data[, flags]) -> count
Send a data string to the socket.  For the optional flags
argument, see the Unix manual.  Return the number of bytes
sent; this may be less than len(data) if the network is busy.
recvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)
Like recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.
recvfrom(buffersize[, flags]) -> (data, address info)
Like recv(buffersize, flags) but also return the sender's address info.
recv_into(buffer, [nbytes[, flags]]) -> nbytes_read
A version of recv() that stores its data into a buffer rather than creating 
a new string.  Receive up to buffersize bytes from the socket.  If buffersize 
is not specified (or 0), receive up to the size available in the given buffer.
See recv() for documentation about the flags.
recv(buffersize[, flags]) -> data
Receive up to buffersize bytes from the socket.  For the optional flags
argument, see the Unix manual.  When no data is available, block until
at least one byte is available or until the remote end is closed.  When
the remote end is closed and all data is read, return the empty string.
makefile([mode[, buffersize]]) -> file object
Return a regular file object corresponding to the socket.
The mode and buffersize arguments are as for the built-in open() function.
listen(backlog)
Enable a server to accept connections.  The backlog argument must be at
least 0 (if it is lower, it is set to 0); it specifies the number of
unaccepted connections that the system will allow before refusing new
connections.
getsockopt(level, option[, buffersize]) -> value
Get a socket option.  See the Unix manual for level and option.
If a nonzero buffersize argument is given, the return value is a
string of that length; otherwise it is an integer.
getsockname() -> address info
Return the address of the local endpoint.  For IP sockets, the address
info is a pair (hostaddr, port).
getpeername() -> address info
Return the address of the remote endpoint.  For IP sockets, the address
info is a pair (hostaddr, port).
fileno() -> integer
Return the integer file descriptor of the socket.
dup() -> socket object
Return a new socket object connected to the same system resource.
connect_ex(address) -> errno
This is like connect(address), but returns an error code (the errno value)
instead of raising an exception when an error occurs.
connect(address)
Connect the socket to a remote address.  For IP sockets, the address
is a pair (host, port).
close()
Close the socket.  It cannot be used after this call.
bind(address)
Bind the socket to a local address.  For IP sockets, the address is a
pair (host, port); the host must refer to the local host. For raw packet
sockets the address is a tuple (ifname, proto [,pkttype [,hatype]])
accept() -> (socket object, address info)
Wait for an incoming connection.  Return a new socket representing the
connection, and the address of the client.  For IP sockets, the address
info is a pair (hostaddr, port).
setdefaulttimeout(timeout)
Set the default timeout in seconds (float) for new socket objects.
A value of None indicates that new socket objects have no timeout.
When the socket module is first imported, the default is None.
getdefaulttimeout() -> timeout
Returns the default timeout in seconds (float) for new socket objects.
A value of None indicates that new socket objects have no timeout.
When the socket module is first imported, the default is None.
getnameinfo(sockaddr, flags) --> (host, port)
Get host and port for a sockaddr.
getaddrinfo(host, port [, family, socktype, proto, flags])
    -> list of (family, socktype, proto, canonname, sockaddr)
Resolve host and port into addrinfo struct.
inet_ntop(af, packed_ip) -> string formatted IP address
Convert a packed IP address of the given family to string format.
inet_pton(af, ip) -> packed IP address string
Convert an IP address from string format to a packed string suitable
for use with low-level network functions.
inet_ntoa(packed_ip) -> ip_address_string
Convert an IP address from 32-bit packed binary format to string format
inet_aton(string) -> packed 32-bit IP representation
Convert an IP address in string format (123.45.67.89) to the 32-bit packed
binary format used in low-level network functions.
htonl(integer) -> integer
Convert a 32-bit integer from host to network byte order.
htons(integer) -> integer
Convert a 16-bit integer from host to network byte order.
ntohl(integer) -> integer
Convert a 32-bit integer from network to host byte order.
ntohs(integer) -> integer
Convert a 16-bit integer from network to host byte order.
socketpair([family[, type[, proto]]]) -> (socket object, socket object)
Create a pair of socket objects from the sockets returned by the platform
socketpair() function.
The arguments are the same as for socket() except the default family is
AF_UNIX if defined on the platform; otherwise, the default is AF_INET.
fromfd(fd, family, type[, proto]) -> socket object
Create a socket object from a duplicate of the given
file descriptor.
The remaining arguments are the same as for socket().
getprotobyname(name) -> integer
Return the protocol number for the named protocol.  (Rarely used.)
getservbyport(port[, protocolname]) -> string
Return the service name from a port number and protocol name.
The optional protocol name, if given, should be 'tcp' or 'udp',
otherwise any protocol will match.
getservbyname(servicename[, protocolname]) -> integer
Return a port number from a service name and protocol name.
The optional protocol name, if given, should be 'tcp' or 'udp',
otherwise any protocol will match.
gethostname() -> string
Return the current host name.
gethostbyaddr(host) -> (name, aliaslist, addresslist)
Return the true host name, a list of aliases, and a list of IP addresses,
for a host.  The host argument is a string giving a host name or IP number.
gethostbyname_ex(host) -> (name, aliaslist, addresslist)
Return the true host name, a list of aliases, and a list of IP addresses,
for a host.  The host argument is a string giving a host name or IP number.
gethostbyname(host) -> address
Return the IP address (a string of the form '255.255.255.255') for a host.
socket([family[, type[, proto]]]) -> socket object
Open a socket of the given type.  The family argument specifies the
address family; it defaults to AF_INET.  The type argument specifies
whether this is a stream (SOCK_STREAM, this is the default)
or datagram (SOCK_DGRAM) socket.  The protocol argument defaults to 0,
specifying the default protocol.  Keyword arguments are accepted.
A socket object represents one endpoint of a network connection.
Methods of socket objects (keyword arguments not allowed):
accept() -- accept a connection, returning new socket and client address
bind(addr) -- bind the socket to a local address
close() -- close the socket
connect(addr) -- connect the socket to a remote address
connect_ex(addr) -- connect, return an error code instead of an exception
dup() -- return a new socket object identical to the current one [*]
fileno() -- return underlying file descriptor
getpeername() -- return remote address [*]
getsockname() -- return local address
getsockopt(level, optname[, buflen]) -- get socket options
gettimeout() -- return timeout or None
listen(n) -- start listening for incoming connections
makefile([mode, [bufsize]]) -- return a file object for the socket [*]
recv(buflen[, flags]) -- receive data
recv_into(buffer[, nbytes[, flags]]) -- receive data (into a buffer)
recvfrom(buflen[, flags]) -- receive data and sender's address
recvfrom_into(buffer[, nbytes, [, flags])
  -- receive data and sender's address (into a buffer)
sendall(data[, flags]) -- send all data
send(data[, flags]) -- send data, may not send all of it
sendto(data[, flags], addr) -- send data to a given address
setblocking(0 | 1) -- set or clear the blocking I/O flag
setsockopt(level, optname, value) -- set socket options
settimeout(None | float) -- set or clear the timeout
shutdown(how) -- shut down traffic in one or both directions
 [*] not available on all platforms!
spwd.struct_spwd: Results from getsp*() routines.
This object may be accessed either as a 9-tuple of
  (sp_nam,sp_pwd,sp_lstchg,sp_min,sp_max,sp_warn,sp_inact,sp_expire,sp_flag)
or via the object attributes as named in the above tuple.
getspall() -> list_of_entries
Return a list of all available shadow password database entries, in arbitrary order.
See spwd.__doc__ for more on shadow password database entries.
getspnam(name) -> (sp_namp, sp_pwdp, sp_lstchg, sp_min, sp_max,
                    sp_warn, sp_inact, sp_expire, sp_flag)
Return the shadow password database entry for the given user name.
See spwd.__doc__ for more on shadow password database entries.
writable() -> bool. Returns True if the IO object can be written.
readable() -> bool. Returns True if the IO object can be read.
seekable() -> bool. Returns True if the IO object can be seeked.
Write string to file.
Returns the number of characters written, which is always equal to
the length of the string.
Change stream position.
Seek to character offset pos relative to position indicated by whence:
    0  Start of stream (the default).  pos should be >= 0;
    1  Current position - pos must be 0;
    2  End of stream - pos must be 0.
Returns the new absolute position.
Truncate size to pos.
The pos argument defaults to the current file position, as
returned by tell().  The current file position is unchanged.
Returns the new absolute position.
Tell the current file position.
Read until newline or EOF.
Returns an empty string if EOF is hit immediately.
Read at most n characters, returned as a string.
If the argument is negative or omitted, read until EOF
is reached. Return an empty string at EOF.
Retrieve the entire contents of the object.
Close the IO object. Attempting any further operation after the
object is closed will raise a ValueError.
This method has no effect if the file is already closed.
Text I/O implementation using an in-memory buffer.
The initial_value argument sets the value of object.  The newline
argument is like the one of TextIOWrapper's constructor.
This module provides mechanisms to use signal handlers in Python.
Functions:
alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler
signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers
itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.
*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.
Implementation module for socket operations.
See the socket module for documentation.
This module provides access to the Unix shadow password database.
It is available on various Unix versions.
Shadow password database entries are reported as 9-tuples of type struct_spwd,
containing the following items from the password database (see `<shadow.h>'):
sp_namp, sp_pwdp, sp_lstchg, sp_min, sp_max, sp_warn, sp_inact, sp_expire, sp_flag.
The sp_namp and sp_pwdp are strings, the rest are integers.
An exception is raised if the entry asked for cannot be found.
You have to be root to be able to use this module.
zip(seq1 [, seq2 [...]]) -> [(seq1[0], seq2[0] ...), (...)]
Return a list of tuples, where each tuple contains the i-th element
from each of the argument sequences.  The returned list is truncated
in length to the length of the shortest argument sequence.
vars([object]) -> dictionary
Without arguments, equivalent to locals().
With an argument, equivalent to object.__dict__.
unichr(i) -> Unicode character
Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
sum(sequence[, start]) -> value
Return the sum of a sequence of numbers (NOT strings) plus the value
of parameter 'start' (which defaults to 0).  When the sequence is
empty, return start.
sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list
setattr(object, name, value)
Set a named attribute on an object; setattr(x, 'y', v) is equivalent to
``x.y = v''.
round(number[, ndigits]) -> floating point number
Round a number to a given precision in decimal digits (default 0 digits).
This always returns a floating point number.  Precision may be negative.
repr(object) -> string
Return the canonical string representation of the object.
For most object types, eval(repr(object)) == object.
reload(module) -> module
Reload the module.  The module must have been successfully imported before.
reduce(function, sequence[, initial]) -> value
Apply a function of two arguments cumulatively to the items of a sequence,
from left to right, so as to reduce the sequence to a single value.
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
of the sequence in the calculation, and serves as a default when the
sequence is empty.
raw_input([prompt]) -> string
Read a string from standard input.  The trailing newline is stripped.
If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
On Unix, GNU readline is used if enabled.  The prompt string, if given,
is printed without a trailing newline before reading.
range(stop) -> list of integers
range(start, stop[, step]) -> list of integers
Return a list containing an arithmetic progression of integers.
range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
When step is given, it specifies the increment (or decrement).
For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
These are exactly the valid indices for a list of 4 elements.
print(value, ..., sep=' ', end='\n', file=sys.stdout)
Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file: a file-like object (stream); defaults to the current sys.stdout.
sep:  string inserted between values, default a space.
end:  string appended after the last value, default a newline.
pow(x, y[, z]) -> number
With two arguments, equivalent to x**y.  With three arguments,
equivalent to (x**y) % z, but may be more efficient (e.g. for longs).
ord(c) -> integer
Return the integer ordinal of a one-character string.
open(name[, mode[, buffering]]) -> file object
Open a file using the file() type, returns a file object.  This is the
preferred way to open a file.  See file.__doc__ for further information.
oct(number) -> string
Return the octal representation of an integer or long integer.
next(iterator[, default])
Return the next item from the iterator. If default is given and the iterator
is exhausted, it is returned instead of raising StopIteration.
min(iterable[, key=func]) -> value
min(a, b, c, ...[, key=func]) -> value
With a single iterable argument, return its smallest item.
With two or more arguments, return the smallest argument.
max(iterable[, key=func]) -> value
max(a, b, c, ...[, key=func]) -> value
With a single iterable argument, return its largest item.
With two or more arguments, return the largest argument.
map(function, sequence[, sequence, ...]) -> list
Return a list of the results of applying the function to the items of
the argument sequence(s).  If more than one sequence is given, the
function is called with an argument list consisting of the corresponding
item of each sequence, substituting None for missing values when not all
sequences have the same length.  If the function is None, return a list of
the items of the sequence (or a list of tuples if more than one sequence).
locals() -> dictionary
Update and return a dictionary containing the current scope's local variables.
len(object) -> integer
Return the number of items of a sequence or collection.
iter(collection) -> iterator
iter(callable, sentinel) -> iterator
Get an iterator from an object.  In the first form, the argument must
supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.
issubclass(C, B) -> bool
Return whether class C is a subclass (i.e., a derived class) of class B.
When using a tuple as the second argument issubclass(X, (A, B, ...)),
is a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).
isinstance(object, class-or-type-or-tuple) -> bool
Return whether an object is an instance of a class or of a subclass thereof.
With a type as second argument, return whether that is the object's type.
The form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for
isinstance(x, A) or isinstance(x, B) or ... (etc.).
intern(string) -> string
``Intern'' the given string.  This enters the string in the (global)
table of interned strings whose purpose is to speed up dictionary lookups.
Return the string itself or the previously interned string object with the
same value.
input([prompt]) -> value
Equivalent to eval(raw_input(prompt)).
id(object) -> integer
Return the identity of an object.  This is guaranteed to be unique among
simultaneously existing objects.  (Hint: it's the object's memory address.)
hex(number) -> string
Return the hexadecimal representation of an integer or long integer.
hash(object) -> integer
Return a hash value for the object.  Two objects with the same value have
the same hash value.  The reverse is not necessarily true, but likely.
hasattr(object, name) -> bool
Return whether the object has an attribute with the given name.
(This is done by calling getattr(object, name) and catching exceptions.)
globals() -> dictionary
Return the dictionary containing the current scope's global variables.
getattr(object, name[, default]) -> value
Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.
When a default argument is given, it is returned when the attribute doesn't
exist; without it, an exception is raised in that case.
format(value[, format_spec]) -> string
Returns value.__format__(format_spec)
format_spec defaults to ""
filter(function or None, sequence) -> list, tuple, or string
Return those items of sequence for which function(item) is true.  If
function is None, return the items that are true.  If sequence is a tuple
or string, return the same type, else return a list.
execfile(filename[, globals[, locals]])
Read and execute a Python script from a file.
The globals and locals are dictionaries, defaulting to the current
globals and locals.  If only globals is given, locals defaults to it.
eval(source[, globals[, locals]]) -> value
Evaluate the source in the context of globals and locals.
The source may be a string representing a Python expression
or a code object as returned by compile().
The globals must be a dictionary and locals can be any mapping,
defaulting to the current globals and locals.
If only globals is given, locals defaults to it.
divmod(x, y) -> (quotient, remainder)
Return the tuple ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.
dir([object]) -> list of strings
If called without an argument, return the names in the current scope.
Else, return an alphabetized list of names comprising (some of) the attributes
of the given object, and of attributes reachable from it.
If the object supplies a method named __dir__, it will be used; otherwise
the default dir() logic is used and returns:
  for a module object: the module's attributes.
  for a class object:  its attributes, and recursively the attributes
    of its bases.
  for any other object: its attributes, its class's attributes, and
    recursively the attributes of its class's base classes.
delattr(object, name)
Delete a named attribute on an object; delattr(x, 'y') is equivalent to
``del x.y''.
compile(source, filename, mode[, flags[, dont_inherit]]) -> code object
Compile the source string (a Python module, statement or expression)
into a code object that can be executed by the exec statement or eval().
The filename will be used for run-time error messages.
The mode must be 'exec' to compile a module, 'single' to compile a
single (interactive) statement, or 'eval' to compile an expression.
The flags argument, if present, controls which future statements influence
the compilation of the code.
The dont_inherit argument, if non-zero, stops the compilation inheriting
the effects of any future statements in effect in the code calling
compile; if absent or zero these statements do influence the compilation,
in addition to any features explicitly specified.
coerce(x, y) -> (x1, y1)
Return a tuple consisting of the two numeric arguments converted to
a common type, using the same rules as used by arithmetic operations.
If coercion is not possible, raise TypeError.
cmp(x, y) -> integer
Return negative if x<y, zero if x==y, positive if x>y.
chr(i) -> character
Return a string of one character with ordinal i; 0 <= i < 256.
callable(object) -> bool
Return whether the object is callable (i.e., some kind of function).
Note that classes are callable, as are instances with a __call__() method.
bin(number) -> string
Return the binary representation of an integer or long integer.
apply(object[, args[, kwargs]]) -> value
Call a callable object with positional arguments taken from the tuple args,
and keyword arguments taken from the optional dictionary kwargs.
Note that classes are callable, as are instances with a __call__() method.
Deprecated since release 2.3. Instead, use the extended call syntax:
    function(*args, **keywords).
any(iterable) -> bool
Return True if bool(x) is True for any x in the iterable.
If the iterable is empty, return False.
all(iterable) -> bool
Return True if bool(x) is True for all values x in the iterable.
If the iterable is empty, return True.
abs(number) -> number
Return the absolute value of the argument.
__import__(name, globals={}, locals={}, fromlist=[], level=-1) -> module
Import a module. Because this function is meant for use by the Python
interpreter and not for general use it is better to use
importlib.import_module() to programmatically import a module.
The globals argument is only used to determine the context;
they are not modified.  The locals argument is unused.  The fromlist
should be a list of names to emulate ``from name import ...'', or an
empty list to emulate ``import name''.
When importing a module from a package, note that __import__('A.B', ...)
returns package A when fromlist is empty, but its submodule B when
fromlist is not empty.  Level is used to determine whether to perform 
absolute or relative imports.  -1 is the original strategy of attempting
both absolute and relative imports, 0 is absolute, a positive number
is the number of parent directories to search relative to the current module.
argument %d to map() must support iteration
Built-in functions, exceptions, and other objects.
Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices.
loads(string)
Convert the string to a value. If no valid value is found, raise
EOFError, ValueError or TypeError. Extra characters in the string are
ignored.
dumps(value[, version])
Return the string that would be written to a file by dump(value, file).
The value must be a supported type. Raise a ValueError exception if
value has (or contains an object that has) an unsupported type.
New in version 2.4: The version argument indicates the data format that
dumps should use.
load(file)
Read one value from the open file and return it. If no valid value is
read (e.g. because the data has a different Python version
incompatible marshal format), raise EOFError, ValueError or TypeError.
The file must be an open file object opened in binary mode ('rb' or
'r+b').
Note: If an object containing an unsupported type was marshalled with
dump(), load() will substitute None for the unmarshallable type.
dump(value, file[, version])
Write the value on the open file. The value must be a supported type.
The file must be an open file object such as sys.stdout or returned by
open() or os.popen(). It must be opened in binary mode ('wb' or 'w+b').
If the value has (or contains an object that has) an unsupported type, a
ValueError exception is raised 
 but garbage data will also be written
to the file. The object will not be properly read back by load()
New in version 2.4: The version argument indicates the data format that
dump should use.
This module contains functions that can read and write Python values in
a binary format. The format is specific to Python, but independent of
machine architecture issues.
Not all Python object types are supported; in general, only objects
whose value is independent from a particular invocation of Python can be
written and read by this module. The following types are supported:
None, integers, long integers, floating point numbers, strings, Unicode
objects, tuples, lists, sets, dictionaries, and code objects, where it
should be understood that tuples, lists and dictionaries are only
supported as long as the values contained therein are themselves
supported; and recursive lists and dictionaries should not be written
(they will cause infinite loops).
Variables:
version -- indicates the format that the module uses. Version 0 is the
    historical format, version 1 (added in Python 2.4) shares interned
    strings and version 2 (added in Python 2.5) uses a binary format for
    floating point numbers. (New in version 2.4)
Functions:
dump() -- write value to a file
load() -- read value from a file
dumps() -- write value to a string
loads() -- read value from a string
Python C API version mismatch for module %.100s: This Python has API version %d, module %.100s has version %d.
Objects that know how to unpickle
Objects that know how to pickle objects
writelines(sequence_of_strings) -> None.  Write the strings to the file.
Note that newlines are not added.  The sequence can be any iterable object
producing strings. This is equivalent to calling write() for each string.
write(s) -- Write a string to the file
Note (hack:) writing None resets the buffer
close(): explicitly release resources held.
truncate(): truncate the file at the current position.
tell() -- get the current position.
seek(position)       -- set the current position
seek(position, mode) -- mode 0: absolute; 1: relative; 2: relative to EOF
reset() -- Reset the file position to the beginning
readlines() -- Read all lines
readline() -- Read one line
read([s]) -- Read s characters, or the rest of the string
isatty(): always returns 0
getvalue([use_pos]) -- Get the string value.
If use_pos is specified and is a true value, then the string returned
will include only the text up to the current file position.
flush(): does nothing.
Simple type for output to strings.
Simple type for treating strings as input file streams
StringIO([s]) -- Return a StringIO-like stream for reading or writing
tanh(x)
Return the hyperbolic tangent of x.
tan(x)
Return the tangent of x.
sqrt(x)
Return the square root of x.
sinh(x)
Return the hyperbolic sine of x.
sin(x)
Return the sine of x.
rect(r, phi) -> z: complex
Convert from polar coordinates to rectangular coordinates.
polar(z) -> r: float, phi: float
Convert a complex from rectangular coordinates to polar coordinates. r is
the distance from 0 and phi the phase angle.
phase(z) -> float
Return argument, also known as the phase angle, of a complex.
log10(x)
Return the base-10 logarithm of x.
log(x[, base]) -> the logarithm of x to the given base.
If the base not specified, returns the natural logarithm (base e) of x.
isnan(z) -> bool
Checks if the real or imaginary part of z not a number (NaN)
isinf(z) -> bool
Checks if the real or imaginary part of z is infinite.
exp(x)
Return the exponential value e**x.
cosh(x)
Return the hyperbolic cosine of x.
cos(x)
Return the cosine of x.
atanh(x)
Return the hyperbolic arc tangent of x.
atan(x)
Return the arc tangent of x.
asinh(x)
Return the hyperbolic arc sine of x.
asin(x)
Return the arc sine of x.
acosh(x)
Return the hyperbolic arccosine of x.
acos(x)
Return the arc cosine of x.
C implementation and optimization of the Python pickle module.
A simple fast partial StringIO replacement.
This module provides a simple useful replacement for
the StringIO module that is written in C.  It does not provide the
full generality of StringIO, but it provides enough for most
applications and is especially useful in conjunction with the
pickle module.
Usage:
  from cStringIO import StringIO
  an_output_stream=StringIO()
  an_output_stream.write(some_stuff)
  ...
  value=an_output_stream.getvalue()
  an_input_stream=StringIO(a_string)
  spam=an_input_stream.readline()
  spam=an_input_stream.read(5)
  an_input_stream.seek(0)           # OK, start over
  spam=an_input_stream.read()       # and read it all
If someone else wants to provide a more complete implementation,
go for it. :-)  
cStringIO.c,v 1.29 1999/06/15 14:10:27 jim Exp
This module is always available. It provides access to mathematical
functions for complex numbers.
Copyright (c) 2001-2014 Python Software Foundation.
All Rights Reserved.
Copyright (c) 2000 BeOpen.com.
All Rights Reserved.
Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.
Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved.
grp.struct_group: Results from getgr*() routines.
This object may be accessed either as a tuple of
  (gr_name,gr_passwd,gr_gid,gr_mem)
or via the object attributes as named in the above tuple.
The error setting of the decoder or encoder.
Subclasses should override.
Line endings translated so far.
Only line endings translated during reading are considered.
Subclasses should override.
Encoding of the text stream.
Subclasses should override.
Write string to stream.
Returns the number of characters written (which is always equal to
the length of the string).
Read until newline or EOF.
Returns an empty string if EOF is hit immediately.
Read at most n characters from stream.
Read from underlying buffer until we have n characters or we hit EOF.
If n is negative or omitted, read until EOF.
Separate the underlying buffer from the TextIOBase and return it.
After the underlying buffer has been detached, the TextIO is in an
unusable state.
Write the given buffer to the IO stream.
Returns the number of bytes written, which is never less than
len(b).
Raises BlockingIOError if the buffer is full and the
underlying raw stream cannot accept more data at the moment.
Read and return up to n bytes, with at most one read() call
to the underlying raw stream. A short result does not imply
that EOF is imminent.
Returns an empty bytes object on EOF.
Read and return up to n bytes.
If the argument is omitted, None, or negative, reads and
returns all data until EOF.
If the argument is positive, and the underlying raw stream is
not 'interactive', multiple raw reads may be issued to satisfy
the byte count (unless EOF is reached first).  But for
interactive raw streams (as well as sockets and pipes), at most
one raw read will be issued, and a short result does not imply
that EOF is imminent.
Returns an empty bytes object on EOF.
Returns None if the underlying raw stream was open in non-blocking
mode and no data is available at the moment.
Disconnect this buffer from its underlying raw stream and return it.
After the raw stream has been detached, the buffer is in an unusable
state.
Read until EOF, using multiple read() call.
Base class for text I/O.
This class provides a character and line based interface to stream
I/O. There is no readinto method because Python's character strings
are immutable. There is no public constructor.
Base class for buffered IO objects.
The main difference with RawIOBase is that the read() method
supports omitting the size argument, and does not have a default
implementation that defers to readinto().
In addition, read(), readinto() and write() may raise
BlockingIOError if the underlying raw stream is in non-blocking
mode and not ready; unlike their raw counterparts, they will never
return None.
A typical implementation should not inherit from a RawIOBase
implementation, but wrap one.
Base class for raw binary I/O.
Return a list of lines from the stream.
hint can be specified to control the number of lines read: no more
lines will be read if the total size (in bytes/characters) of all
lines so far exceeds hint.
Read and return a line from the stream.
If limit is specified, at most limit bytes will be read.
The line terminator is always b'\n' for binary files; for text
files, the newlines argument to open can be used to select the line
terminator(s) recognized.
Return whether this is an 'interactive' stream.
Return False if it can't be determined.
Returns underlying file descriptor if one exists.
An IOError is raised if the IO object does not use a file descriptor.
Return whether object was opened for writing.
If False, read() will raise IOError.
Return whether object was opened for reading.
If False, read() will raise IOError.
Return whether object supports random access.
If False, seek(), tell() and truncate() will raise IOError.
This method may need to do a test seek().
Flush and close the IO object.
This method has no effect if the file is already closed.
Flush write buffers, if applicable.
This is not implemented for read-only and non-blocking streams.
Truncate file to size bytes.
File pointer is left unchanged.  Size defaults to the current IO
position as reported by tell().  Returns the new size.
Return current stream position.
Change stream position.
Change the stream position to the given byte offset. The offset is
interpreted relative to the position indicated by whence.  Values
for whence are:
* 0 -- start of stream (the default); offset should be zero or positive
* 1 -- current stream position; offset may be negative
* 2 -- end of stream; offset is usually negative
Return the new absolute position.
The abstract base class for all I/O classes, acting on streams of
bytes. There is no public constructor.
This class provides dummy implementations for many methods that
derived classes can override selectively; the default implementations
represent a file that cannot be read, written or seeked.
Even though IOBase does not declare read, readinto, or write because
their signatures will vary, implementations and clients should
consider those methods part of the interface. Also, implementations
may raise a IOError when operations they do not support are called.
The basic type used for binary data read from or written to a file is
bytes. bytearrays are accepted too, and in some cases (such as
readinto) needed. Text I/O classes work with str data.
Note that calling any method (except additional calls to close(),
which are ignored) on a closed stream should raise a ValueError.
IOBase (and its subclasses) support the iterator protocol, meaning
that an IOBase object can be iterated over yielding the lines in a
stream.
IOBase also supports the :keyword:`with` statement. In this example,
fp is closed after the suite of the with statement is complete:
with open('spam.txt', 'r') as fp:
    fp.write('Spam and eggs!')
Private method returning an estimate of len(list(it)).
Return state information for pickling.
chain.from_iterable(iterable) --> chain object
Alternate chain() contructor taking a single iterable argument
that evaluates lazily.
Returns an independent iterator.
groupby(iterable[, keyfunc]) -> create an iterator which returns
(key, sub-iterator) grouped by each value of key(value).
repeat(object [,times]) -> create an iterator which returns the object
for the specified number of times.  If not specified, returns the object
endlessly.
product(*iterables) --> product object
Cartesian product of input iterables.  Equivalent to nested for-loops.
For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).
The leftmost iterators are in the outermost for-loop, so the output tuples
cycle in a manner similar to an odometer (with the rightmost element changing
on every iteration).
To compute the product of an iterable with itself, specify the number
of repetitions with the optional repeat keyword argument. For example,
product(A, repeat=4) means the same as product(A, A, A, A).
product('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)
product((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ...
permutations(iterable[, r]) --> permutations object
Return successive r-length permutations of elements in the iterable.
permutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)
izip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> izip_longest object
Return an izip_longest object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the longest iterable in the argument sequence
is exhausted and then it raises StopIteration.  When the shorter iterables
are exhausted, the fillvalue is substituted in their place.  The fillvalue
defaults to None or can be specified by a keyword argument.
izip(iter1 [,iter2 [...]]) --> izip object
Return a izip object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the shortest iterable in the argument sequence
is exhausted and then it raises StopIteration.  Works like the zip()
function but consumes less memory by returning an iterator instead of
a list.
count(start=0, step=1) --> count object
Return a count object whose .next() method returns consecutive values.
Equivalent to:
    def count(firstval=0, step=1):
        x = firstval
        while 1:
            yield x
            x += step
ifilterfalse(function or None, sequence) --> ifilterfalse object
Return those items of sequence for which function(item) is false.
If function is None, return the items that are false.
ifilter(function or None, sequence) --> ifilter object
Return those items of sequence for which function(item) is true.
If function is None, return the items that are true.
compress(data, selectors) --> iterator over selected data
Return data elements corresponding to true selector elements.
Forms a shorter iterator from selected data elements using the
selectors to choose the data elements.
chain(*iterables) --> chain object
Return a chain object whose .next() method returns elements from the
first iterable until it is exhausted, then elements from the next
iterable, until all of the iterables are exhausted.
imap(func, *iterables) --> imap object
Make an iterator that computes the function using arguments from
each of the iterables.  Like map() except that it returns
an iterator instead of a list and that it stops when the shortest
iterable is exhausted instead of filling in None for shorter
iterables.
starmap(function, sequence) --> starmap object
Return an iterator whose values are returned from the function evaluated
with a argument tuple taken from the given sequence.
islice(iterable, [start,] stop [, step]) --> islice object
Return an iterator whose next() method returns selected values from an
iterable.  If start is specified, will skip all preceding elements;
otherwise, start defaults to zero.  Step defaults to one.  If
specified as another value, step determines how many values are 
skipped between successive calls.  Works like a slice() on a list
but returns an iterator.
takewhile(predicate, iterable) --> takewhile object
Return successive entries from an iterable as long as the 
predicate evaluates to true for each entry.
dropwhile(predicate, iterable) --> dropwhile object
Drop items from the iterable while predicate(item) is true.
Afterwards, return every element until the iterable is exhausted.
cycle(iterable) --> cycle object
Return elements from the iterable until it is exhausted.
Then repeat the sequence indefinitely.
combinations_with_replacement(iterable, r) --> combinations_with_replacement object
Return successive r-length combinations of elements in the iterable
allowing individual elements to have successive repeats.
combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC
combinations(iterable, r) --> combinations object
Return successive r-length combinations of elements in the iterable.
combinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)
Iterator wrapped to make it copyable
tee(iterable, n=2) --> tuple of n independent iterators.
Data container common to multiple tee objects.
trunc(x:Real) -> Integral
Truncates x to the nearest Integral toward 0. Uses the __trunc__ magic method.
tanh(x)
Return the hyperbolic tangent of x.
tan(x)
Return the tangent of x (measured in radians).
sqrt(x)
Return the square root of x.
sinh(x)
Return the hyperbolic sine of x.
sin(x)
Return the sine of x (measured in radians).
radians(x)
Convert angle x from degrees to radians.
pow(x, y)
Return x**y (x to the power of y).
modf(x)
Return the fractional and integer parts of x.  Both results carry the sign
of x and are floats.
log10(x)
Return the base 10 logarithm of x.
log1p(x)
Return the natural logarithm of 1+x (base e).
The result is computed in a way which is accurate for x near zero.
log(x[, base])
Return the logarithm of x to the given base.
If the base not specified, returns the natural logarithm (base e) of x.
lgamma(x)
Natural logarithm of absolute value of Gamma function at x.
ldexp(x, i)
Return x * (2**i).
isnan(x) -> bool
Check if float x is not a number (NaN).
isinf(x) -> bool
Check if float x is infinite (positive or negative).
hypot(x, y)
Return the Euclidean distance, sqrt(x*x + y*y).
gamma(x)
Gamma function at x.
fsum(iterable)
Return an accurate floating point sum of values in the iterable.
Assumes IEEE-754 floating point arithmetic.
frexp(x)
Return the mantissa and exponent of x, as pair (m, e).
m is a float and e is an int, such that x = m * 2.**e.
If x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.
fmod(x, y)
Return fmod(x, y), according to platform C.  x % y may differ.
floor(x)
Return the floor of x as a float.
This is the largest integral value <= x.
factorial(x) -> Integral
Find x!. Raise a ValueError if x is negative or non-integral.
fabs(x)
Return the absolute value of the float x.
expm1(x)
Return exp(x)-1.
This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.
exp(x)
Return e raised to the power of x.
erfc(x)
Complementary error function at x.
erf(x)
Error function at x.
degrees(x)
Convert angle x from radians to degrees.
cosh(x)
Return the hyperbolic cosine of x.
cos(x)
Return the cosine of x (measured in radians).
copysign(x, y)
Return x with the sign of y.
ceil(x)
Return the ceiling of x as a float.
This is the smallest integral value >= x.
atanh(x)
Return the hyperbolic arc tangent (measured in radians) of x.
atan2(y, x)
Return the arc tangent (measured in radians) of y/x.
Unlike atan(y/x), the signs of both x and y are considered.
atan(x)
Return the arc tangent (measured in radians) of x.
asinh(x)
Return the hyperbolic arc sine (measured in radians) of x.
asin(x)
Return the arc sine (measured in radians) of x.
acosh(x)
Return the hyperbolic arc cosine (measured in radians) of x.
acos(x)
Return the arc cosine (measured in radians) of x.
copy() -> md5 object
Return a copy (``clone'') of the md5 object.
hexdigest() -> string
Like digest(), but returns the digest as a string of hexadecimal digits.
digest() -> string
Return the digest of the strings passed to the update() method so
far. This is a 16-byte string which may contain non-ASCII characters,
including null bytes.
update (arg)
Update the md5 object with the string arg. Repeated calls are
equivalent to a single call with the concatenation of all the
arguments.
new([arg]) -> md5 object
Return a new md5 object. If arg is present, the method call update(arg)
is made.
An md5 represents the object used to calculate the MD5 checksum of a
string of information.
Methods:
update() -- updates the current digest with an additional string
digest() -- return the current digest value
hexdigest() -- return the current digest as a string of hexadecimal digits
copy() -- return a copy of the current md5 object
Access to the Unix group database.
Group entries are reported as 4-tuples containing the following fields
from the group database, in order:
  gr_name   - name of the group
  gr_passwd - group password (encrypted); often empty
  gr_gid    - numeric ID of the group
  gr_mem    - list of members
The gid is an integer, name and password are strings.  (Note that most
users are not explicitly listed as members of the groups they are in
according to the password database.  Check both databases to get
complete membership information.)
Functional tools for creating and using iterators.
Infinite iterators:
count([n]) --> n, n+1, n+2, ...
cycle(p) --> p0, p1, ... plast, p0, p1, ...
repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times
Iterators terminating on the shortest input sequence:
chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... 
compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...
dropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails
groupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)
ifilter(pred, seq) --> elements of seq where pred(elem) is True
ifilterfalse(pred, seq) --> elements of seq where pred(elem) is False
islice(seq, [start,] stop [, step]) --> elements from
       seq[start:stop:step]
imap(fun, p, q, ...) --> fun(p0, q0), fun(p1, q1), ...
starmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...
tee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n
takewhile(pred, seq) --> seq[0], seq[1], until pred fails
izip(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 
izip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... 
Combinatoric generators:
product(p, q, ... [repeat=1]) --> cartesian product
permutations(p[, r])
combinations(p, r)
combinations_with_replacement(p, r)
This module is always available.  It provides access to the
mathematical functions defined by the C standard.
This module implements the interface to RSA's MD5 message digest
algorithm (see also Internet RFC 1321). Its use is quite
straightforward: use the new() to create an md5 object. You can now
feed this object with arbitrary strings using the update() method, and
at any point you can ask it for the digest (a strong kind of 128-bit
checksum, a.k.a. ``fingerprint'') of the concatenation of the strings
fed to it so far using the digest() method.
Functions:
new([arg]) -- return a new md5 object, initialized with arg if provided
md5([arg]) -- DEPRECATED, same as new, but for compatibility
Special Objects:
MD5Type -- type object for md5 objects
sys.flags
Flags provided through command line arguments or environment vars.
sys.version_info
Version information as a named tuple.
call_tracing(func, args) -> object
Call func(*args), while tracing is enabled.  The tracing state is
saved, and restored afterwards.  This is intended to be called from
a debugger from a checkpoint, to recursively debug some other code.
gettrace()
Return the global debug tracing function set with sys.settrace.
See the debugger chapter in the library manual.
settrace(function)
Set the global debug tracing function.  It will be called on each
function call.  See the debugger chapter in the library manual.
setrecursionlimit(n)
Set the maximum depth of the Python interpreter stack to n.  This
limit prevents infinite recursion from causing an overflow of the C
stack and crashing Python.  The highest possible limit is platform-
dependent.
getprofile()
Return the profiling function set with sys.setprofile.
See the profiler chapter in the library manual.
setprofile(function)
Set the profiling function.  It will be called on each function call
and return.  See the profiler chapter in the library manual.
setdlopenflags(n) -> None
Set the flags used by the interpreter for dlopen calls, such as when the
interpreter loads extension modules.  Among other things, this will enable
a lazy resolving of symbols when importing a module, if called as
sys.setdlopenflags(0).  To share symbols across extension modules, call as
sys.setdlopenflags(ctypes.RTLD_GLOBAL).  Symbolic names for the flag modules
can be either found in the ctypes module, or in the DLFCN module. If DLFCN
is not available, it can be generated from /usr/include/dlfcn.h using the
h2py script.
getcheckinterval() -> current check interval; see setcheckinterval().
setcheckinterval(n)
Tell the Python interpreter to check for asynchronous events every
n instructions.  This also affects how often thread switches occur.
setdefaultencoding(encoding)
Set the current default string encoding used by the Unicode implementation.
_getframe([depth]) -> frameobject
Return a frame object from the call stack.  If optional integer depth is
given, return the frame object that many calls below the top of the stack.
If that is deeper than the call stack, ValueError is raised.  The default
for depth is zero, returning the frame at the top of the call stack.
This function should be used for internal and specialized
purposes only.
getsizeof(object, default) -> int
Return the size of object in bytes.
getrecursionlimit()
Return the current value of the recursion limit, the maximum depth
of the Python interpreter stack.  This limit prevents infinite
recursion from causing an overflow of the C stack and crashing Python.
getrefcount(object) -> integer
Return the reference count of object.  The count returned is generally
one higher than you might expect, because it includes the (temporary)
reference as an argument to getrefcount().
getfilesystemencoding() -> string
Return the encoding used to convert Unicode filenames in
operating system filenames.
getdlopenflags() -> int
Return the current value of the flags that are used for dlopen calls.
The flag constants are defined in the ctypes and DLFCN modules.
getdefaultencoding() -> string
Return the current default string encoding used by the Unicode 
implementation.
exit([status])
Exit the interpreter by raising SystemExit(status).
If the status is omitted or None, it defaults to zero (i.e., success).
If the status is an integer, it will be used as the system exit status.
If it is another kind of object, it will be printed and the system
exit status will be one (i.e., failure).
excepthook(exctype, value, traceback) -> None
Handle an exception by displaying it with a traceback on sys.stderr.
exc_clear() -> None
Clear global information on the current exception.  Subsequent calls to
exc_info() will return (None,None,None) until another exception is raised
in the current thread or the execution stack returns to a frame where
another exception is being handled.
exc_info() -> (type, value, traceback)
Return information about the most recent exception caught by an except
clause in the current stack frame or in an older stack frame.
displayhook(object) -> None
Print an object to sys.stdout and also save it in __builtin__._
_current_frames() -> dictionary
Return a dictionary mapping each current thread T's thread id to T's
current stack frame.
This function should be used for specialized purposes only.
_clear_type_cache() -> None
Clear the internal type lookup cache.
callstats() -> tuple of integers
Return a tuple of function call statistics, if CALL_PROFILE was defined
when Python was built.  Otherwise, return None.
When enabled, this function returns detailed, implementation-specific
details about the number of function calls executed. The return value is
a 11-tuple where the entries in the tuple are counts of:
0. all function calls
1. calls to PyFunction_Type objects
2. PyFunction calls that do not create an argument tuple
3. PyFunction calls that do not create an argument tuple
   and bypass PyEval_EvalCodeEx()
4. PyMethod calls
5. PyMethod calls on bound methods
6. PyType calls
7. PyCFunction calls
8. generator calls
9. All other calls
10. Number of stack pops performed by call_function()
This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.
Dynamic objects:
argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules
displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.
exitfunc -- if sys.exitfunc exists, this routine is called when Python exits
  Assigning to sys.exitfunc is deprecated; use the atexit module instead.
stdin -- standard input file object; used by raw_input() and input()
stdout -- standard output file object; used by the print statement
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.
last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.
exc_type -- type of exception currently being handled
exc_value -- value of exception currently being handled
exc_traceback -- traceback of exception currently being handled
  The function exc_info() should be used instead of these three,
  because it is thread-safe.
Static objects:
float_info -- a dict with information about the float inplementation.
long_info -- a struct sequence with information about the long implementation.
maxint -- the largest supported integer (the smallest is -maxint-1)
maxsize -- the largest supported length of containers.
maxunicode -- the largest supported character
builtin_module_names -- tuple of module names built into this interpreter
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
hexversion -- version information encoded as a single integer
copyright -- copyright notice pertaining to this interpreter
platform -- platform identifier
executable -- absolute path of the executable binary of the Python interpreter
prefix -- prefix used to find the Python library
exec_prefix -- prefix used to find the machine-specific Python library
float_repr_style -- string indicating the style of repr() output for floats
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!
Functions:
displayhook() -- print an object to the screen, and save it in __builtin__._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exc_clear() -- clear the exception state for the current thread
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function
is_package(fullname) -> bool.
Return True if the module specified by fullname is a package.
Raise ZipImportError if the module couldn't be found.
get_filename(fullname) -> filename string.
Return the filename for the specified module.
get_source(fullname) -> source string.
Return the source code for the specified module. Raise ZipImportError
if the module couldn't be found, return None if the archive does
contain the module, but has no source for it.
get_code(fullname) -> code object.
Return the code object for the specified module. Raise ZipImportError
if the module couldn't be found.
get_data(pathname) -> string with file data.
Return the data associated with 'pathname'. Raise IOError if
the file wasn't found.
load_module(fullname) -> module.
Load the module specified by 'fullname'. 'fullname' must be the
fully qualified (dotted) module name. It returns the imported
module, or raises ZipImportError if it wasn't found.
find_module(fullname, path=None) -> self or None.
Search for a module specified by 'fullname'. 'fullname' must be the
fully qualified (dotted) module name. It returns the zipimporter
instance itself if the module was found, or None if it wasn't.
The optional 'path' argument is ignored -- it's there for compatibility
with the importer protocol.
zipimporter(archivepath) -> zipimporter object
Create a new zipimporter instance. 'archivepath' must be a path to
a zipfile, or to a specific path inside a zipfile. For example, it can be
'/tmp/myimport.zip', or '/tmp/myimport.zip/mydirectory', if mydirectory is a
valid directory inside the archive.
'ZipImportError is raised if 'archivepath' doesn't point to a valid Zip
archive.
The 'archive' attribute of zipimporter objects contains the name of the
zipfile targeted.
copy() -- Return a copy of the compression object.
flush( [mode] ) -- Return a string containing any remaining compressed data.
mode can be one of the constants Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH; the
default value used when mode is not specified is Z_FINISH.
If mode == Z_FINISH, the compressor object can no longer be used after
calling the flush() method.  Otherwise, more data can still be compressed.
compress(data) -- Return a string containing data compressed.
After calling this function, some of the input data may still
be stored in internal buffers for later processing.
Call the flush() method to clear these buffers.
copy() -- Return a copy of the decompression object.
flush( [length] ) -- Return a string containing any remaining
decompressed data. length, if given, is the initial size of the
output buffer.
The decompressor object can no longer be used after this call.
decompress(data, max_length) -- Return a string containing the decompressed
version of the data.
After calling this function, some of the input data may still be stored in
internal buffers for later processing.
Call the flush() method to clear these buffers.
If the max_length parameter is specified then the return value will be
no longer than max_length.  Unconsumed input data will be stored in
the unconsumed_tail attribute.
decompressobj([wbits]) -- Return a decompressor object.
Optional arg wbits is the window buffer size.
decompress(string[, wbits[, bufsize]]) -- Return decompressed string.
Optional arg wbits is the window buffer size.  Optional arg bufsize is
the initial output buffer size.
crc32(string[, start]) -- Compute a CRC-32 checksum of string.
An optional starting value can be specified.  The returned checksum is
a signed integer.
compressobj([level]) -- Return a compressor object.
Optional arg level is the compression level, in 0-9.
compress(string[, level]) -- Returned compressed string.
Optional arg level is the compression level, in 0-9.
adler32(string[, start]) -- Compute an Adler-32 checksum of string.
An optional starting value can be specified.  The returned checksum is
a signed integer.
S.__sizeof__() -> size of S in memory, in bytes
S.__format__(format_spec) -> unicode
Return a formatted version of S as described by format_spec.
S.format(*args, **kwargs) -> unicode
Return a formatted version of S, using substitutions from args and kwargs.
The substitutions are identified by braces ('{' and '}').
S.zfill(width) -> unicode
Pad a numeric string S with zeros on the left, to fill a field
of the specified width. The string S is never truncated.
S.isalnum() -> bool
Return True if all characters in S are alphanumeric
and there is at least one character in S, False otherwise.
S.isalpha() -> bool
Return True if all characters in S are alphabetic
and there is at least one character in S, False otherwise.
S.isnumeric() -> bool
Return True if there are only numeric characters in S,
False otherwise.
S.isdigit() -> bool
Return True if all characters in S are digits
and there is at least one character in S, False otherwise.
S.isdecimal() -> bool
Return True if there are only decimal characters in S,
False otherwise.
S.isspace() -> bool
Return True if all characters in S are whitespace
and there is at least one character in S, False otherwise.
S.istitle() -> bool
Return True if S is a titlecased string and there is at least one
character in S, i.e. upper- and titlecase characters may only
follow uncased characters and lowercase characters only cased ones.
Return False otherwise.
S.isupper() -> bool
Return True if all cased characters in S are uppercase and there is
at least one cased character in S, False otherwise.
S.islower() -> bool
Return True if all cased characters in S are lowercase and there is
at least one cased character in S, False otherwise.
S.endswith(suffix[, start[, end]]) -> bool
Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.
S.startswith(prefix[, start[, end]]) -> bool
Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.
S.upper() -> unicode
Return a copy of S converted to uppercase.
S.translate(table) -> unicode
Return a copy of the string S, where all characters have been mapped
through the given translation table, which must be a mapping of
Unicode ordinals to Unicode ordinals, Unicode strings or None.
Unmapped characters are left untouched. Characters mapped to None
are deleted.
S.swapcase() -> unicode
Return a copy of S with uppercase characters converted to lowercase
and vice versa.
S.strip([chars]) -> unicode
Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is a str, it will be converted to unicode before stripping
S.splitlines(keepends=False) -> list of strings
Return a list of the lines in S, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends
is given and true.
S.rpartition(sep) -> (head, sep, tail)
Search for the separator sep in S, starting at the end of S, and return
the part before it, the separator itself, and the part after it.  If the
separator is not found, return two empty strings and S.
S.rstrip([chars]) -> unicode
Return a copy of the string S with trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is a str, it will be converted to unicode before stripping
S.rjust(width[, fillchar]) -> unicode
Return S right-justified in a Unicode string of length width. Padding is
done using the specified fill character (default is a space).
S.rindex(sub [,start [,end]]) -> int
Like S.rfind() but raise ValueError when the substring is not found.
S.rfind(sub [,start [,end]]) -> int
Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.decode([encoding[,errors]]) -> string or unicode
Decodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle UnicodeDecodeErrors.
S.lstrip([chars]) -> unicode
Return a copy of the string S with leading whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is a str, it will be converted to unicode before stripping
S.lower() -> unicode
Return a copy of the string S converted to lowercase.
S.ljust(width[, fillchar]) -> int
Return S left-justified in a Unicode string of length width. Padding is
done using the specified fill character (default is a space).
S.index(sub [,start [,end]]) -> int
Like S.find() but raise ValueError when the substring is not found.
S.partition(sep) -> (head, sep, tail)
Search for the separator sep in S, and return the part before it,
the separator itself, and the part after it.  If the separator is not
found, return S and two empty strings.
S.find(sub [,start [,end]]) -> int
Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.expandtabs([tabsize]) -> unicode
Return a copy of S where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
S.count(sub[, start[, end]]) -> int
Return the number of non-overlapping occurrences of substring sub in
Unicode string S[start:end].  Optional arguments start and end are
interpreted as in slice notation.
S.center(width[, fillchar]) -> unicode
Return S centered in a Unicode string of length width. Padding is
done using the specified fill character (default is a space)
S.title() -> unicode
Return a titlecased version of S, i.e. words start with title case
characters, all remaining cased characters have lower case.
S.capitalize() -> unicode
Return a capitalized version of S, i.e. make the first character
have upper case and the rest lower case.
S.join(iterable) -> unicode
Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
S.rsplit([sep [,maxsplit]]) -> list of strings
Return a list of the words in S, using sep as the
delimiter string, starting at the end of the string and
working to the front.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified, any whitespace string
is a separator.
S.split([sep [,maxsplit]]) -> list of strings
Return a list of the words in S, using sep as the
delimiter string.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified or is None, any
whitespace string is a separator and empty strings are
removed from the result.
S.replace(old, new[, count]) -> unicode
Return a copy of S with all occurrences of substring
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
S.encode([encoding[,errors]]) -> string or unicode
Encodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
'xmlcharrefreplace' as well as any other name registered with
codecs.register_error that can handle UnicodeEncodeErrors.
Private method returning an estimate of len(list(it)).
T.count(value) -> integer -- return number of occurrences of value
T.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.
T.__sizeof__() -- size of T in memory, in bytes
S.__sizeof__() -> size of S in memory, in bytes
S.splitlines(keepends=False) -> list of strings
Return a list of the lines in S, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends
is given and true.
S.expandtabs([tabsize]) -> string
Return a copy of S where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
S.decode([encoding[,errors]]) -> object
Decodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle UnicodeDecodeErrors.
S.encode([encoding[,errors]]) -> object
Encodes S using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme. Default is 'strict' meaning that encoding errors raise
a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
'xmlcharrefreplace' as well as any other name registered with
codecs.register_error that is able to handle UnicodeEncodeErrors.
S.__format__(format_spec) -> string
Return a formatted version of S as described by format_spec.
S.format(*args, **kwargs) -> string
Return a formatted version of S, using substitutions from args and kwargs.
The substitutions are identified by braces ('{' and '}').
S.zfill(width) -> string
Pad a numeric string S with zeros on the left, to fill a field
of the specified width.  The string S is never truncated.
S.center(width[, fillchar]) -> string
Return S centered in a string of length width. Padding is
done using the specified fill character (default is a space)
S.rjust(width[, fillchar]) -> string
Return S right-justified in a string of length width. Padding is
done using the specified fill character (default is a space)
S.ljust(width[, fillchar]) -> string
Return S left-justified in a string of length width. Padding is
done using the specified fill character (default is a space).
S.title() -> string
Return a titlecased version of S, i.e. words start with uppercase
characters, all remaining cased characters have lowercase.
S.translate(table [,deletechars]) -> string
Return a copy of the string S, where all characters occurring
in the optional argument deletechars are removed, and the
remaining characters have been mapped through the given
translation table, which must be a string of length 256 or None.
If the table argument is None, no translation is applied and
the operation simply removes the characters in deletechars.
S.swapcase() -> string
Return a copy of the string S with uppercase characters
converted to lowercase and vice versa.
S.strip([chars]) -> string or unicode
Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
S.startswith(prefix[, start[, end]]) -> bool
Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.
S.rpartition(sep) -> (head, sep, tail)
Search for the separator sep in S, starting at the end of S, and return
the part before it, the separator itself, and the part after it.  If the
separator is not found, return two empty strings and S.
S.rstrip([chars]) -> string or unicode
Return a copy of the string S with trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
S.rindex(sub [,start [,end]]) -> int
Like S.rfind() but raise ValueError when the substring is not found.
S.rfind(sub [,start [,end]]) -> int
Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.replace(old, new[, count]) -> string
Return a copy of string S with all occurrences of substring
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
S.lstrip([chars]) -> string or unicode
Return a copy of the string S with leading whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
S.index(sub [,start [,end]]) -> int
Like S.find() but raise ValueError when the substring is not found.
S.find(sub [,start [,end]]) -> int
Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.partition(sep) -> (head, sep, tail)
Search for the separator sep in S, and return the part before it,
the separator itself, and the part after it.  If the separator is not
found, return S and two empty strings.
S.endswith(suffix[, start[, end]]) -> bool
Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.
S.count(sub[, start[, end]]) -> int
Return the number of non-overlapping occurrences of substring sub in
string S[start:end].  Optional arguments start and end are interpreted
as in slice notation.
S.capitalize() -> string
Return a copy of the string S with only its first character
capitalized.
S.isalnum() -> bool
Return True if all characters in S are alphanumeric
and there is at least one character in S, False otherwise.
S.isalpha() -> bool
Return True if all characters in S are alphabetic
and there is at least one character in S, False otherwise.
S.istitle() -> bool
Return True if S is a titlecased string and there is at least one
character in S, i.e. uppercase characters may only follow uncased
characters and lowercase characters only cased ones. Return False
otherwise.
S.isdigit() -> bool
Return True if all characters in S are digits
and there is at least one character in S, False otherwise.
S.isspace() -> bool
Return True if all characters in S are whitespace
and there is at least one character in S, False otherwise.
S.isupper() -> bool
Return True if all cased characters in S are uppercase and there is
at least one cased character in S, False otherwise.
S.islower() -> bool
Return True if all cased characters in S are lowercase and there is
at least one cased character in S, False otherwise.
S.upper() -> string
Return a copy of the string S converted to uppercase.
S.lower() -> string
Return a copy of the string S converted to lowercase.
S.rsplit([sep [,maxsplit]]) -> list of strings
Return a list of the words in the string S, using sep as the
delimiter string, starting at the end of the string and working
to the front.  If maxsplit is given, at most maxsplit splits are
done. If sep is not specified or is None, any whitespace string
is a separator.
S.split([sep [,maxsplit]]) -> list of strings
Return a list of the words in the string S, using sep as the
delimiter string.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified or is None, any
whitespace string is a separator and empty strings are removed
from the result.
S.join(iterable) -> string
Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
Return state information for pickling.
S.indices(len) -> (start, stop, stride)
Assuming a sequence of length len, calculate the start and stop
indices, and the stride length of the extended slice described by
S. Out of bounds indices are clipped in a manner consistent with the
handling of normal slices.
Update a set with the union of itself and others.
Return the union of sets as a new set.
(i.e. all elements that are in either set.)
Update a set with the symmetric difference of itself and another.
Return the symmetric difference of two sets as a new set.
(i.e. all elements that are in exactly one of the sets.)
S.__sizeof__() -> size of S in memory, in bytes
Remove an element from a set; it must be a member.
If the element is not a member, raise a KeyError.
Return state information for pickling.
Remove and return an arbitrary set element.
Raises KeyError if the set is empty.
Report whether this set contains another set.
Report whether another set contains this set.
Return True if two sets have a null intersection.
Update a set with the intersection of itself and another.
Return the intersection of two or more sets as a new set.
(i.e. elements that are common to all of the sets.)
Remove all elements of another set from this set.
Return the difference of two or more sets as a new set.
(i.e. all elements that are in this set but not the others.)
Remove an element from a set if it is a member.
If the element is not a member, do nothing.
Return a shallow copy of a set.
x.__contains__(y) <==> y in x.
Remove all elements from this set.
Add an element to a set.
This has no effect if the element is already present.
Returns a reverse iterator.
Private method returning an estimate of len(list(it)).
D.iteritems() -> an iterator over the (key, value) items of D
D.itervalues() -> an iterator over the values of D
D.iterkeys() -> an iterator over the keys of D
D.copy() -> a shallow copy of D
D.clear() -> None.  Remove all items from D.
dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.
v defaults to None.
D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
In either case, this is followed by: for k in F: D[k] = F[k]
D.viewvalues() -> an object providing a view on D's values
D.viewitems() -> a set-like object providing a view on D's items
D.viewkeys() -> a set-like object providing a view on D's keys
D.values() -> list of D's values
D.items() -> list of D's (key, value) pairs, as 2-tuples
D.keys() -> list of D's keys
D.popitem() -> (k, v), remove and return some (key, value) pair as a
2-tuple; but raise KeyError if D is empty.
D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
If key is not found, d is returned if given, otherwise KeyError is raised
D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
D.has_key(k) -> True if D has a key k, else False
D.__sizeof__() -> size of D in memory, in bytes
x.__getitem__(y) <==> x[y]
D.__contains__(k) -> True if D has a key k, else False
long.bit_length() -> int or long
Number of bits necessary to represent self in binary.
>>> bin(37L)
'0b100101'
>>> (37L).bit_length()
L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;
cmp(x, y) -> -1, 0, 1
L.reverse() -- reverse *IN PLACE*
L.count(value) -> integer -- return number of occurrences of value
L.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.
L.remove(value) -- remove first occurrence of value.
Raises ValueError if the value is not present.
L.pop([index]) -> item -- remove and return item at index (default last).
Raises IndexError if list is empty or index is out of range.
L.extend(iterable) -- extend list by appending elements from the iterable
L.insert(index, object) -- insert object before index
L.append(object) -- append object to end
L.__sizeof__() -- size of L in memory, in bytes
L.__reversed__() -- return a reverse iterator over the list
x.__getitem__(y) <==> x[y]
Private method returning an estimate of len(list(it)).
Private method returning an estimate of len(list(it)).
int.bit_length() -> int
Number of bits necessary to represent self in binary.
>>> bin(37)
'0b100101'
>>> (37).bit_length()
F.__sizeof__() -> size of F in memory, in bytes
float.__format__(format_spec) -> string
Formats the float according to format_spec.
float.__setformat__(typestr, fmt) -> None
You probably don't want to use this function.  It exists mainly to be
used in Python's test suite.
typestr must be 'double' or 'float'.  fmt must be one of 'unknown',
'IEEE, big-endian' or 'IEEE, little-endian', and in addition can only be
one of the latter two if it appears to match the underlying C reality.
Override the automatic determination of C-level floating point type.
This affects how floats are converted to and from binary strings.
float.__getformat__(typestr) -> string
You probably don't want to use this function.  It exists mainly to be
used in Python's test suite.
typestr must be 'double' or 'float'.  This function returns whichever of
'unknown', 'IEEE, big-endian' or 'IEEE, little-endian' best describes the
format of floating point numbers used by the C type named by typestr.
float.hex() -> string
Return a hexadecimal representation of a floating-point number.
>>> (-0.1).hex()
'-0x1.999999999999ap-4'
>>> 3.14159.hex()
'0x1.921f9f01b866ep+1'
float.fromhex(string) -> float
Create a floating-point number from a hexadecimal string.
>>> float.fromhex('0x1.ffffp10')
2047.984375
>>> float.fromhex('-0x1p-1074')
-4.9406564584124654e-324
float.as_integer_ratio() -> (int, int)
Return a pair of integers, whose ratio is exactly equal to the original
float and with a positive denominator.
Raise OverflowError on infinities and a ValueError on NaNs.
>>> (10.0).as_integer_ratio()
(10, 1)
>>> (0.0).as_integer_ratio()
(0, 1)
>>> (-.25).as_integer_ratio()
(-1, 4)
__exit__(*excinfo) -> None.  Closes the file.
__enter__() -> self.
isatty() -> true or false.  True if the file is connected to a tty device.
close() -> None or (perhaps) an integer.  Close the file.
Sets data attribute .closed to True.  A closed file cannot be used for
further I/O operations.  close() may be called more than once without
error.  Some kinds of file objects (for example, opened by popen())
may return an exit status upon closing.
flush() -> None.  Flush the internal I/O buffer.
writelines(sequence_of_strings) -> None.  Write the strings to the file.
Note that newlines are not added.  The sequence can be any iterable object
producing strings. This is equivalent to calling write() for each string.
xreadlines() -> returns self.
For backward compatibility. File objects now include the performance
optimizations previously implemented in the xreadlines module.
readlines([size]) -> list of strings, each a line from the file.
Call readline() repeatedly and return a list of the lines so read.
The optional size argument, if given, is an approximate bound on the
total number of bytes in the lines returned.
readinto() -> Undocumented.  Don't use this; it may go away.
tell() -> current file position, an integer (may be a long integer).
truncate([size]) -> None.  Truncate the file to at most size bytes.
Size defaults to the current file position, as returned by tell().
seek(offset[, whence]) -> None.  Move to new file position.
Argument offset is a byte count.  Optional argument whence defaults to
0 (offset from start of file, offset should be >= 0); other values are 1
(move relative to current position, positive or negative), and 2 (move
relative to end of file, usually negative, although many platforms allow
seeking beyond the end of a file).  If the file is opened in text mode,
only offsets returned by tell() are legal.  Use of other offsets causes
undefined behavior.
Note that not all file objects are seekable.
fileno() -> integer "file descriptor".
This is needed for lower-level file interfaces, such os.read().
write(str) -> None.  Write string str to file.
Note that due to buffering, flush() or close() may be needed before
the file on disk reflects the data written.
read([size]) -> read at most size bytes, returned as a string.
If the size argument is negative or omitted, read until EOF is reached.
Notice that when in non-blocking mode, less data than what was requested
may be returned, even if no size parameter was given.
readline([size]) -> next line from the file, as a string.
Retain newline.  A non-negative size argument limits the maximum
number of bytes to return (an incomplete line may be returned then).
Return an empty string at EOF.
Return the name of the generator's associated code object.
close() -> raise GeneratorExit inside generator.
throw(typ[,val[,tb]]) -> raise exception in generator,
return next yielded value or raise StopIteration.
send(arg) -> send 'arg' into generator,
return next yielded value or raise StopIteration.
Private method returning an estimate of len(list(it)).
Descriptor to change the deleter on a property.
Descriptor to change the setter on a property.
Descriptor to change the getter on a property.
complex.__format__() -> str
Convert to a string according to format_spec.
complex.conjugate() -> complex
Return the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.
Private method returning an estimate of len(list(it)).
B.zfill(width) -> copy of B
Pad a numeric string B with zeros on the left, to fill a field
of the specified width.  B is never truncated.
B.translate(table[, deletechars]) -> bytearray
Return a copy of B, where all characters occurring in the
optional argument deletechars are removed, and the remaining
characters have been mapped through the given translation
table, which must be a bytes object of length 256.
B.strip([bytes]) -> bytearray
Strip leading and trailing bytes contained in the argument.
If the argument is omitted, strip ASCII whitespace.
B.startswith(prefix [,start [,end]]) -> bool
Return True if B starts with the specified prefix, False otherwise.
With optional start, test B beginning at that position.
With optional end, stop comparing B at that position.
prefix can also be a tuple of strings to try.
B.splitlines(keepends=False) -> list of lines
Return a list of the lines in B, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends
is given and true.
B.split([sep[, maxsplit]]) -> list of bytearray
Return a list of the sections in B, using sep as the delimiter.
If sep is not given, B is split on ASCII whitespace characters
(space, tab, return, newline, formfeed, vertical tab).
If maxsplit is given, at most maxsplit splits are done.
B.rstrip([bytes]) -> bytearray
Strip trailing bytes contained in the argument.
If the argument is omitted, strip trailing ASCII whitespace.
B.rsplit(sep[, maxsplit]) -> list of bytearray
Return a list of the sections in B, using sep as the delimiter,
starting at the end of B and working to the front.
If sep is not given, B is split on ASCII whitespace characters
(space, tab, return, newline, formfeed, vertical tab).
If maxsplit is given, at most maxsplit splits are done.
B.rpartition(sep) -> (head, sep, tail)
Searches for the separator sep in B, starting at the end of B,
and returns the part before it, the separator itself, and the
part after it.  If the separator is not found, returns two empty
bytearray objects and B.
B.rjust(width[, fillchar]) -> copy of B
Return B right justified in a string of length width. Padding is
done using the specified fill character (default is a space)
B.rindex(sub [,start [,end]]) -> int
Like B.rfind() but raise ValueError when the subsection is not found.
B.rfind(sub [,start [,end]]) -> int
Return the highest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
B.reverse() -> None
Reverse the order of the values in B in place.
B.replace(old, new[, count]) -> bytes
Return a copy of B with all occurrences of subsection
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
B.remove(int) -> None
Remove the first occurance of a value in B.
B.pop([index]) -> int
Remove and return a single item from B. If no index
argument is given, will pop the last value.
B.partition(sep) -> (head, sep, tail)
Searches for the separator sep in B, and returns the part before it,
the separator itself, and the part after it.  If the separator is not
found, returns B and two empty bytearray objects.
B.lstrip([bytes]) -> bytearray
Strip leading bytes contained in the argument.
If the argument is omitted, strip leading ASCII whitespace.
B.ljust(width[, fillchar]) -> copy of B
Return B left justified in a string of length width. Padding is
done using the specified fill character (default is a space).
B.join(iterable_of_bytes) -> bytes
Concatenates any number of bytearray objects, with B in between each pair.
B.insert(index, int) -> None
Insert a single item into the bytearray before the given index.
B.index(sub [,start [,end]]) -> int
Like B.find() but raise ValueError when the subsection is not found.
bytearray.fromhex(string) -> bytearray
Create a bytearray object from a string of hexadecimal numbers.
Spaces between two numbers are accepted.
Example: bytearray.fromhex('B9 01EF') -> bytearray(b'\xb9\x01\xef').
B.find(sub [,start [,end]]) -> int
Return the lowest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
B.extend(iterable int) -> None
Append all the elements from the iterator or sequence to the
end of B.
B.expandtabs([tabsize]) -> copy of B
Return a copy of B where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
B.endswith(suffix [,start [,end]]) -> bool
Return True if B ends with the specified suffix, False otherwise.
With optional start, test B beginning at that position.
With optional end, stop comparing B at that position.
suffix can also be a tuple of strings to try.
B.decode([encoding[, errors]]) -> unicode object.
Decodes B using the codec registered for encoding. encoding defaults
to the default encoding. errors may be given to set a different error
handling scheme.  Default is 'strict' meaning that encoding errors raise
a UnicodeDecodeError.  Other possible values are 'ignore' and 'replace'
as well as any other name registered with codecs.register_error that is
able to handle UnicodeDecodeErrors.
B.count(sub [,start [,end]]) -> int
Return the number of non-overlapping occurrences of subsection sub in
bytes B[start:end].  Optional arguments start and end are interpreted
as in slice notation.
B.center(width[, fillchar]) -> copy of B
Return B centered in a string of length width.  Padding is
done using the specified fill character (default is a space).
B.append(int) -> None
Append a single item to the end of B.
B.__sizeof__() -> int
Returns the size of B in memory, in bytes
Return state information for pickling.
B.__alloc__() -> int
Returns the number of bytes actually allocated.
Abstract classes can override this to customize issubclass().
This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).
unicode(object='') -> unicode object
unicode(string[, encoding[, errors]]) -> unicode object
Create a new Unicode object from the given encoded string.
encoding defaults to the current default string encoding.
errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.
tuple() -> empty tuple
tuple(iterable) -> tuple initialized from iterable's items
If the argument is a tuple, the return value is the same object.
Type basestring cannot be instantiated; it is the base for str and unicode.
str(object='') -> string
Return a nice string representation of the object.
If the argument is a string, the return value is the same object.
slice(stop)
slice(start, stop[, step])
Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).
frozenset() -> empty frozenset object
frozenset(iterable) -> frozenset object
Build an immutable unordered collection of unique elements.
set() -> new empty set object
set(iterable) -> new set object
Build an unordered collection of unique elements.
xrange(stop) -> xrange object
xrange(start, stop[, step]) -> xrange object
Like range(), but instead of returning a list, returns an object that
generates the numbers in the range on demand.  For looping, this is 
slightly faster than range() and more memory efficient.
module(name[, doc])
Create a module object.
The name must be a string; the optional doc argument can have any type.
memoryview(object)
Create a new memoryview object which references the given object.
dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)
long(x=0) -> long
long(x, base=10) -> long
Convert a number or string to a long integer, or return 0L if no arguments
are given.  If x is floating point, the conversion truncates towards zero.
If x is not a number or if base is given, then x must be a string or
Unicode object representing an integer literal in the given base.  The
literal can be preceded by '+' or '-' and be surrounded by whitespace.
The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
list() -> new empty list
list(iterable) -> new list initialized from iterable's items
int(x=0) -> int or long
int(x, base=10) -> int or long
Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is floating point, the conversion truncates towards zero.
If x is outside the integer range, the function returns a long instead.
If x is not a number or if base is given, then x must be a string or
Unicode object representing an integer literal in the given base.  The
literal can be preceded by '+' or '-' and be surrounded by whitespace.
The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
staticmethod(function) -> method
Convert a function to be a static method.
A static method does not receive an implicit first argument.
To declare a static method, use this idiom:
     class C:
     def f(arg1, arg2, ...): ...
     f = staticmethod(f)
It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.
Static methods in Python are similar to those found in Java or C++.
For a more advanced concept, see the classmethod builtin.
classmethod(function) -> method
Convert a function to be a class method.
A class method receives the class as implicit first argument,
just like an instance method receives the instance.
To declare a class method, use this idiom:
  class C:
      def f(cls, arg1, arg2, ...): ...
      f = classmethod(f)
It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.
If a class method is called for a derived class, the derived class
object is passed as the implied first argument.
Class methods are different than C++ or Java static methods.
If you want those, see the staticmethod builtin.
function(code, globals[, name[, argdefs[, closure]]])
Create a function object from a code object and a dictionary.
The optional name string overrides the name from the code object.
The optional argdefs tuple specifies the default argument values.
The optional closure tuple supplies the bindings for free variables.
float(x) -> floating point number
Convert a string or number to a floating point number, if possible.
file(name[, mode[, buffering]]) -> file object
Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),
writing or appending.  The file will be created if it doesn't exist
when opened for writing or appending; it will be truncated when
opened for writing.  Add a 'b' to the mode for binary files.
Add a '+' to the mode to allow simultaneous reading and writing.
If the buffering argument is given, 0 means unbuffered, 1 means line
buffered, and larger numbers specify the buffer size.  The preferred way
to open a file is with the builtin open() function.
Add a 'U' to mode to open the file for input with universal newline
support.  Any line ending in the input file will be seen as a '\n'
in Python.  Also, a file so opened gains the attribute 'newlines';
the value for this attribute is one of None (no newline read yet),
'\r', '\n', '\r\n' or a tuple containing all the newline types seen.
'U' cannot be combined with 'w' or '+' mode.
enumerate(iterable[, start]) -> iterator for index, value of iterable
Return an enumerate object.  iterable must be another object that supports
iteration.  The enumerate object yields pairs containing a count (from
start, which defaults to zero) and a value yielded by the iterable argument.
enumerate is useful for obtaining an indexed list:
    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
reversed(sequence) -> reverse iterator over values of the sequence
Return a reverse iterator
property(fget=None, fset=None, fdel=None, doc=None) -> property attribute
fget is a function to be used for getting an attribute value, and likewise
fset is a function for setting, and fdel a function for del'ing, an
attribute.  Typical use is to define a managed attribute x:
class C(object):
    def getx(self): return self._x
    def setx(self, value): self._x = value
    def delx(self): del self._x
    x = property(getx, setx, delx, "I'm the 'x' property.")
Decorators make defining new properties or modifying existing ones easy:
class C(object):
    @property
    def x(self):
        "I am the 'x' property."
        return self._x
    @x.setter
    def x(self, value):
        self._x = value
    @x.deleter
    def x(self):
        del self._x
complex(real[, imag]) -> complex number
Create a complex number from a real part and an optional imaginary part.
This is equivalent to (real + imag*1j) where imag defaults to 0.
code(argcount, nlocals, stacksize, flags, codestring, constants, names,
      varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])
Create a code object.  Not for the faint of heart.
C objects to be exported from one extension module to another
C objects are used for communication between extension modules.  They
provide a way for an extension module to export a C interface to other
extension modules, so that extension modules can use the Python import
mechanism to link to one another.
instancemethod(function, instance, class)
Create an instance method object.
classobj(name, bases, dict)
Create a class object.  The name must be a string; the second argument
a tuple of classes, and the third a dictionary.
instance(class[, dict])
Create an instance without calling its __init__() method.
The class must be a classic class.
If present, dict must be a dictionary or None.
Capsule objects let you wrap a C "void *" pointer in a Python
object.  They're a way of passing data through the Python interpreter
without creating your own custom type.
Capsules are used for communication between extension modules.
They provide a way for an extension module to export a C interface
to other extension modules, so that extension modules can use the
Python import mechanism to link to one another.
bytearray(iterable_of_ints) -> bytearray.
bytearray(string, encoding[, errors]) -> bytearray.
bytearray(bytes_or_bytearray) -> mutable copy of bytes_or_bytearray.
bytearray(memory_view) -> bytearray.
Construct an mutable bytearray object from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - a bytes or a bytearray object
  - any object implementing the buffer API.
bytearray(int) -> bytearray.
Construct a zero-initialized bytearray of the given length.
buffer(object [, offset[, size]])
Create a new buffer object which references the given object.
The buffer will reference a slice of the target object from the
start of the object (or at the specified offset). The slice will
extend to the end of the target object (or with the specified size).
bool(x) -> bool
Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.
super(type, obj) -> bound super object; requires isinstance(obj, type)
super(type) -> unbound super object
super(type, type2) -> bound super object; requires issubclass(type2, type)
Typical use to call a cooperative superclass method:
class C(B):
    def meth(self, arg):
        super(C, self).meth(arg)
type(object) -> the object's type
type(name, bases, dict) -> a new type
Hello world...N(
hello.pys
zipimport provides support for importing Python modules from Zip archives.
This module exports three objects:
- zipimporter: a class; its constructor takes a path to a Zip archive.
- ZipImportError: exception raised by zipimporter objects. It's a
  subclass of ImportError, so it can be caught as ImportError, too.
- _zip_directory_cache: a dict, mapping archive paths to zip directory
  info dicts, as used in zipimporter._files.
It is usually not needed to use the zipimport module explicitly; it is
used by the builtin import mechanism for sys.path items that are paths
to Zip archives.
/__init__.pyc
/__init__.pyo
/__init__.py
.pyc
.pyo
The functions in this module allow compression and decompression using the
zlib library, which is based on GNU zip.
adler32(string[, start]) -- Compute an Adler-32 checksum.
compress(string[, level]) -- Compress string, with compression level in 0-9.
compressobj([level]) -- Return a compressor object.
crc32(string[, start]) -- Compute a CRC-32 checksum.
decompress(string,[wbits],[bufsize]) -- Decompresses a compressed string.
decompressobj([wbits]) -- Return a decompressor object.
'wbits' is window buffer size.
Compressor objects support compress() and flush() methods; decompressor
objects support decompress() and flush().
/usr
python2.7
os.py
.pyc
/usr
python2.7
lib-dynload
/usr/bin/python
2.7.9 (default, Jun 29 2016, 13:11:10) 
[GCC 4.9.2]
default, Jun 29 2016, 13:11:10
unknown
`'	&
`	X,
 	X,
 	X,
 	X,
`	X,
`	X,
  X,
p53.
`.X,
0"X,
@#X,
@%X,
 &X,
 -X,
`.X,
`.X,
@/X,
@0X,
`0X,
 2X,
P2X,
piS(
@xS(
piS(
@xS(
@8X,
P8X,
 9X,
@;X,
@;X,
@;X,
`;X,
`;X,
@@X,
 EX,
@EX,
`EX,
 GX,
@GX,
pGX,
 JX,
@JX,
pJX,
 W5.
@W5.
0MX,
0RX,
0RX,
@RX,
@;X,
 ZX,
@ZX,
`ZX,
P[X,
`\X,
piS(
@xS(
 bX,
@bX,
`bX,
`(b,
peX,
P[X,
piS(
@xS(
piS(
@xS(
0eX,
`eX,
peX,
`OT(
 fX,
`OT(
 fX,
 fX,
 fX,
@fX,
`fX,
 gX,
@gX,
0eX,
`eX,
pvX,
piS(
@xS(
P[X,
P[X,
p~X,
P~X,
P}X,
p~X,
p}X,
0~X,
@_ &
0Q &
 Q &
@S &
`T &
0R &
0V &
 #!&
`&$&
P"#&
piS(
@xS(
pU$&
piS(
@xS(
0S$&
`V$&
PV$&
pV$&
pX$&
PX$&
@>'&
P<'&
@='&
`?'&
 d'&
`d'&
`l'&
pa'&
@ (&
 H(&
0C(&
@4(&
@4(&
PP(&
pJ(&
@K(&
0s(&
`J(&
PK(&
 r(&
PM(&
pN(&
PL(&
 Q(&
`K(&
PJ(&
0K(&
Pg(&
p\5.
`X)&
`J)&
0_5.
Pm)&
`w)&
`k)&
p|)&
Ph)&
P]*&
pN*&
 L*&
`^*&
@w*&
 I*&
@I*&
pI*&
P'*&
@7*&
pR*&
P#*&
P#*&
`:.&
`'.&
0=.&
0*.&
@t+&
@t+&
0r+&
0r+&
 p+&
 p+&
p"+&
pO.&
0$+&
 j.&
@;+&
`K.&
P`.&
0U.&
 Q.&
P5+&
`%+&
P	Y,
p	Y,
`s-&
p9+&
`k-&
01+&
`T-&
`L-&
  +&
`~,&
`0,&
 /,&
Pu,&
pY+&
pY+&
Pv+&
`W+&
`W+&
PU+&
0 Y,
PU+&
@}+&
P Y,
0G,&
 '+&
0G-&
0A,&
`/+&
P=-&
0!Y,
P!Y,
0;,&
05,&
@+-&
0"Y,
P"Y,
p"Y,
0#Y,
`-Y,
0P+&
 H+&
0.Y,
P.Y,
p.Y,
p3Y,
P3/&
 B/&
@Q/&
`:/&
 6Y,
@6Y,
p6Y,
`7/&
P8Y,
@&/&
p8Y,
@9Y,
 l/&
`9Y,
0l/&
 p/&
@m/&
`o/&
pq/&
@l/&
 <Y,
@<Y,
`<Y,
 (0&
P20&
p80&
p80&
0>Y,
P>Y,
p>Y,
P'0&
pBY,
pBY,
0CY,
PCY,
`t3&
 GY,
pB0&
pC0&
@GY,
`B0&
`C0&
`GY,
PB0&
PC0&
@B0&
@C0&
0B0&
0C0&
 B0&
 C0&
 HY,
@HY,
`HY,
0(3&
 Y3&
 IY,
@@3&
@IY,
`IY,
`'3&
 JY,
@JY,
`JY,
pFY,
@FY,
PFY,
`FY,
0TY,
PUY,
pVY,
@@0&
Pp0&
pW0&
pk0&
0@0&
0TY,
@t0&
 W0&
PTY,
Pw0&
pTY,
 @0&
pA0&
`^0&
po0&
PA0&
`A0&
0~0&
@L4&
`X0&
@L4&
0UY,
pP0&
0A0&
@A0&
PUY,
0?4&
pUY,
Pm0&
@{0&
0?4&
 A0&
@}0&
`s0&
0l0&
`P0&
`a0&
0[0&
0VY,
`z0&
PVY,
P|0&
pVY,
0x0&
0WY,
PWY,
pWY,
0XY,
pN0&
pM2&
PXY,
p?0&
`F2&
pXY,
`?0&
`N0&
P?0&
pO0&
@?0&
PN0&
P02&
0?0&
`O0&
p@0&
@)2&
 ?0&
@N0&
`@0&
PO0&
P@0&
0YY,
PA2&
PYY,
@L0&
pYY,
0$2&
pD0&
PD0&
@f0&
`K0&
`D0&
0!1&
0D0&
@D0&
 D0&
0ZY,
p(2&
PZY,
P"1&
@e0&
pZY,
  1&
p92&
pRY,
PqY,
prY,
@SY,
0qY,
@=0&
PP0&
PqY,
 n0&
pqY,
Pj0&
0=0&
@P0&
@`0&
@Z0&
pv0&
 =0&
0P0&
0q0&
0rY,
0i0&
PrY,
 P0&
prY,
@]0&
 u0&
@V0&
0o3&
0sY,
PsY,
0T0&
`T0&
psY,
@S0&
PtY,
ptY,
0Q0&
`Q0&
pM0&
0uY,
0N0&
PuY,
@O0&
p>0&
puY,
 N0&
`>0&
0O0&
P>0&
@>0&
p<0&
 O0&
0>0&
`<0&
 >0&
P<0&
0vY,
0I0&
PvY,
PH0&
@d0&
p=0&
pG0&
P=0&
`=0&
0wY,
PwY,
pwY,
@pY,
0<0&
@<0&
0_2&
0_2&
 _0&
PY0&
ph0&
PV2&
PV2&
 b0&
 R0&
`M0&
pS0&
PM0&
 U0&
@M0&
pV0&
0M0&
 <0&
 31&
 \0&
@g0&
 ;0&
 M0&
PU0&
PR0&
@/1&
@c0&
 F0&
P51&
p;0&
P;0&
@E0&
`;0&
@A1&
0;0&
@;0&
@|4&
Pu4&
 v4&
pu4&
@u4&
0v4&
`u4&
`z4&
0x4&
 {4&
@v4&
0u4&
`}5&
Ph5&
P65&
0*5&
 )5&
p 5&
 (5&
pv6&
 t6&
 q6&
@q6&
P)6&
pq6&
`P6&
@`6&
pz6&
pL6&
pL6&
P~7&
po7&
 m7&
 j7&
@j7&
`&7&
pj7&
PH7&
@X7&
ps7&
`D7&
`D7&
0y8&
@i8&
@f8&
`f8&
PU8&
p"8&
Pv8&
Pv8&
p@8&
p@8&
0z9&
0w9&
Pw9&
 k9&
`/9&
099&
PB9&
PB9&
p*9&
0t:&
@p:&
@p:&
pP;&
0|;&
PI;&
0K;&
p%Z,
0&Z,
P&Z,
pk;&
p&Z,
p8;&
`{;&
p+Z,
@%Z,
p+Z,
pg;&
pg;&
0,Z,
p7;&
p.Z,
 /Z,
@/Z,
`/Z,
p0Z,
P/<&
 1Z,
03Z,
`uI&
 N3.
 4Z,
0wL&
pCN&
0yL&
 wL&
 5Z,
@5Z,
 yL&
`5Z,
pvL&
`1N&
`vL&
PvL&
pxL&
@vL&
 6Z,
@6Z,
`6Z,
P<Z,
p;Z,
puL&
@yL&
 vL&
0vL&
`uL&
0<Z,
PuL&
pyL&
`SN&
P<Z,
p<Z,
@uL&
@^N&
0uL&
0=Z,
poN&
P=Z,
p=Z,
 uL&
pQN&
`mN&
`xL&
PxL&
@QM&
0>Z,
p\M&
P>Z,
0NM&
p>Z,
`wL&
pwL&
pPM&
@wL&
PwL&
PaM&
@;Z,
0JZ,
PJZ,
pJZ,
`yL&
PON&
p@N&
p@N&
PyL&
`tL&
ptL&
@=N&
`.N&
`.N&
0KZ,
PKZ,
psL&
0zL&
`zL&
0LZ,
PLZ,
`sL&
pLZ,
PsL&
@xL&
PtL&
@sL&
@tL&
0sL&
0xL&
0tL&
 sL&
 tL&
`~L&
 PM&
@PM&
@MZ,
`MZ,
`^M&
`tM&
P#N&
`{M&
0XZ,
`{M&
PXZ,
@|L&
p|L&
0YZ,
PYZ,
 xL&
pYZ,
p2M&
 {L&
P{L&
0`Z,
0bZ,
PbZ,
pbZ,
0!Q&
peZ,
PeZ,
p(R&
peZ,
p-R&
p-R&
 (Q&
P*R&
0fZ,
PfZ,
0)R&
pfZ,
0]Q&
0gZ,
PgZ,
pgZ,
0&Q&
P$Q&
 eZ,
 LQ&
p5Q&
p5Q&
`/Q&
0	Q&
@3Q&
0pZ,
@3Q&
0.Q&
PpZ,
P)Q&
0qZ,
PqZ,
pqZ,
 KQ&
pFQ&
p"Q&
0xZ,
pGQ&
`MQ&
`gQ&
`GR&
 |Z,
@|Z,
0VR&
`|Z,
PTR&
p{Z,
 ;R&
`7R&
p7R&
p>R&
 <S&
PjR&
 =R&
 <S&
PjR&
`WR&
@;R&
@7R&
P7R&
00S&
@hR&
`ER&
00S&
@hR&
P\R&
PKR&
POR&
p#S&
 NR&
07R&
 7R&
 8R&
P@R&
08R&
0JR&
p~Z,
 9R&
 6R&
0;R&
0CR&
p=R&
P;R&
pZR&
p6R&
P6R&
`6R&
06R&
@8R&
@6R&
0QR&
pRR&
0?R&
PBR&
0AR&
@<R&
pLR&
p:R&
p<R&
@tR&
0aR&
@AS&
0AS&
pAS&
 AS&
`AS&
0DS&
PAS&
pYS&
0PS&
pRS&
P[S&
@DS&
@FS&
`DS&
0GS&
`MS&
`VS&
p@S&
`@S&
 DS&
 CS&
 TS&
@@S&
pIS&
@BS&
P@S&
PDS&
 @S&
0@S&
PnS&
pJS&
@NS&
PnS&
pDS&
0IS&
@US&
0]S&
p^S&
PHS&
0KS&
 lS&
 lS&
0ES&
`ES&
PQS&
0XS&
piS&
P:T&
@BT&
pGT&
pJT&
@NT&
POT&
@RT&
0HT&
PET&
@CT&
 MT&
`PT&
pKT&
PQT&
`wU&
0fU&
0cU&
PcU&
@RU&
p$U&
 rU&
 rU&
pQU&
`=U&
`=U&
p,V&
`/V&
`,V&
P,V&
@,V&
@=V&
pCV&
PJV&
`>V&
0AV&
 ,V&
0,V&
03V&
0_V&
@9V&
0_V&
 LV&
0GV&
P/V&
PBV&
pHV&
P4V&
P.V&
p+V&
P5V&
P+V&
`+V&
`8V&
02V&
P6V&
@0V&
0OV&
p0V&
@/V&
p/V&
@+V&
0+V&
p-V&
 +V&
 :V&
`aV&
PMV&
 <V&
PEV&
0/V&
01V&
`1V&
 iV&
@3W&
03W&
p3W&
 3W&
`3W&
06W&
P3W&
PCW&
pPW&
@6W&
pdW&
@8W&
@@W&
pdW&
`6W&
09W&
`bW&
`bW&
0OW&
p2W&
`2W&
 6W&
 5W&
`HW&
0JW&
0BW&
@2W&
0;W&
@4W&
P2W&
P6W&
 2W&
02W&
P`W&
p<W&
`?W&
P`W&
p6W&
pKW&
p;W&
@GW&
 FW&
P:W&
0=W&
 ^W&
 ^W&
07W&
`7W&
@}W&
pDW&
PMW&
`nW&
p[W&
P0X&
 1X&
p0X&
@0X&
01X&
`0X&
@JX&
`5X&
 6X&
@zX&
@7X&
@1X&
00X&
03X&
`QX&
PtY&
0wY&
`DY&
p'Y&
0	[,
P	[,
p	[,
P!Z&
p7Z&
p7Z&
`$Z&
@5Z&
@5Z&
P)Z&
@qZ&
0sZ&
 bZ&
p'Z&
0#Z&
@	Z&
@PZ&
p	Z&
`AZ&
0.Z&
@![,
`![,
P`[&
p#[,
`*[&
Pk[&
`d[&
0e[&
Pd[&
@e[&
pd[&
`}[&
0%[,
P%[,
0j[&
Pe[&
@d[&
 e[&
@'[,
@g[&
pi[&
P([,
p([,
0$\&
p*[,
 +[,
@-[,
P1\&
`-[,
 E\&
 .[,
0=\&
`K\&
0-[,
p0[,
0.\&
 5\&
@`\&
@`\&
0M\&
 .\&
`.\&
p.\&
@<\&
@7\&
`;\&
 R\&
01[,
 A\&
`F\&
P1[,
@1\&
p1[,
P>\&
p1\&
P.\&
@.\&
@/\&
@6\&
P/\&
@B\&
@H\&
 /\&
@0\&
0/\&
02[,
00[,
08[,
@0[,
`-\&
08[,
09\&
 4\&
P8[,
p8[,
02\&
@P\&
`2\&
`C\&
P-\&
01\&
@-\&
`1\&
09[,
0-\&
P9[,
p-\&
`/\&
p?\&
p4\&
`8\&
pb\&
0>[,
`N\&
p>[,
 -\&
 1\&
 J\&
 3\&
P3\&
0j\&
05]&
0B[,
 C]&
PB[,
pB[,
PE[,
01]&
@5]&
P=]&
@7]&
P;]&
0E[,
 1]&
`5]&
`1]&
p1]&
PE[,
08]&
p<]&
pE[,
0M]&
P1]&
 5]&
@1]&
0F[,
@2]&
 4]&
P2]&
PF[,
pF[,
 2]&
02]&
pN]&
pL[,
0L[,
@3]&
PL[,
@0]&
P5]&
pL[,
0>]&
@X]&
p5]&
PP]&
@D]&
PK]&
0M[,
00]&
PM[,
 0]&
pM[,
p0]&
0:]&
0H]&
`E]&
P0]&
p:]&
`2]&
`0]&
P9]&
`]]&
`]]&
 f]&
06]&
`6]&
@S[,
pA]&
`S[,
pI]&
PV[,
@5^&
pV[,
08^&
05^&
 8^&
 5^&
`8^&
 I^&
0W[,
0E^&
@V[,
`4^&
p8^&
 g^&
p:^&
`A^&
 g^&
P4^&
 C^&
`;^&
 :^&
0Z[,
 >^&
PZ[,
@J^&
 O^&
pZ[,
@4^&
`K^&
04^&
 4^&
P8^&
p4^&
p5^&
P7^&
@R^&
0[[,
P5^&
 =^&
`5^&
P[[,
@M^&
PY[,
0a[,
`Y[,
p6^&
p3^&
0a[,
 <^&
Pa[,
p[^&
pa[,
 W^&
09^&
`P^&
`3^&
P3^&
0b[,
@3^&
@8^&
Pb[,
`=^&
PF^&
@?^&
@B^&
Pi^&
`9^&
@U^&
@h[,
`h[,
03^&
pG^&
@k[,
0=_&
 :_&
`k[,
0{_&
0>_&
pm[,
`E_&
P;_&
@<_&
@@_&
 C_&
0n[,
`B_&
`F_&
 l_&
0I_&
0p[,
0s_&
 J_&
0q[,
Pq[,
pq[,
0s[,
Ps[,
ps[,
P%`&
0x[,
px[,
Pm`&
 2`&
P6`&
@4`&
 }[,
PC`&
02`&
@}[,
`}[,
P9`&
 l`&
0<`&
Pb`&
P=`&
 h`&
@`a&
@`a&
 Za&
` a&
P4a&
 oa&
pia&
pda&
`da&
pja&
Pda&
pea&
0!b&
@da&
`ja&
`ea&
p'b&
0da&
Pea&
 da&
Pja&
@ea&
0ea&
p1b&
@ja&
 ea&
 qa&
`xa&
 ha&
`}a&
`qa&
@ca&
0ja&
 ta&
Psa&
Pva&
`na&
@la&
0wa&
pua&
0ra&
@ma&
Pka&
0ca&
 ja&
 ca&
@%b&
Pya&
`pa&
 pa&
@ga&
pca&
`fa&
Pca&
`oa&
`ca&
pHb&
 {a&
@|a&
@!c&
0Fc&
PGc&
PFc&
 Fc&
`Gc&
@Fc&
@Hc&
PJc&
 Mc&
pGc&
@Gc&
``c&
 dc&
`Fc&
Pwc&
0hd&
@Vd&
0jd&
@Sd&
`Sd&
 wd&
P;d&
P3d&
P\d&
 ^d&
0(d&
`Fe&
pQe&
@Se&
 Ae&
P3e&
p`e&
0ae&
``e&
Pae&
`fe&
pae&
@`e&
P`e&
`ue&
@be&
`ue&
@oe&
0le&
 ae&
@ae&
0`e&
`ae&
 `e&
pme&
@ce&
0se&
@de&
0se&
0ie&
Pje&
ppe&
`3f&
@	f&
@;f&
 ;f&
P;f&
`<f&
P]f&
@}f&
 Af&
`;f&
0;f&
@?f&
`cn&
@zn&
@	v&
 	v&
piS(
@xS(
piS(
@xS(
@>v&
09v&
 4v&
@>v&
09v&
 4v&
0%v&
p&v&
P'v&
`&v&
@'v&
`.w&
0/w&
PQv&
@mv&
`.w&
0/w&
`bv&
@Xw&
`Xw&
0Xw&
 Xw&
`.w&
0/w&
 'x&
@'x&
0'x&
`Jx&
p>x&
`&x&
p-x&
0)x&
 2x&
@Lx&
P&x&
`'x&
@&x&
0&x&
@4x&
00x&
0,x&
 Nx&
p&x&
p6x&
p/x&
P+x&
 &x&
05x&
 6x&
0/x&
p*x&
`3x&
P_x&
 7x&
 Dx&
p2y&
`%x&
P'x&
P%x&
@%x&
0%x&
 %x&
p'x&
p%x&
@Bx&
 Ix&
@Ax&
`Ex&
 @x&
P1x&
@Rx&
 *x&
0.x&
p0x&
 (x&
P(x&
`9x&
P=x&
@Gx&
0<x&
0{x&
@8x&
`wx&
@=z&
@=z&
`"\,
 '{&
p'{&
P+{&
`){&
@-{&
0$\,
P0{&
0/{&
p$\,
piS(
@xS(
@>v&
09v&
 4v&
0%v&
P'v&
`&v&
 D|&
@%\,
@P|&
piS(
@xS(
 %|&
`*|&
@%\,
`R|&
@%\,
PR|&
@%\,
@R|&
@%\,
0R|&
@>v&
09v&
 4v&
P'v&
@%\,
pR|&
0E|&
PD|&
pD|&
0.\,
P.\,
p.\,
`3\,
05\,
piS(
@xS(
piS(
@xS(
 6\,
@6\,
0;\,
 <\,
P>\,
pY~&
0>\,
@]~&
0X~&
P>\,
p>\,
@k~&
`b~&
 X~&
pX~&
 }~&
0}~&
0~~&
@~~&
0A\,
P~~&
 C\,
 ~~&
PC\,
@}~&
pC\,
0E\,
PE\,
pE\,
0F\,
PF\,
pI\,
 J\,
PJ\,
pJ\,
`M\,
PM\,
0O\,
0O\,
PO\,
pO\,
0P\,
PP\,
PT\,
0T\,
PT\,
pT\,
0U\,
PU\,
pU\,
0Y\,
`Y\,
0]\,
P]\,
p]\,
 a\,
@a\,
`a\,
Pc\,
pc\,
@d\,
`d\,
0g\,
Pg\,
pg\,
@j\,
`j\,
0l\,
Pl\,
pl\,
0q\,
@q\,
`q\,
09v&
 4v&
0%v&
p&v&
`&v&
@'v&
`.w&
0/w&
`.w&
0/w&
`w\,
Pw\,
pw\,
@y\,
@y\,
piS(
@xS(
@y\,
@y\,
@y\,
`y\,
piS(
@xS(
`y\,
`y\,
`y\,
@~\,
P~\,
`~\,
`(b,
`OT(
`OT(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
@;X,
0!],
P!],
p!],
0"],
P"],
P ],
0(],
` ],
0(],
P(],
p(],
0)],
P)],
@/],
`/],
P2],
p2],
03],
@2],
06],
P6],
p6],
07],
P7],
P5],
0=],
`5],
0=],
P=],
p=],
0>],
P>],
p>],
0D],
PD],
pD],
@G],
`G],
0J],
PJ],
pJ],
0L],
PL],
@P],
 R],
@R],
`R],
0T],
PT],
pT],
0Y],
pY],
 ]],
@]],
`]],
0a],
Pa],
Pd],
pd],
pf],
0g],
0i],
 j],
@j],
`j],
0l],
`l],
pn],
 p],
@p],
`p],
0r],
Pr],
ps],
pu],
0w],
Px],
px],
0y],
Py],
0|],
0|],
P|],
p|],
0"\,
0#^,
P#^,
0$^,
P$^,
0(^,
`(^,
p*^,
 -^,
@-^,
p-^,
P/^,
p/^,
@0^,
`0^,
p2^,
04^,
P4^,
@6^,
P7^,
p7^,
p9^,
0;^,
P;^,
@=^,
P>^,
p>^,
p@^,
0A^,
0C^,
 D^,
@D^,
`D^,
0F^,
@F^,
`F^,
0J^,
0L^,
PL^,
pL^,
0P^,
`K^,
0P^,
PP^,
pP^,
0S^,
@T^,
PT^,
 U^,
04Z,
04Z,
0W^,
@W^,
 X^,
0X^,
@X^,
PX^,
`X^,
pX^,
 Y^,
0Y^,
@Y^,
PY^,
p]^,
@^^,
``^,
 a^,
@a^,
`a^,
 b^,
@b^,
`b^,
 _^,
@_^,
`_^,
 ^^,
P^^,
p^^,
 e^,
`e^,
 f^,
`f^,
 i^,
@i^,
`i^,
``^,
 a^,
@a^,
`a^,
 b^,
@b^,
`b^,
 c^,
@c^,
`c^,
 d^,
@d^,
`d^,
 e^,
`e^,
 f^,
`f^,
 g^,
@g^,
`g^,
 h^,
 i^,
@i^,
`i^,
 j^,
@j^,
`j^,
@k^,
`k^,
 M_,
@M_,
`M_,
 N_,
`N_,
 M_,
@M_,
 .$'
`M_,
 .$'
 N_,
  $'
@-$'
`N_,
P"$'
  $'
@-$'
`!$'
0U_,
PU_,
`V_,
0V_,
 X_,
`X_,
PV_,
0e('
`V_,
 e('
Pv('
0f('
@r('
 h('
@h('
 F*'
Pd('
`d('
pd('
 d('
0d('
@d('
Pm('
@i('
`i('
 W_,
 e('
Pv('
@W_,
Pf('
pf('
@r('
`W_,
`h('
 F*'
Pd('
`d('
pd('
 d('
0d('
@d('
Pm('
0g('
 X_,
`X_,
@o('
Pn('
Pp('
Pb_,
`b_,
`{,'
pb_,
 ~/'
 c_,
`c_,
pc_,
`c_,
`c_,
`c_,
 e_,
0e_,
@e_,
Pe_,
`e_,
pe_,
PQ9'
`c_,
`V8'
0V8'
@Y8'
 V8'
PV8'
pc_,
0W8'
`W8'
0V8'
@X8'
 V8'
PV8'
@[8'
0V8'
@X8'
 V8'
PV8'
pV8'
`V8'
0V8'
@Y8'
 V8'
PV8'
`V8'
0V8'
@Y8'
 V8'
PV8'
Pz8'
`V8'
0V8'
@Y8'
 V8'
PV8'
Pz8'
`V8'
0V8'
@Y8'
 V8'
PV8'
Pz8'
`^8'
0d_,
`V8'
0V8'
@Y8'
 V8'
PV8'
Pz8'
Pd_,
 ]8'
@]8'
`V8'
0V8'
@Y8'
 V8'
PV8'
Pz8'
pd_,
`V8'
0V8'
@Y8'
 V8'
PV8'
Pz8'
 f8'
 \8'
`V8'
0V8'
@Y8'
 V8'
PV8'
Pz8'
@\8'
`\8'
`V8'
0V8'
@Y8'
 V8'
PV8'
Pz8'
`V8'
0V8'
@Y8'
 V8'
PV8'
0n_,
Pn_,
pn_,
`q_,
@q_,
`q_,
 r_,
@r_,
`r_,
 h<'
`C<'
0q_,
0.;'
0y_,
Py_,
@z_,
`z_,
 Y<'
@3;'
P ;'
0	<'
P=<'
0t:'
p|:'
 u:'
 g:'
`G:'
` :'
`A<'
 YF'
pWF'
06Q'
PiQ'
 +Q'
@eQ'
p'Q'
0ZG'
PLQ'
PPF'
pqQ'
0	F'
P	F'
 ]Q'
0aQ'
@AQ'
`mQ'
06Q'
PiQ'
 +Q'
@eQ'
p'Q'
0ZG'
PLQ'
PPF'
pqQ'
p	F'
 ]Q'
0aQ'
@AQ'
`mQ'
P=F'
@/F'
P.F'
`<F'
`-F'
p,F'
0MF'
@>F'
0?F'
 ;F'
@9F'
 RF'
0:F'
p;F'
`bG'
 "F'
0!F'
@ F'
PEF'
@/F'
@4F'
P.F'
P3F'
0GF'
`-F'
p,F'
0MF'
pIF'
 1F'
p1F'
pCF'
`2F'
 RF'
0DF'
05F'
pFF'
`bG'
 "F'
0!F'
@ F'
pXG'
@aG'
0"S'
pXG'
@aG'
0"S'
PYG'
`AF'
p@F'
 @F'
 `G'
PBF'
 6F'
p6F'
pLF'
P8F'
PHF'
PYG'
`7F'
 `G'
00F'
0JF'
PKF'
 WW'
@UW'
0VW'
`TW'
PTW'
@TW'
0TW'
pTW'
P!`,
p!`,
@"`,
`"`,
p$`,
0%`,
P%`,
p%`,
0&`,
P&`,
p&`,
p-`,
 /`,
@/`,
`/`,
 6`,
@6`,
`6`,
08`,
P8`,
p8`,
p<`,
p<`,
0=`,
P=`,
p=`,
0A`,
PA`,
0D`,
PD`,
pD`,
 H`,
@H`,
pH`,
PJ`,
pJ`,
@K`,
`K`,
pM`,
0O`,
PO`,
 Q`,
@Q`,
`Q`,
0U`,
PU`,
pU`,
PX`,
0X`,
PX`,
pX`,
0Y`,
PY`,
pY`,
p_`,
0_`,
P_`,
p_`,
0``,
P``,
p``,
0e`,
0e`,
Pe`,
pe`,
0h`,
 i`,
@i`,
`i`,
 j`,
@j`,
pn`,
Pn`,
pn`,
0o`,
Po`,
po`,
0p`,
0w`,
Pw`,
pw`,
@{`,
 {`,
@{`,
`{`,
 |`,
@|`,
`|`,
`H	(
  a,
0 a,
@ a,
P a,
` a,
p a,
 !a,
0!a,
@!a,
P!a,
`!a,
p!a,
@'((
 )a,
 *a,
@;X,
 *a,
P*a,
0*a,
 97(
`*a,
`*a,
 -a,
`-a,
 -a,
piS(
@xS(
 -a,
 -a,
 -a,
 -a,
`-a,
piS(
@xS(
`-a,
`-a,
`-a,
`-a,
piS(
@xS(
p8a,
P9a,
p8a,
 `9(
p_9(
pZ9(
@Y9(
pX9(
P>9(
069(
09a,
08a,
P9a,
p9a,
PI9(
pJ9(
 K9(
PW9(
pP9(
 S9(
P8a,
 `9(
p_9(
pZ9(
@Y9(
pX9(
P>9(
069(
pH9(
0I9(
pT9(
@^^,
`Fa,
`Ga,
@Fa,
@Fa,
 ^:(
@^:(
`Fa,
@d:(
`Fa,
XIa,
`j:(
pb:(
 Ga,
`i:(
 Ga,
 Ga,
Pj:(
`Ga,
`^:(
 a:(
`Ga,
HLa,
 `:(
`o:(
Pi:(
 _:(
 Ha,
 q:(
 Ha,
 d:(
 Ha,
0d:(
Nm^\
{*eU
sao5
(0'yX
xzxv
9N O6
Q/xtJ2
X!;3; 
6qo~
	Hr9
s(Fdi
(U1h
#Q7z
r$0I
A2VPD
9C#U
)E\\*=
)E\\*=
3Wk1^
0$\,
Paa,
Paa,
0aa,
0/{&
Paa,
@z:(
pz:(
`aa,
@{:(
@ba,
@ba,
piS(
@xS(
@ba,
@ba,
@ba,
@ba,
`.w&
0/w&
`w;(
0y;(
piS(
@xS(
 (;(
 y;(
`t;(
`.w&
0/w&
`"<(
 #<(
 ja,
@ka,
@ka,
piS(
@xS(
@ka,
@ka,
@ka,
`ka,
piS(
@xS(
0!=(
 8=(
`ka,
@l=(
`ka,
0l=(
`ka,
Pl=(
@d=(
`d=(
 d=(
ppa,
@qa,
`qa,
 sa,
piS(
@xS(
piS(
@xS(
 sa,
0sa,
Psa,
@#>(
p">(
`*>(
`:>(
Pn>(
P|a,
p|a,
p2?(
@T?(
05?(
p'?(
P)?(
@!?(
 7?(
pM?(
0}a,
 8?(
0K?(
P}a,
PL?(
p}a,
@O?(
0<?(
P>?(
P??(
0~a,
PA?(
P~a,
0+?(
0"?(
p~a,
PD?(
PE?(
@F?(
0G?(
 H?(
piS(
@xS(
piS(
@xS(
 a?(
P.@(
`N@(
 O@(
0N@(
`i@(
`j@(
 m@(
@h@(
piS(
@xS(
 !A(
piS(
@xS(
p!A(
`!A(
P!A(
@!A(
`HA(
PIA(
 YA(
POA(
0WA(
 RA(
 MA(
`NA(
`@B(
piS(
@xS(
@@B(
0@B(
P@B(
 IB(
 HB(
pVB(
 ZB(
P[B(
piS(
@xS(
piS(
@xS(
``B(
P*C(
P+C(
P;C(
PgC(
P+D(
@eD(
@}D(
P}D(
piS(
@xS(
piS(
@xS(
`%F(
p'F(
P(F(
@$F(
 #F(
@#F(
 &F(
`#F(
`BF(
piS(
@xS(
`8G(
piS(
@xS(
@8G(
08G(
P8G(
01G(
P1G(
@BG(
 BG(
`(b,
0[G(
`XG(
PZG(
0WG(
 YG(
 \G(
PWG(
`]G(
pWG(
PPT(
`OT(
`IG(
PPT(
`OT(
p_G(
 _G(
0`G(
0_G(
P_G(
`IG(
@_G(
`0H(
0%H(
05H(
`5H(
 'H(
0'H(
@'H(
P'H(
`'H(
p'H(
0/H(
p+H(
`)H(
 %H(
@%H(
P%H(
`%H(
@6H(
p.H(
0-H(
 +H(
p*H(
 &H(
0&H(
`7H(
@&H(
P&H(
`&H(
@<H(
 AH(
0gH(
 iH(
 gH(
09v&
 4v&
09v&
 4v&
@)I(
p0I(
`LI(
`(b,
piS(
@xS(
`OT(
pAJ(
`OT(
pAJ(
@wJ(
piS(
@xS(
piS(
@xS(
piS(
@xS(
pNJ(
 [L(
pZL(
p~L(
PSL(
`~L(
0;L(
`<L(
0AL(
pBL(
0NL(
@9L(
0:L(
@PL(
0fL(
 CL(
@ML(
 [L(
pZL(
p~L(
PSL(
@HL(
P-b,
p2P(
`<P(
@<P(
p2P(
`'P(
`.P(
0LP(
PLP(
`(b,
POP(
0OP(
`OT(
`(b,
PPT(
`OT(
`WP(
0zP(
`OT(
PZP(
`YP(
`OT(
 UP(
@TP(
@YP(
0ZP(
PUP(
PYP(
@ZP(
0zP(
`OT(
@UP(
PTP(
PZP(
0~P(
`~P(
`UP(
0}P(
piS(
@xS(
piS(
@xS(
@	R(
piS(
@xS(
piS(
@xS(
 ZS(
@;X,
piS(
@xS(
@!b,
@!b,
p!b,
@=T(
P<T(
P!b,
 =T(
0>T(
 !b,
0#b,
0DT(
piS(
@xS(
0#b,
0#b,
0#b,
pDT(
`%b,
 LT(
@LT(
`.P(
`(b,
pOT(
PPT(
`OT(
@|T(
`|T(
`(b,
PPT(
`OT(
PPT(
`OT(
p,b,
@;X,
p-b,
P-b,
P-b,
p(P(
P/b,
p/b,
0%U(
p U(
0#U(
0!U(
piS(
@xS(
piS(
@xS(
 /U(
`+U(
P4U(
pvU(
06b,
 8b,
p(V(
0(V(
09b,
p%W(
piS(
@xS(
piS(
@xS(
p8W(
@>b,
`>b,
0?b,
0?b,
P	X(
P?b,
p?b,
0 X(
`"X(
p!X(
 !X(
P#X(
0Ab,
PAb,
pAb,
0Bb,
P.X(
`+Y(
PBb,
P;X(
@*Y(
pBb,
P%X(
p9X(
 )Y(
@)X(
0-X(
08X(
03X(
0Cb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
PKb,
pKb,
PJX(
 Kb,
pDX(
 (X(
p/X(
0Lb,
PLb,
p4X(
pLb,
`*X(
0?X(
0Mb,
PMb,
P1X(
pMb,
P6X(
0$X(
0Nb,
p&X(
PNb,
`4Y(
p3Y(
@PY(
 OY(
08Y(
 6Y(
p:Y(
p2Y(
05Y(
 YY(
P	Z(
0^b,
p(Z(
P^b,
p^b,
0+Z(
0`b,
 EZ(
P`b,
pPZ(
`\Z(
0SZ(
0ab,
`bZ(
PPZ(
`PZ(
Pab,
PcZ(
0PZ(
PRZ(
@PZ(
pab,
paZ(
 PZ(
 aZ(
@[Z(
pQZ(
@dZ(
PTZ(
0bb,
@TZ(
Pbb,
pOZ(
pbb,
0TZ(
`OZ(
POZ(
 TZ(
@OZ(
pNZ(
0OZ(
`NZ(
 OZ(
PNZ(
pTZ(
0cb,
@NZ(
Pcb,
0NZ(
`TZ(
pcb,
0lZ(
`rZ(
0db,
pnZ(
P|Z(
Pdb,
 pZ(
pdb,
@qZ(
PwZ(
0tZ(
 ?b,
 ?b,
 ?b,
 ?b,
 ?b,
 ?b,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
 ?b,
 NZ(
pWZ(
0ob,
 ]Z(
`WZ(
Pob,
pob,
pLZ(
PWZ(
`LZ(
@WZ(
p]Z(
 ZZ(
PLZ(
0pb,
0_Z(
 n[(
Ppb,
`iZ(
ppb,
@LZ(
`YZ(
p`[(
PVZ(
0yZ(
0LZ(
PMZ(
`MZ(
pMZ(
P^Z(
 gZ(
puZ(
0qb,
 LZ(
 MZ(
0MZ(
@MZ(
Pqb,
pqb,
pzZ(
@XZ(
`7[(
`UZ(
peZ(
0rb,
@hZ(
Prb,
0~Z(
prb,
PmZ(
p~b,
p{\(
 6\(
pC\(
0l\(
@4\(
`4\(
0z\(
0e\(
0e\(
0*\(
 `\(
`(b,
`OT(
09v&
 4v&
 f](
pe](
`e](
`c](
`OT(
pQ](
@c](
0c](
Pe](
09v&
 4v&
`(b,
`OT(
`OT(
 \_(
0X_(
`(b,
`OT(
`\`(
0\`(
P\`(
`OT(
07a(
@7a(
P7a(
`7a(
p7a(
@Ea(
PEa(
 Ea(
0Ea(
`1f(
 7f(
0Ef(
`Rf(
p_f(
P>f(
P9f(
@3k(
P5k(
@=k(
@1k(
@2k(
P.k(
Pet(
P0t(
0-t(
P+t(
@,t(
p:t(
P6t(
 dt(
@.t(
@3t(
PYt(
05t(
p7t(
``t(
0Ou(
 Vu(
`Vu(
@Vu(
pVu(
0Vu(
 [u(
@]u(
@`u(
`gu(
PVu(
pZu(
@au(
`bu(
0(w(
 *w(
 ,w(
P-w(
pZ~(
 u~(
Pj~(
piS(
@xS(
07a(
P7a(
piS(
@xS(
p}~(
`x~(
@y~(
px~(
07a(
P7a(
`y~(
`.w&
0y~(
`(b,
`OT(
PPT(
`OT(
PPT(
`OT(
`OT(
 *c,
0*c,
@/c,
@2c,
8,c,
8,c,
@2c,
@5c,
@.c,
@.c,
@5c,
@/c,
 /c,
 /c,
 0c,
 /c,
 /c,
 0c,
 0c,
`0c,
`0c,
01c,
 6c,
P7c,
`7c,
`8c,
`9c,
 9c,
@9c,
`9c,
p>c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
@?c,
 ?c,
0?c,
`?c,
 @c,
@@c,
`@c,
 Ac,
@Ac,
`Ac,
 Bc,
@Bc,
`Bc,
 Cc,
@Cc,
`Cc,
 Dc,
@Dc,
`Dc,
 Ec,
@Ec,
`Ec,
 Fc,
@Fc,
`Fc,
 Gc,
@Gc,
`Gc,
 Hc,
@Hc,
`Hc,
 Ic,
@Ic,
`Ic,
 Jc,
@Jc,
`Jc,
 Kc,
@Kc,
`Kc,
 Lc,
@Lc,
`Lc,
 Mc,
@Mc,
`Mc,
 Nc,
@Nc,
`Nc,
 Oc,
@Oc,
`Oc,
P?c,
 qc,
@qc,
`qc,
 sc,
 sc,
@sc,
`sc,
 tc,
@tc,
0yc,
Pyc,
pyc,
0|c,
0}c,
@~c,
 ~c,
@~c,
`(b,
piS(
@xS(
`OT(
`OT(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
`(b,
`OT(
`(b,
`OT(
`OT(
`OT(
0#d,
0%d,
`%d,
0+d,
P+d,
p+d,
0-d,
@-d,
`-d,
 1d,
@1d,
 3d,
@3d,
`3d,
 9d,
@9d,
p9d,
P;d,
p;d,
@<d,
`<d,
p>d,
0?d,
0Ad,
 Bd,
@Bd,
`Bd,
0Dd,
@Dd,
`Dd,
 Hd,
@Hd,
`Hd,
0Ld,
0Ld,
PLd,
 Pd,
@Pd,
`Pd,
0Sd,
0Sd,
PSd,
pSd,
0Td,
PTd,
pTd,
pZd,
P[d,
p[d,
 \d,
p`d,
@Zd,
p`d,
0ad,
pcd,
 dd,
@dd,
`dd,
0fd,
Pfd,
0hd,
Phd,
phd,
0id,
Pid,
pid,
0jd,
Pjd,
pjd,
0kd,
Pkd,
pkd,
0ld,
Pld,
pld,
 hd,
0zd,
P{d,
p|d,
0}d,
0zd,
Pzd,
pzd,
0{d,
P{d,
p{d,
0|d,
P|d,
p|d,
0}d,
P}d,
p}d,
0~d,
P~d,
p~d,
@yd,
@wd,
@xd,
p	e,
0!e,
P!e,
p!e,
p#e,
0$e,
0&e,
0'e,
P'e,
p'e,
p*e,
P*e,
p*e,
0+e,
P+e,
p+e,
 *e,
02e,
P2e,
@3e,
`3e,
08e,
P8e,
p8e,
P;e,
p;e,
0<e,
@;e,
0?e,
P?e,
p?e,
0@e,
P@e,
P>e,
`>e,
0Fe,
PFe,
pFe,
0Ge,
`Ge,
0Le,
pLe,
0Pe,
PPe,
pPe,
PSe,
0Se,
PSe,
pSe,
0Te,
PTe,
pTe,
pZe,
0Ze,
PZe,
pZe,
0[e,
P[e,
p[e,
0`e,
0`e,
P`e,
p`e,
0ce,
0de,
Pde,
pde,
0ge,
0ge,
Pge,
pge,
0he,
Phe,
phe,
pne,
Poe,
poe,
 pe,
pte,
@ne,
pte,
0ue,
pwe,
 xe,
@xe,
`xe,
 ye,
@ye,
`ye,
 ~e,
@~e,
PPT(
`OT(
@eX,
@eX,
@eX,
 2h,
@2h,
`2h,
 6h,
`6h,
08h,
09h,
0:h,
p:h,
0;h,
`;h,
 6h,
@6h,
`6h,
 7h,
07h,
P7h,
p7h,
`5h,
08h,
P8h,
`8h,
09h,
P9h,
`9h,
@5h,
0:h,
P:h,
p:h,
 5h,
0;h,
@;h,
`;h,
p;h,
p`h,
p`h,
pah,
`bh,
Pch,
@dh,
@eh,
@fh,
0gh,
`gh,
p`h,
Pah,
0^h,
pah,
p_h,
 bh,
@bh,
`bh,
0ch,
Pch,
pch,
0`h,
 dh,
P^h,
@dh,
`dh,
 eh,
p^h,
@eh,
`eh,
P_h,
P`h,
0_h,
 fh,
@fh,
`fh,
0ah,
0gh,
@gh,
`gh,
pgh,
0ij,
Pij,
 kj,
 kj,
`kj,
`jj,
@jj,
@kj,
 uj,
@uj,
`uj,
@{j,
@}j,
0 	)
P!	)
P%	)
p%	)
0h	)
pa	)
 `	)
p_	)
p]	)
P\	)
@[	)
0Z	)
 Y	)
pX	)
pW	)
 T	)
PR	)
@Q	)
0P	)
`O	)
@N	)
@L	)
PJ	)
0I	)
 H	)
PC	)
 wj,
 xj,
`yj,
@zj,
`|j,
`}j,
P@	)
`=	)
 zj,
 {j,
P;	)
@|j,
@~j,
 9	)
07	)
p6	)
P5	)
@wj,
04	)
 yj,
p3	)
P2	)
`~j,
01	)
p0	)
P/	)
0.	)
p-	)
P,	)
`wj,
0+	)
`xj,
@yj,
`zj,
 }j,
p*	)
@xj,
`{j,
 ~j,
P)	)
 |j,
0(	)
p'	)
P&	)
pEl,
PEl,
PEl,
PFl,
PGl,
@Hl,
@Il,
@Jl,
PEl,
pEl,
0Fl,
pCl,
PFl,
pFl,
PDl,
0Gl,
PGl,
pGl,
0Cl,
 Hl,
@Hl,
`Hl,
0Dl,
 Il,
@Il,
`Il,
pDl,
PCl,
 Jl,
@Jl,
`Jl,
0El,
0sl,
psl,
0sl,
Psl,
psl,
0tl,
@tl,
`tl,
@		+
@ 	+
@!	+
@"	+
@#	+
@$	+
@%	+
@&	+
@'	+
@(	+
@)	+
0*	+
 +	+
`+	+
`,	+
`-	+
P/	+
@1	+
 3	+
@4	+
@7	+
@:	+
@<	+
@?	+
@A	+
@D	+
@F	+
@H	+
@L	+
@N	+
@O	+
@Q	+
@U	+
@W	+
@[	+
@]	+
@`	+
@b	+
@d	+
@f	+
@i	+
@k	+
@l	+
@m	+
@o	+
@r	+
 t	+
@u	+
@v	+
@y	+
@z	+
@|	+
`}	+
 z")
`m")
@V")
`:")
0'")
`p!)
0g!)
P@!)
P:!)
 5!)
P)!)
 $!)
@~ )
0o )
@\ )
`A )
p: )
@, )
`! )
@ n,
0!n,
p!n,
0"n,
p"n,
 S4.
@T4.
 s#)
 s#)
@c$)
0a$)
@\$)
ps#)
 v#)
0s#)
0w#)
`R4.
pR4.
pt#)
Pw#)
pw#)
@P$)
`t#)
Pr#)
`r#)
pr#)
 E$)
Pr#)
`r#)
Pt#)
pr#)
 r#)
0r#)
@r#)
 r#)
@t#)
0r#)
@r#)
0x#)
0t#)
Px#)
px#)
  n,
 t#)
@ n,
Pq#)
`q#)
pq#)
` n,
P&$)
p n,
 ($)
p*$)
Pq#)
`q#)
pq#)
 q#)
0q#)
@q#)
` $)
@!$)
 q#)
0q#)
@q#)
0y#)
@n#)
PX$)
Py#)
py#)
0!n,
P!n,
Pn#)
p!n,
Pp#)
`p#)
pp#)
`n#)
Pp#)
`p#)
pp#)
 p#)
0p#)
@p#)
pn#)
0>$)
 p#)
0p#)
@p#)
0z#)
Pz#)
pz#)
0"n,
P"n,
p~#)
0=$)
`y$)
p"n,
Po#)
`o#)
po#)
@7$)
Po#)
`o#)
po#)
 o#)
0o#)
@o#)
 o#)
0o#)
@o#)
@c$)
0a$)
@\$)
0 #)
`v#)
ps#)
p%#)
0'#)
p,#)
0.#)
 S4.
@T4.
P#$)
P4$)
@Ln,
 On,
`Pn,
`Qn,
 Rn,
 Sn,
 Tn,
PPT(
`OT(
@Ln,
`OT(
@Ln,
`Ln,
`OT(
 X%)
PZ%)
`J%)
 j%)
@b%)
P!%)
0%%)
@,%)
`f%)
`5%)
 N%)
PL%)
@8%)
ph%)
 ;%)
`z%)
pV%)
 =%)
@D%)
`G%)
 	%)
`Ln,
@Z%)
p\%)
@L%)
0b%)
Pf%)
@!%)
p#%)
 %%)
PJ%)
0,%)
`h%)
P5%)
08%)
`V%)
Pz%)
p@%)
0D%)
PG%)
pu%)
 Mn,
0Mn,
@Mn,
pZ')
p<')
`Mn,
pMn,
`\')
P^')
@`')
0b')
0Nn,
@Nn,
 d')
P0')
`Nn,
pNn,
0i')
 On,
0On,
`On,
`On,
@D')
 Pn,
 Pn,
`Pn,
pPn,
 A')
 Qn,
Pt')
 Qn,
`Qn,
pQn,
@!&)
 Rn,
0Rn,
`Rn,
0p')
`Rn,
 Sn,
0Sn,
`Sn,
`Sn,
 Tn,
0Tn,
P-')
P"()
P=()
p;()
p#()
0$()
09()
@i()
P%()
p8()
0N()
p&()
0'()
pM()
pJ()
P(()
0B()
p)()
0<()
0K()
0*()
PO()
pV()
0?()
P+()
PI()
pD()
p,()
0-()
PC()
pG()
P.()
p/()
0E()
00()
P1()
p2()
PL()
0T()
pP()
pS()
03()
0Q()
P4()
P@()
 l()
p>()
Pn()
pc()
P]()
PZ()
Pk()
PU()
PR()
0W()
p5()
pA()
06()
P:()
P7()
PF()
0H()
P`()
 }.)
pv.)
`s.)
Pp.)
@m.)
@y7)
 q7)
 c7)
p]7)
`X7)
@c/)
pS7)
 27)
PJ1)
@K1)
`E1)
p:0)
 :0)
@'7)
Pb/)
 ~0)
pN/)
`}0)
Pa/)
 |0)
0{0)
p`1)
`z0)
`[1)
@w0)
 x6)
@,1)
pv/)
 A1)
pI1)
@t0)
 v/)
`U6)
0s0)
PQ6)
 r0)
Pq0)
@41)
`=6)
pr1)
0t1)
0s1)
 36)
@N/)
P'6)
0V-)
@V-)
P~-)
`~-)
p~-)
PV-)
@q/)
P~-)
`~-)
p~-)
 ~-)
0~-)
@~-)
 ~-)
0~-)
@~-)
``/)
P}-)
`}-)
p}-)
P}-)
`}-)
p}-)
 }-)
0}-)
@}-)
 }-)
0}-)
@}-)
0L1)
PC1)
0j/)
P|-)
`|-)
p|-)
0!0)
P|-)
`|-)
p|-)
 |-)
0|-)
@|-)
0B1)
 |-)
0|-)
@|-)
`n0)
p_/)
P{-)
`{-)
p{-)
Pm0)
pC/)
P{-)
`{-)
p{-)
 {-)
0{-)
@{-)
@l0)
@C/)
 {-)
0{-)
@{-)
0k0)
`j0)
Pz-)
`z-)
pz-)
Pi0)
 [/)
Pz-)
`z-)
pz-)
 z-)
0z-)
@z-)
@h0)
 z-)
0z-)
@z-)
 W-)
Py-)
`y-)
py-)
 X/)
Py-)
`y-)
py-)
 y-)
0y-)
@y-)
`X-)
 y-)
pX-)
0y-)
@y-)
pW/)
 W/)
Px-)
`x-)
px-)
P	1)
Px-)
`x-)
px-)
 x-)
0x-)
@x-)
 x-)
0x-)
@x-)
 g0)
0%0)
Pw-)
`w-)
pw-)
0)0)
Pw-)
`w-)
pw-)
 w-)
0w-)
@w-)
 Y-)
 w-)
0w-)
@w-)
py5)
`f0)
0Y-)
pr5)
0h.)
@Y-)
 l5)
Pv-)
`v-)
pv-)
PY-)
Pv-)
`v-)
pv-)
 v-)
0v-)
@v-)
@e0)
`Y-)
 v-)
0v-)
@v-)
 c.)
pY-)
pa.)
Pu-)
`u-)
pu-)
 d0)
Pu-)
`u-)
pu-)
 u-)
0u-)
@u-)
 u-)
0u-)
@u-)
0G5)
`\.)
`c0)
065)
Pt-)
`t-)
pt-)
Pt-)
`t-)
pt-)
 t-)
0t-)
@t-)
PW.)
 t-)
0t-)
@t-)
p#5)
@b0)
Ps-)
`s-)
ps-)
@R.)
Ps-)
`s-)
ps-)
 s-)
0s-)
@s-)
 a0)
 Z-)
 s-)
0s-)
@s-)
0Z-)
``0)
0M.)
@Z-)
Pr-)
`r-)
pr-)
PZ-)
Pr-)
`r-)
pr-)
 r-)
0r-)
@r-)
`Z-)
 r-)
0r-)
@r-)
@_0)
 H.)
pZ-)
pF.)
Pq-)
`q-)
pq-)
Pq-)
`q-)
pq-)
 q-)
0q-)
@q-)
 ^0)
 q-)
0q-)
@q-)
P81)
`A.)
Pp-)
`p-)
pp-)
`O1)
 P1)
Pp-)
`p-)
pp-)
 p-)
0p-)
@p-)
`]0)
P<.)
 p-)
0p-)
@p-)
Po-)
`o-)
po-)
@\0)
@7.)
Po-)
`o-)
po-)
 o-)
0o-)
@o-)
 [-)
 o-)
0o-)
@o-)
0[-)
 [0)
02.)
@[-)
Pn-)
`n-)
pn-)
P[-)
Pn-)
`n-)
pn-)
`}4)
 n-)
0n-)
@n-)
`Z0)
`[-)
 n-)
0n-)
@n-)
Pw4)
 -.)
p[-)
`p4)
p+.)
Pj4)
Pm-)
`m-)
pm-)
@Y0)
Pm-)
`m-)
pm-)
 m-)
0m-)
@m-)
 m-)
0m-)
@m-)
`[4)
`&.)
`Q4)
 X0)
PI4)
Pl-)
`l-)
pl-)
Pl-)
`l-)
pl-)
p@4)
 l-)
0l-)
@l-)
`W0)
P!.)
 l-)
0l-)
@l-)
`84)
Pk-)
`k-)
pk-)
@V0)
Pk-)
`k-)
pk-)
 k-)
0k-)
@k-)
 \-)
 k-)
0k-)
@k-)
0\-)
@)1)
@\-)
Pj-)
`j-)
pj-)
@&1)
P\-)
Pj-)
`j-)
pj-)
 j-)
0j-)
@j-)
`\-)
 j-)
0j-)
@j-)
001)
p\-)
 U0)
Pi-)
`i-)
pi-)
`/1)
Pi-)
`i-)
pi-)
 i-)
0i-)
@i-)
 i-)
0i-)
@i-)
`T0)
Ph-)
`h-)
ph-)
Ph-)
`h-)
ph-)
 h-)
0h-)
@h-)
 h-)
0h-)
@h-)
Pg-)
`g-)
pg-)
P|1)
Pg-)
`g-)
pg-)
 g-)
0g-)
@g-)
 ]-)
 g-)
0]-)
0g-)
@g-)
@]-)
P]-)
`]-)
Pf-)
`f-)
pf-)
p]-)
Pf-)
`f-)
pf-)
 f-)
0f-)
@f-)
 f-)
0f-)
@f-)
Pe-)
`e-)
pe-)
Pe-)
`e-)
pe-)
 e-)
0e-)
@e-)
 91)
 e-)
0e-)
@e-)
`z3)
`s3)
p31)
Pd-)
`d-)
pd-)
@S0)
Pd-)
`d-)
pd-)
`c3)
 d-)
0d-)
@d-)
 d-)
0d-)
@d-)
 R0)
 ^-)
@Q3)
Pc-)
`c-)
pc-)
0^-)
Pc-)
`c-)
pc-)
 c-)
0c-)
@c-)
`Q0)
@^-)
 c-)
0c-)
@c-)
P^-)
`^-)
p83)
Pb-)
`b-)
pb-)
p^-)
Pb-)
`b-)
pb-)
`23)
 b-)
0b-)
@b-)
 b-)
0b-)
@b-)
P,3)
0!3)
Pa-)
`a-)
pa-)
Pa-)
`a-)
pa-)
 a-)
0a-)
@a-)
 a-)
 _-)
0a-)
@a-)
@#1)
0_-)
@_-)
P`-)
``-)
p`-)
@P0)
P_-)
P`-)
``-)
p`-)
 `-)
0`-)
@`-)
`_-)
 `-)
0`-)
@`-)
p_-)
 }.)
pr()
0t()
py()
0{()
pv.)
`s.)
Pp.)
@m.)
p!))
0#))
p())
0*))
p/))
01))
p6))
08))
p=))
0?))
pD))
0F))
pK))
0M))
pR))
0T))
pY))
0[))
p`))
0b))
pg))
0i))
pn))
0p))
pu))
0w))
p|))
0~))
@Ep,
@Mp,
@Np,
@Op,
pOp,
 Pp,
 Qp,
 Rp,
 Sp,
 Tp,
 Up,
 Vp,
 Wp,
 Xp,
 Yp,
`Zp,
`[p,
`\p,
P:9)
@Ep,
PPT(
`OT(
@Ep,
`OT(
p*9)
`OT(
0r8)
p@8)
@'8)
p%8)
`J8)
 <8)
pN8)
0G8)
0]8)
ph8)
P_8)
0a8)
P[8)
@>8)
`{8)
0x8)
ps8)
`*9)
 r8)
`s8)
`%8)
PJ8)
p18)
0'8)
0>8)
`N8)
 G8)
pH8)
@_8)
`h8)
 a8)
@[8)
 ]8)
`@8)
Po=)
0:<)
`;<)
@q=)
 Fp,
`><)
0Fp,
p*;)
@Fp,
0,;)
0s=)
`Fp,
pY<)
pFp,
0[<)
 u=)
0^<)
01;)
P2;)
`:;)
p;;)
0;;)
0Gp,
@Gp,
`Gp,
P?;)
pGp,
@G;)
0Hp,
@Hp,
`Hp,
pHp,
0 =)
`"=)
 Ip,
0Ip,
PIp,
@S;)
`Ip,
pT;)
`W;)
@c;)
0h;)
Pi;)
 +=)
 Jp,
po;)
0Jp,
P-=)
PJp,
`Jp,
 v;)
pJp,
Pw;)
Pd9)
 Kp,
@Kp,
@|;)
PKp,
`};)
@8=)
pKp,
p:=)
P#9)
`	;)
 Lp,
0Lp,
PLp,
`Lp,
0C=)
`(9)
@Mp,
PMp,
`8<)
p.;)
0);)
p]<)
@Np,
PNp,
0X<)
`4;)
P4;)
05;)
@Op,
POp,
pOp,
 9;)
 ;;)
 Pp,
0Pp,
`Pp,
 A;)
`Pp,
 >;)
 Qp,
0Qp,
`Qp,
`Qp,
 Rp,
0Rp,
@D;)
`Rp,
`Rp,
 Sp,
0Sp,
`Sp,
`Sp,
 Tp,
0Tp,
`Tp,
`Tp,
 Up,
0Up,
`Up,
`Up,
pQ;)
@\=)
 Vp,
0Vp,
@`;)
`Vp,
`k;)
pX=)
`Vp,
Pk;)
0l;)
@q;)
 Wp,
0Wp,
@n;)
`Wp,
`Wp,
Pt;)
 Xp,
0Xp,
`Xp,
`Xp,
 Yp,
0Yp,
`Yp,
0I=)
`Yp,
 Zp,
`E=)
 Zp,
`Zp,
pZp,
 [p,
 [p,
`[p,
p[p,
 \p,
 \p,
`\p,
p\p,
`9?)
p8?)
P:?)
@;?)
p-?)
0"?)
P.?)
p1?)
`2?)
P#?)
`*?)
p)?)
P3?)
@	?)
p$?)
p ?)
@	q,
pML)
`ML)
`bE)
pIL)
PwE)
`FH)
@&H)
 'H)
0%H)
PBH)
@NH)
@!E)
0 L)
 VF)
0*F)
PBF)
`%F)
0#F)
0AF)
0nD)
0]F)
 .F)
`yD)
0`F)
P)F)
PlD)
 lD)
0MF)
`iF)
@lF)
0kF)
@.E)
ppF)
PsF)
@rF)
 .G)
0yD)
p~D)
 aK)
P}F)
@|F)
@~D)
0PK)
`IK)
p'K)
`#K)
`QG)
`kD)
 	K)
PeG)
0kD)
PCE)
 2G)
p|D)
 7G)
`tG)
pjD)
@&F)
 LG)
PwD)
@?F)
0sD)
@jD)
@HG)
pJF)
0IF)
@#G)
`iD)
0{J)
`$H)
 mJ)
phJ)
 {E)
@ H)
0GH)
0ZJ)
P0F)
pSF)
0TF)
`FJ)
P|C)
`,F)
@wC)
`3F)
@"J)
P7F)
0rC)
01F)
 	q,
@4F)
@	q,
`	q,
p(F)
 mC)
p6F)
pkC)
`	J)
`fC)
 <F)
 5F)
PaC)
@;F)
@\C)
08F)
 'F)
0WC)
 RC)
`jF)
pPC)
pqF)
P-G)
`KC)
p{F)
PFC)
@-F)
@AC)
0<C)
`zE)
 7C)
p5C)
`0C)
 RG)
0bG)
P+C)
0tH)
`1G)
@&C)
pTI)
`6G)
pfH)
0fH)
@LI)
0!C)
P>I)
`:F)
0uG)
P!I)
0^H)
 ]H)
p/F)
pML)
P??)
PF?)
PM?)
PT?)
P[?)
Pb?)
Pi?)
Pp?)
Pw?)
P~?)
P&@)
P-@)
P4@)
P;@)
PB@)
PI@)
PP@)
PW@)
P^@)
Pe@)
Pl@)
pYr,
PYr,
 On,
`Pn,
`Qn,
 Rn,
 Sn,
 Tn,
PYr,
pYr,
pfM)
piS(
@xS(
 fM)
PfM)
@fM)
`fM)
piS(
@xS(
 fM)
PfM)
@fM)
`fM)
 Zr,
piS(
@xS(
 fM)
PfM)
 ;M)
@?M)
`0M)
@ZL)
 "M)
 OL)
@WL)
@YL)
@	M)
@_L)
@bL)
@eL)
@hL)
@kL)
@nL)
@qL)
@tL)
@wL)
@zL)
@}L)
 VM)
`QM)
PMM)
PJM)
 Zr,
phM)
 Zr,
`hM)
 Zr,
pgM)
PhM)
 Zr,
@fM)
`fM)
0?M)
p.M)
P0M)
@JM)
pVL)
0WL)
0YL)
0ZL)
0	M)
@Zr,
@Zr,
0uM)
@[r,
@[r,
prM)
@\r,
@\r,
pmM)
@]r,
@]r,
`	O)
PYr,
PYr,
0iW)
 gW)
0XT)
@XT)
0bW)
 XT)
`5V)
pZ\)
P}V)
PS\)
 RV)
 3V)
PMV)
p/V)
`WV)
`.V)
@-V)
P+V)
p*V)
P)V)
@wV)
0KV)
@_V)
p#V)
P[V)
0zV)
0 V)
0=V)
 8V)
@4W)
`JV)
0u[)
 p[)
@yV)
`e[)
P`[)
@QV)
0[[)
P~T)
`~T)
p~T)
P~T)
`~T)
p~T)
@P[)
 ~T)
0~T)
@~T)
 ~T)
0~T)
@~T)
p<[)
P}T)
`}T)
p}T)
P}T)
`}T)
p}T)
 }T)
0}T)
@}T)
P1W)
 }T)
0}T)
@}T)
`@V)
 AV)
 1W)
P|T)
`|T)
p|T)
P|T)
`|T)
p|T)
 |T)
0|T)
@|T)
 |T)
0|T)
@|T)
P{T)
`{T)
p{T)
P{T)
`{T)
p{T)
 {T)
0{T)
@{T)
 {T)
0{T)
@{T)
PzT)
`zT)
pzT)
 YV)
PzT)
`zT)
pzT)
 zT)
0zT)
@zT)
P~V)
 zT)
0zT)
@zT)
PyT)
`yT)
pyT)
` W)
PyT)
`yT)
pyT)
 yT)
0yT)
@yT)
 yT)
0yT)
@yT)
 ?V)
P|V)
PxT)
`xT)
pxT)
PxT)
`xT)
pxT)
 xT)
0xT)
@xT)
0PT)
 xT)
@PT)
0xT)
@xT)
PwT)
`wT)
pwT)
PwT)
`wT)
pwT)
 wT)
0wT)
@wT)
 wT)
0wT)
@wT)
PvT)
`vT)
pvT)
PvT)
`vT)
pvT)
 vT)
0vT)
@vT)
 vT)
0vT)
@vT)
0zZ)
@jZ)
PuT)
`uT)
puT)
PuT)
`uT)
puT)
 uT)
0uT)
@uT)
 uT)
0uT)
@uT)
PtT)
`tT)
ptT)
PtT)
`tT)
ptT)
 tT)
0tT)
@tT)
 tT)
0tT)
@tT)
pHZ)
0NV)
`DZ)
PsT)
`sT)
psT)
PsT)
`sT)
psT)
 sT)
0sT)
@sT)
PPT)
 sT)
`PT)
0sT)
@sT)
pPT)
PrT)
`rT)
prT)
PrT)
`rT)
prT)
@/Z)
 rT)
0rT)
@rT)
 rT)
0rT)
@rT)
 QT)
PQT)
`QT)
PqT)
`qT)
pqT)
PqT)
`qT)
pqT)
 qT)
0qT)
@qT)
 qT)
0qT)
@qT)
PpT)
`pT)
ppT)
phV)
pQT)
PpT)
`pT)
ppT)
 pT)
0pT)
@pT)
@mV)
@mU)
 pT)
0pT)
@pT)
paW)
0aW)
PoT)
`oT)
poT)
0cV)
0hU)
PoT)
`oT)
poT)
 oT)
0oT)
@oT)
 oT)
0oT)
@oT)
`PV)
p`W)
`sV)
 cU)
0`W)
PnT)
`nT)
pnT)
0jV)
paU)
PnT)
`nT)
pnT)
 nT)
0nT)
@nT)
 QW)
 nT)
0nT)
@nT)
`\U)
 RT)
p_W)
PmT)
`mT)
pmT)
`eV)
0RT)
0_W)
PmT)
`mT)
pmT)
 mT)
0mT)
@mT)
 nV)
@RT)
 mT)
0mT)
@mT)
pSV)
PWU)
PRT)
`RT)
p^W)
PlT)
`lT)
plT)
 gV)
pRT)
0^W)
PlT)
`lT)
plT)
 lT)
0lT)
@lT)
@RU)
 lT)
0lT)
@lT)
@XV)
0qV)
p]W)
`uY)
PkT)
`kT)
pkT)
 `V)
0MU)
0]W)
PkT)
`kT)
pkT)
 kT)
0kT)
@kT)
`lV)
 kT)
0kT)
@kT)
 uV)
 HU)
p\W)
0XY)
PjT)
`jT)
pjT)
pFU)
0\W)
PjT)
`jT)
pjT)
@QY)
 jT)
0jT)
@jT)
 jT)
0jT)
@jT)
pIY)
`^V)
`AU)
 ST)
PKW)
PiT)
`iT)
piT)
0ST)
PiT)
`iT)
piT)
04Y)
 iT)
0iT)
@iT)
@ST)
p[W)
 iT)
0iT)
@iT)
PTV)
P<U)
PST)
0[W)
`&Y)
@tV)
`ST)
PhT)
`hT)
phT)
pST)
PhT)
`hT)
phT)
 hT)
0hT)
@hT)
PpV)
@7U)
pZW)
 hT)
0hT)
@hT)
0ZW)
PgT)
`gT)
pgT)
paV)
02U)
PgT)
`gT)
pgT)
 gT)
0gT)
@gT)
pYW)
 gT)
0gT)
@gT)
0YW)
 -U)
PfT)
`fT)
pfT)
PiV)
p+U)
PfT)
`fT)
pfT)
 fT)
0fT)
@fT)
pXW)
 fT)
0fT)
@fT)
0\V)
0XW)
`&U)
 TT)
PeT)
`eT)
peT)
0TT)
PeT)
`eT)
peT)
 eT)
0eT)
@eT)
@TT)
pWW)
 eT)
0eT)
@eT)
P!U)
PTT)
0WW)
`TT)
PdT)
`dT)
pdT)
pTT)
PdT)
`dT)
pdT)
 dT)
0dT)
@dT)
poV)
pVW)
 dT)
0dT)
@dT)
0VW)
PcT)
`cT)
pcT)
0PW)
PcT)
`cT)
pcT)
 cT)
0cT)
@cT)
 cT)
0cT)
@cT)
 qX)
PbT)
`bT)
pbT)
@OW)
PbT)
`bT)
pbT)
@jX)
 bT)
0bT)
@bT)
@fV)
 bT)
0bT)
@bT)
pUW)
0^X)
 UT)
0UW)
PaT)
`aT)
paT)
0UT)
PaT)
`aT)
paT)
 aT)
0aT)
@aT)
0!W)
@UT)
 aT)
0aT)
@aT)
`IX)
PUT)
`UT)
P`T)
``T)
p`T)
pUT)
P`T)
``T)
p`T)
 `T)
0`T)
@`T)
 `T)
0`T)
@`T)
`1X)
`&X)
P_T)
`_T)
p_T)
 ?W)
P_T)
`_T)
p_T)
 _T)
0_T)
@_T)
 _T)
0_T)
@_T)
`>W)
P^T)
`^T)
p^T)
p<W)
P^T)
`^T)
p^T)
 ^T)
0^T)
@^T)
 VT)
 ^T)
0^T)
@^T)
0VT)
@VT)
PNW)
P]T)
`]T)
p]T)
0UV)
PVT)
P]T)
`]T)
p]T)
 ]T)
0]T)
@]T)
`VT)
pTW)
 ]T)
0]T)
@]T)
pZV)
pVT)
0TW)
PbV)
P\T)
`\T)
p\T)
P\T)
`\T)
p\T)
 \T)
0\T)
@\T)
pSW)
 \T)
0\T)
@\T)
0SW)
P[T)
`[T)
p[T)
P[T)
`[T)
p[T)
 [T)
0[T)
@[T)
 [T)
0[T)
@[T)
 WT)
PZT)
`ZT)
pZT)
0WT)
PZT)
`ZT)
@WT)
pZT)
 ZT)
0ZT)
@ZT)
PWT)
 ZT)
`WT)
0ZT)
@ZT)
pWT)
PYT)
`YT)
pYT)
PYT)
`YT)
pYT)
 YT)
0YT)
@YT)
 YT)
0YT)
@YT)
pRW)
 wW)
PXT)
`XT)
pXT)
PXT)
`XT)
pXT)
0iW)
 gW)
0XT)
@XT)
0bW)
P&O)
P-O)
P4O)
P;O)
PBO)
PIO)
PPO)
PWO)
P^O)
PeO)
PlO)
PsO)
PzO)
 XT)
P"P)
P)P)
P0P)
P7P)
P>P)
PEP)
PLP)
PSP)
PZP)
PaP)
PhP)
PoP)
`Ut,
@Mp,
@Np,
@Op,
pOp,
 Pp,
 Qp,
 Rp,
 Sp,
 Tp,
 Up,
 Vp,
 Wp,
 Xp,
 Yp,
`Zp,
`[p,
`\p,
`Ut,
0z])
Pz])
piS(
@xS(
0y])
Py])
py])
@y])
`y])
piS(
@xS(
0y])
Py])
py])
@y])
`y])
 Vt,
pz])
@{])
piS(
@xS(
0y])
Py])
py])
py\)
0{\)
p|\)
P/])
p0])
@t\)
 f])
Pw])
`p])
@4])
p5])
0:])
`;])
 @])
PA])
@G])
pH])
0M])
`N])
 S])
PT])
0,])
p)])
@j])
0&])
 o])
@Z])
p[])
pk])
0`])
`a])
 Vt,
 {])
 Vt,
 Vt,
 Vt,
0{])
@y])
`y])
`y\)
 {\)
`|\)
`0])
@Vt,
@Vt,
  _)
@Wt,
@Wt,
 V^)
 4_)
@Xt,
@Xt,
pY^)
`Y^)
@Z^)
PZ^)
 [^)
@Yt,
@Yt,
`d^)
pd^)
@e^)
PM_)
0e^)
 f^)
pi^)
@Zt,
Pj^)
pF_)
@Zt,
@j^)
 k^)
0k^)
@[t,
@[t,
@	_)
@\t,
`}^)
0~^)
 V_)
@\t,
 ~^)
 |])
@]t,
@]t,
 e_)
 =_)
@^t,
@^t,
`I`)
pI`)
`s_)
PZ`)
p9`)
P[`)
P\`)
0:`)
`:`)
P_`)
pc`)
p~`)
p{`)
 ;`)
P;`)
pd`)
pe`)
@<`)
pf`)
p<`)
p}`)
pg`)
ph`)
0=`)
`=`)
pi`)
pz`)
pj`)
 >`)
pk`)
P>`)
pl`)
pm`)
@?`)
pn`)
p?`)
po`)
py`)
pp`)
px`)
0@`)
`@`)
pq`)
 A`)
PA`)
`a`)
pr`)
@B`)
pB`)
0C`)
P]`)
P^`)
`C`)
 D`)
PD`)
@E`)
pE`)
pX`)
0Y`)
0F`)
ps`)
`F`)
pt`)
 G`)
PG`)
pu`)
pv`)
@H`)
pH`)
pw`)
p|`)
0I`)
`Ut,
`Ut,
phd)
0ud)
Pud)
phd)
P;d)
`;d)
p@e)
`=e)
P:e)
 ;d)
0;d)
@;d)
pud)
0hd)
@hd)
Phd)
`hd)
0hd)
@hd)
Phd)
`hd)
 hd)
 hd)
0vd)
Pvd)
pgd)
pgd)
pvd)
0gd)
@gd)
Pgd)
`gd)
`Ne)
0gd)
@gd)
Pgd)
`gd)
 gd)
 gd)
0wd)
Pwd)
pfd)
pfd)
pwd)
0fd)
@fd)
Pfd)
`fd)
`!f)
0fd)
@fd)
Pfd)
`fd)
 fd)
 fd)
psd)
0xd)
Pxd)
ped)
0Re)
ped)
`sd)
pxd)
0ed)
@ed)
Ped)
`ed)
@Ne)
0ed)
@ed)
Psd)
Ped)
`ed)
 ed)
@sd)
 ed)
`uf)
`\e)
0sd)
0yd)
Pyd)
pdd)
0\e)
pdd)
 sd)
pyd)
0dd)
@dd)
Pdd)
`dd)
0dd)
@dd)
Pdd)
`dd)
01k)
 dd)
 Ne)
 dd)
@-k)
0zf)
0zd)
Pzd)
P)k)
pcd)
pcd)
pzd)
0cd)
@cd)
Pcd)
`cd)
0cd)
@cd)
Pcd)
`cd)
 cd)
 Ue)
 cd)
p`f)
0{d)
P{d)
pbd)
0Xe)
pbd)
p{d)
0bd)
@bd)
Pbd)
`bd)
 +g)
0bd)
@bd)
Pbd)
`bd)
 bd)
0[e)
 bd)
@#f)
prd)
0|d)
P|d)
pad)
`|f)
`	f)
pad)
`rd)
p|d)
0ad)
@ad)
Pad)
`ad)
pxf)
0ad)
@ad)
Prd)
Pad)
`ad)
 ad)
@"f)
@rd)
 ad)
`~e)
0rd)
0}d)
P}d)
p`d)
0}e)
p`d)
 rd)
p}d)
0`d)
@`d)
P`d)
``d)
0`d)
@`d)
P`d)
``d)
 `d)
@$f)
 `d)
 ^e)
0~d)
P~d)
p_d)
pxe)
p_d)
p~d)
0_d)
@_d)
P_d)
`_d)
@we)
0_d)
@_d)
P_d)
`_d)
 _d)
@vf)
 _d)
pTe)
p^d)
@Te)
p^d)
0^d)
@^d)
P^d)
`^d)
0Ze)
0^d)
@^d)
P^d)
`^d)
 ^d)
@%f)
Pqe)
 ^d)
 pe)
pqd)
p]d)
p]d)
`qd)
0]d)
@]d)
P]d)
`]d)
0]d)
@]d)
Pqd)
P]d)
`]d)
 ]d)
@qd)
 ]d)
0qd)
p\d)
PYe)
p\d)
 qd)
0\d)
@\d)
P\d)
`\d)
0\d)
@\d)
P\d)
`\d)
 \d)
@&f)
 \d)
p[d)
p[d)
@nj)
0[d)
@[d)
P[d)
`[d)
0[d)
@[d)
P[d)
`[d)
Pjj)
 [d)
P/g)
 [d)
pZd)
p+g)
pZd)
0Zd)
@Zd)
PZd)
`Zd)
`Me)
0Zd)
@Zd)
PZd)
`Zd)
 Wj)
 Zd)
 Zd)
ppd)
pYd)
`vg)
pYd)
`pd)
0Yd)
@Yd)
PYd)
`Yd)
0Yd)
@Yd)
Ppd)
PYd)
`Yd)
 Yd)
@pd)
 Yd)
@?j)
0Pg)
0pd)
pXd)
`Wg)
 Xg)
pXd)
 pd)
p6j)
0Xd)
@Xd)
PXd)
`Xd)
PSe)
0Xd)
@Xd)
PXd)
`Xd)
 Xd)
 Se)
 Xd)
P)j)
pWd)
@<g)
pWd)
0Wd)
@Wd)
PWd)
`Wd)
pBg)
0Wd)
@Wd)
PWd)
`Wd)
 Wd)
`tg)
 Wd)
0_e)
pVd)
p^e)
pVd)
0Vd)
@Vd)
PVd)
`Vd)
0Vd)
@Vd)
PVd)
`Vd)
 Vd)
Pcf)
`ke)
 Vd)
Pjg)
0kg)
@ig)
pod)
pUd)
`Xe)
0je)
pUd)
`od)
0Ud)
@Ud)
PUd)
`Ud)
0Ud)
@Ud)
Pod)
PUd)
`Ud)
 Ud)
0_g)
@od)
 Ud)
pqf)
0od)
pTd)
PMg)
PWe)
pTd)
 od)
0Td)
@Td)
PTd)
`Td)
 We)
0Td)
@Td)
PTd)
`Td)
 Td)
@)f)
pee)
 Td)
@de)
pSd)
pSd)
0Sd)
@Sd)
PSd)
`Sd)
`Re)
0Eg)
0Sd)
@Sd)
PSd)
`Sd)
 Sd)
@Lg)
@Ve)
 Sd)
0$g)
pRd)
pRd)
0Rd)
@Rd)
PRd)
`Rd)
PUe)
0Rd)
@Rd)
PRd)
`Rd)
 Rd)
`'g)
p3g)
 Rd)
pnd)
pQd)
pQd)
`nd)
0Qd)
@Qd)
PQd)
`Qd)
@5e)
0Qd)
@Qd)
Pnd)
PQd)
`Qd)
 Qd)
@nd)
 Qd)
0nd)
pPd)
00e)
pPd)
 nd)
0Pd)
@Pd)
PPd)
`Pd)
0Pd)
@Pd)
PPd)
`Pd)
 Pd)
 Pd)
 +e)
pOd)
 wf)
p)e)
pOd)
0Od)
@Od)
POd)
`Od)
 6d)
0Od)
@Od)
POd)
`Od)
 pi)
 Od)
06d)
 Od)
`ki)
`$e)
@6d)
pNd)
P6d)
pNd)
`bi)
0Nd)
@Nd)
PNd)
`Nd)
`6d)
0Nd)
@Nd)
PNd)
`Nd)
 Nd)
p6d)
 Nd)
pmd)
`Ui)
pMd)
Pyf)
pMd)
`md)
0Md)
@Md)
PMd)
`Md)
0Md)
@Md)
Pmd)
PMd)
`Md)
 Md)
 ~f)
@md)
 Md)
0md)
pLd)
Prf)
pLd)
 md)
0Ld)
@Ld)
PLd)
`Ld)
0Ld)
@Ld)
PLd)
`Ld)
09i)
 Ld)
 Ld)
@4i)
pKd)
pKd)
`+i)
0Kd)
@Kd)
PKd)
`Kd)
 7d)
0Kd)
@Kd)
PKd)
`Kd)
 Kd)
07d)
 Kd)
 !i)
`	e)
@7d)
pJd)
 pf)
P7d)
pJd)
0Jd)
@Jd)
PJd)
`Jd)
`7d)
0Jd)
@Jd)
PJd)
`Jd)
 Jd)
p7d)
 Jd)
pld)
pId)
pId)
`ld)
0Id)
@Id)
PId)
`Id)
0Id)
@Id)
Pld)
PId)
`Id)
 Id)
@ld)
 Id)
0ld)
pHd)
0sf)
pHd)
 ld)
0Hd)
@Hd)
PHd)
`Hd)
0Hd)
@Hd)
PHd)
`Hd)
 Hd)
 Hd)
pGd)
pGd)
0Gd)
@Gd)
PGd)
`Gd)
 8d)
0Gd)
@Gd)
PGd)
`Gd)
 Gd)
08d)
 Gd)
@8d)
pFd)
P8d)
pFd)
0Fd)
@Fd)
PFd)
`Fd)
`8d)
0Fd)
@Fd)
PFd)
`Fd)
 Fd)
p8d)
 Fd)
pkd)
pEd)
pEd)
`kd)
0Ed)
@Ed)
PEd)
`Ed)
0Ed)
@Ed)
Pkd)
PEd)
`Ed)
 Ed)
@kd)
 Ed)
0kd)
pDd)
pDd)
 kd)
0Dd)
@Dd)
PDd)
`Dd)
0Dd)
@Dd)
PDd)
`Dd)
 Dd)
 Dd)
pCd)
pCd)
0Cd)
@Cd)
PCd)
`Cd)
 9d)
0Cd)
@Cd)
PCd)
`Cd)
 Cd)
09d)
 Cd)
@9d)
pBd)
P9d)
pBd)
0Bd)
@Bd)
PBd)
`Bd)
pOg)
`9d)
0Bd)
@Bd)
PBd)
`Bd)
 Bd)
p9d)
 Bd)
pjd)
pAd)
p~g)
pAd)
`jd)
 nh)
0Ad)
@Ad)
PAd)
`Ad)
0Ad)
@Ad)
Pjd)
PAd)
`Ad)
0ih)
 Ad)
p;g)
@jd)
 Ad)
P?g)
0jd)
p@d)
p@d)
 jd)
0@d)
@@d)
P@d)
`@d)
0@d)
@@d)
P@d)
`@d)
`Wh)
 @d)
 @d)
 Sh)
p?d)
p?d)
pIh)
0?d)
@?d)
P?d)
`?d)
phg)
 :d)
0?d)
@?d)
P?d)
`?d)
 ?d)
0:d)
 ?d)
@:d)
p;h)
p>d)
p^g)
P:d)
p>d)
0>d)
@>d)
P>d)
`>d)
`:d)
0>d)
@>d)
P>d)
`>d)
 >d)
p:d)
 >d)
p.h)
pid)
p=d)
p=d)
`id)
0=d)
@=d)
P=d)
`=d)
0=d)
@=d)
Pid)
P=d)
`=d)
 =d)
@id)
 =d)
0id)
p<d)
 Ig)
pKg)
p<d)
 id)
0<d)
@<d)
P<d)
`<d)
` g)
 !g)
0<d)
@<d)
P<d)
`<d)
 <d)
@}f)
 <d)
p;d)
 (g)
p;d)
 td)
@td)
P;d)
`;d)
p	a)
0 a)
p%a)
0'a)
p,a)
0.a)
p3a)
05a)
p:a)
0<a)
pAa)
0Ca)
pHa)
0Ja)
pOa)
0Qa)
`td)
p@e)
`=e)
P:e)
 ;d)
0;d)
@;d)
pVa)
0Xa)
p]a)
0_a)
pda)
0fa)
pka)
0ma)
pra)
0ta)
pya)
0{a)
 Jv,
0Jv,
@Jv,
@!b,
pLv,
@Mv,
`Mv,
`(b,
 Ov,
 Ov,
piS(
@xS(
 Ov,
 Ov,
 Ov,
 Ov,
`OT(
 Pv,
`OT(
 Pv,
 Pv,
 Pv,
@Pv,
piS(
@xS(
@Pv,
@Pv,
@Pv,
@Pv,
0Qv,
PQv,
pQv,
 \v,
@\v,
`Ov,
 ]v,
`]v,
`Ov,
 ]v,
PPT(
`OT(
 ]v,
`]v,
`OT(
`]v,
`OT(
`Ov,
`Ov,
pev,
Pev,
Pdv,
pev,
pdv,
0ev,
 nv,
piS(
@xS(
`ov,
 ov,
piS(
@xS(
 ov,
 ov,
 ov,
0tv,
Puv,
 vv,
@vv,
 }v,
p~v,
@~v,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
@	w,
@	w,
@	w,
@ w,
x!w,
x!w,
X"w,
 $w,
 %w,
X$w,
 'w,
@#w,
@#w,
@#w,
 (w,
 (w,
 (w,
@)w,
@)w,
`+w,
@*w,
@*w,
@*w,
@*w,
`,w,
@-w,
`.w,
@/w,
@/w,
@/w,
@/w,
 2w,
H0w,
 1w,
@3w,
@3w,
@3w,
`6w,
`5w,
@7w,
88w,
88w,
 :w,
@:w,
 <w,
X;w,
 >w,
`@w,
@Aw,
`Bw,
@?w,
@?w,
@?w,
@Cw,
@Cw,
@Cw,
@Cw,
 Fw,
HDw,
 Ew,
@Gw,
@Gw,
@Gw,
`Jw,
`Iw,
@Kw,
xLw,
xLw,
XMw,
`Nw,
 Pw,
XOw,
 Rw,
@Uw,
@Tw,
@Tw,
@Uw,
@Sw,
@Sw,
@Xw,
@Ww,
@Ww,
@Xw,
@Vw,
@Vw,
`Zw,
@[w,
`\w,
@Yw,
@Yw,
@Yw,
 /c,
@]w,
@]w,
@]w,
 /c,
 `w,
 `w,
 `w,
@bw,
@aw,
@aw,
@bw,
``w,
``w,
 /c,
xcw,
xcw,
Hdw,
Hew,
 cw,
 cw,
`ew,
 /c,
`ew,
8fw,
8fw,
 hw,
 /c,
`hw,
 hw,
`hw,
`hw,
 /c,
 kw,
 kw,
 kw,
@mw,
@lw,
@lw,
@mw,
`kw,
`kw,
 /c,
xnw,
xnw,
How,
Hpw,
 nw,
 nw,
`pw,
 /c,
`pw,
8qw,
8qw,
 sw,
 /c,
`sw,
 sw,
`sw,
`sw,
 /c,
 vw,
`vw,
 vw,
 vw,
pvw,
pvw,
 /c,
 yw,
 yw,
 yw,
@{w,
@zw,
@zw,
@{w,
`yw,
`yw,
 /c,
x|w,
x|w,
H}w,
H~w,
 |w,
 |w,
`~w,
 /c,
`~w,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 /c,
 4x,
 4x,
xOx,
xOx,
 5x,
`5x,
`5x,
8Px,
8Px,
xPx,
8Qx,
`6x,
@7x,
@7x,
xRx,
xRx,
8Sx,
8Sx,
xSx,
@8x,
8Tx,
 9x,
 9x,
xUx,
xUx,
 :x,
`:x,
`:x,
8Vx,
8Vx,
xVx,
8Wx,
`;x,
@<x,
@<x,
xXx,
8	x,
xXx,
8Yx,
8Yx,
xYx,
@=x,
8Zx,
 >x,
 >x,
x[x,
x[x,
 ?x,
`?x,
`?x,
8\x,
8\x,
x\x,
8]x,
`@x,
@Ax,
@Ax,
x^x,
x^x,
8_x,
8_x,
x_x,
@Bx,
8`x,
 Cx,
 Cx,
 Dx,
`Dx,
`Dx,
xbx,
xbx,
8cx,
8cx,
xcx,
`Ex,
8dx,
@Fx,
@Fx,
p x,
p x,
8!x,
xex,
x"x,
x"x,
xex,
@Gx,
8fx,
p#x,
p#x,
8$x,
8fx,
xfx,
 Hx,
 Hx,
x%x,
x%x,
8gx,
p&x,
p&x,
8'x,
 Ix,
`Ix,
`Ix,
xhx,
x(x,
x(x,
xhx,
8ix,
p)x,
p)x,
8*x,
8ix,
xix,
`Jx,
x+x,
x+x,
8jx,
@Kx,
@Kx,
p,x,
p,x,
8-x,
xkx,
x.x,
x.x,
xkx,
@Lx,
8lx,
p/x,
p/x,
80x,
8lx,
xlx,
 Mx,
 Mx,
x1x,
x1x,
8mx,
p2x,
p2x,
83x,
 4x,
 5x,
`5x,
`6x,
@7x,
@8x,
 9x,
 :x,
`:x,
`;x,
@<x,
@=x,
 >x,
 ?x,
`?x,
`@x,
@Ax,
@Bx,
 Cx,
 Dx,
`Dx,
`Ex,
@Fx,
@Gx,
 Hx,
 Ix,
`Ix,
`Jx,
@Kx,
@Lx,
 Mx,
`4x,
`4x,
@6x,
@6x,
 8x,
 8x,
`9x,
`9x,
@;x,
@;x,
 =x,
 =x,
`>x,
`>x,
@@x,
@@x,
 Bx,
 Bx,
`Cx,
`Cx,
@Ex,
@Ex,
 Gx,
 Gx,
`Hx,
`Hx,
@Jx,
@Jx,
 Lx,
 Lx,
`Mx,
`Mx,
pnx,
pnx,
0px,
0px,
pqx,
pqx,
0rx,
0rx,
psx,
psx,
0ux,
0ux,
pvx,
pvx,
0wx,
0wx,
pxx,
pxx,
0zx,
0zx,
p{x,
p{x,
0|x,
0|x,
p}x,
p}x,
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
 &y,
p&y,
`(b,
piS(
@xS(
PPT(
`OT(
0*y,
P*y,
p*y,
0+y,
P+y,
p+y,
 8y,
@8y,
`:y,
p:y,
 ;y,
`:y,
p:y,
@:y,
 ;y,
@;y,
P;y,
p;y,
 :y,
 <y,
 <y,
`<y,
@=y,
 Ly,
`Ly,
 Ly,
piS(
@xS(
 Ly,
 Ly,
 Ly,
 Ly,
`Ly,
piS(
@xS(
`Ly,
`Ly,
`Ly,
`Ly,
piS(
@xS(
 Wy,
 Wy,
`Wy,
`Vy,
@Vy,
@Wy,
 ay,
p:y,
0cy,
 fy,
@7a(
P7a(
 fy,
 fy,
 fy,
 fy,
@7a(
P7a(
`fy,
`fy,
`fy,
`fy,
@7a(
P7a(
pky,
pky,
 py,
@py,
`py,
psy,
Psy,
psy,
0ty,
Pty,
pty,
 sy,
0{y,
P{y,
@|y,
`|y,
  z,
P z,
@!z,
p!z,
0"z,
P"z,
p"z,
0#z,
P#z,
p#z,
0$z,
P$z,
p$z,
PSz,
PTz,
PUz,
pRz,
0Sz,
PSz,
pSz,
0Tz,
PTz,
pTz,
0Uz,
PUz,
pUz,
PVz,
pVz,
PWz,
pWz,
PXz,
pXz,
PYz,
pYz,
PZz,
pZz,
0[z,
P[z,
p[z,
0\z,
`\z,
0]z,
P]z,
p]z,
0yz,
`yz,
 zz,
@zz,
`zz,
`{z,
PPT(
`OT(
`OT(
`OT(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
`.w&
0/w&
piS(
@xS(
piS(
@xS(
 sa,
 sa,
 sa,
 sa,
piS(
@xS(
 sa,
piS(
@xS(
piS(
@xS(
piS(
@xS(
0 {,
p {,
0!{,
p!{,
0"{,
p"{,
0#{,
p#{,
0${,
p${,
0 {,
P {,
p {,
0!{,
P!{,
p!{,
0"{,
P"{,
p"{,
0#{,
P#{,
p#{,
0${,
P${,
p${,
`X{,
0Z{,
pZ{,
`(b,
pZ{,
@[{,
 \{,
0Z{,
piS(
@xS(
0Z{,
0Z{,
0Z{,
PZ{,
piS(
@xS(
PZ{,
PZ{,
PZ{,
pZ{,
@[{,
`OT(
@[{,
@[{,
@[{,
`OT(
 \{,
0\{,
P\{,
`i{,
@i{,
@i{,
 j{,
@i{,
`i{,
 j{,
 j{,
`j{,
`j{,
`j{,
Pi{,
Pw	*
pe	*
 q{,
@q{,
`q{,
 r{,
@r{,
`r{,
0y{,
py{,
0y{,
Py{,
py{,
@z{,
`z{,
0{{,
`n%*
`o%*
p!'*
@0'*
`?'*
 S'*
0-'*
 ^'*
`^'*
P^'*
p['*
0p'*
pt'*
 k'*
P['*
`['*
 Q(*
0e'*
0h'*
 Q(*
0['*
@['*
P0(*
0E(*
P`'*
Pg'*
0E(*
0x'*
p8(*
Pv'*
@^'*
 ['*
Pc'*
 \'*
Pq'*
@l'*
0Z'*
 ((*
Pb'*
0_'*
`_'*
py'*
`m'*
0s'*
 Z'*
0^'*
pZ'*
p^'*
`Z'*
@Z'*
0\'*
PZ'*
pf'*
@a'*
pd'*
0{'*
 `'*
 T(*
0T(*
PV(*
 Y(*
 \(*
@^(*
`e(*
@T(*
`[(*
`X(*
 ](*
`_(*
`+)*
p2)*
@2)*
`2)*
02)*
 3)*
P2)*
@r)*
p5)*
`4)*
`<)*
0E)*
03)*
 2)*
Py)*
 6)*
p:)*
0;)*
08)*
Pv)*
0?)*
0e)*
p!**
0"**
 $**
`[**
@%**
`&**
PT**
0P+*
PB+*
 W+*
pd+*
0m+*
 =+*
`++*
PM+*
PM+*
P=+*
0>,*
pJ,*
 	,*
Pm,*
`G,*
Px,*
04-*
p"-*
`3-*
`5-*
0u,*
 |,*
Pk-*
Pk-*
 u,*
`u,*
pu,*
`_-*
`_-*
@x,*
 D-*
px,*
Pu,*
@u,*
@v,*
Pv,*
 v,*
@w,*
0v,*
@},*
`t,*
PB-*
 {,*
@~,*
0y,*
`y,*
Pt,*
0x,*
@t,*
`x,*
0t,*
pt,*
`v,*
P)-*
0!|,
0!|,
p{,*
P!|,
p!|,
 t,*
 x,*
0$|,
 z,*
Pz,*
Pn-*
0n-*
`n-*
 n-*
 o-*
 %|,
Ps-*
0&|,
Pv-*
@&|,
0{-*
 z-*
 ~-*
`&|,
px-*
pn-*
@n-*
0q-*
Pw-*
@|-*
0}-*
 *|,
@*|,
 ,|,
P,|,
p,|,
0.|,
 7.*
07.*
P.|,
08.*
 e.*
p.|,
@8.*
0=.*
`:.*
p<.*
p0|,
@?.*
P8.*
 8.*
 9.*
p9.*
@7.*
 `.*
 3|,
p4|,
05|,
P5|,
p5|,
0:|,
@4|,
04|,
0:|,
P:|,
p:|,
@>|,
` /*
p!/*
p /*
`>|,
0 /*
P /*
  /*
@ /*
0`/*
`#/*
p@|,
P"/*
 ~/*
P*/*
 -/*
 3/*
 !/*
@g/*
 )/*
p%/*
`(/*
0A|,
 &/*
@d/*
 S/*
0C|,
p+/*
 D|,
@D|,
`D|,
pE|,
pG|,
0+0*
0I|,
PJ|,
PJ|,
piS(
@xS(
PJ|,
PJ|,
PJ|,
PlB*
piS(
@xS(
p-B*
0lB*
 lB*
@lB*
`(b,
@Q|,
`OT(
P7C*
`OT(
 @C*
@Q|,
PQ|,
 8C*
pQ|,
`7C*
PT|,
pIC*
`HC*
pT|,
 U|,
 U|,
piS(
@xS(
 U|,
 U|,
 U|,
@U|,
piS(
@xS(
``C*
 mC*
@U|,
@U|,
@U|,
0[|,
P[|,
p[|,
@Q|,
piS(
@xS(
piS(
@xS(
0#D*
 -D*
ppD*
 oD*
@^|,
0jD*
`^|,
pc|,
@yD*
PzD*
 xD*
pxD*
PxD*
@d|,
0~D*
piS(
@xS(
 e|,
piS(
@xS(
 e|,
 e|,
 e|,
 e|,
 e|,
`e|,
p=E*
`;E*
0<E*
0l|,
 m|,
`m|,
pn|,
`qH*
0n|,
@n|,
`n|,
pn|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pt|,
pq|,
pt|,
peM*
0eM*
PeM*
pkM*
 u|,
0kM*
PkM*
@u|,
`u|,
pjM*
`BI*
0jM*
PjM*
`	I*
`PL*
 qI*
piM*
 v|,
0iM*
PiM*
@v|,
`v|,
phM*
0hM*
PhM*
PUI*
p/I*
pgM*
 w|,
0gM*
PgM*
@w|,
`w|,
pfM*
P`K*
0fM*
PfM*
P>M*
@! +
@" +
 lO*
0pO*
0NO*
plO*
0NO*
 pO*
0rO*
0NO*
 rO*
PsO*
0NO*
P<P*
`TP*
0/P*
PTP*
pXP*
P<P*
`TP*
0/P*
P<P*
`TP*
0/P*
0[P*
P<P*
`TP*
0/P*
@. +
@0 +
@1 +
@5 +
@6 +
@9 +
 IQ*
PQQ*
`*Q*
p"Q*
@CQ*
PNQ*
0EQ*
PFQ*
pGQ*
 /Q*
`5Q*
`&Q*
P0Q*
`'Q*
p:Q*
`)Q*
09Q*
`(Q*
`$Q*
`%Q*
`#Q*
p?Q*
@o +
0#b,
 p +
`p +
@q +
 fX,
@u +
@y +
piS(
@xS(
@\T*
@WT*
0PT*
pRT*
@\T*
@WT*
0PT*
pRT*
@\T*
@WT*
0PT*
pRT*
`OT(
piS(
@xS(
 WR*
 bR*
P{R*
@WQ*
`5R*
 YT*
@?5.
0J5.
 QU*
 mU*
@LT*
pLT*
PLT*
@} +
0*\*
P*\*
P%c*
 @c*
p$c*
`%c*
`$c*
p%c*
@'c*
P(c*
0*c*
 0c*
@%c*
 %c*
0%c*
@3c*
P5c*
 ]c*
 /\*
 Xc*
 (`*
`Tc*
0Wc*
`1\*
0-`*
`ic*
 ^c*
 mc*
 Hc*
PHc*
pHc*
@Vc*
PUc*
0Gc*
 a^*
 a^*
@Ic*
`Ic*
0Jc*
pNc*
@Oc*
 a^*
0Kc*
 a^*
`)c*
0-c*
 L_*
p>_*
0K_*
pFc*
0.\*
pSc*
P[c*
@kc*
`Gc*
 $c*
@$c*
0$c*
`(b,
p&d*
PPT(
`OT(
0Xd*
@Xd*
`]d*
PPT(
`OT(
 8d*
PXd*
@Yd*
0Yd*
pYd*
 ld*
0ld*
@ld*
pmd*
`3!+
@4!+
 )e*
 5!+
@6!+
@Ie*
@Ie*
@,e*
`%e*
@;!+
@<!+
@=!+
 >!+
`>!+
 ?!+
`?!+
 @!+
`@!+
 A!+
`A!+
`0e*
@'e*
@"e*
P	e*
`*e*
` e*
 L!+
@L!+
`L!+
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@[!+
@{f*
`De*
@pf*
 $e*
P<e*
 Hf*
`-f*
@4e*
@Rg*
0Ug*
 Qg*
`Pg*
pSg*
`/g*
P1g*
p1g*
0/g*
@b!+
`(b,
 c!+
0d!+
 g!+
piS(
@xS(
`OT(
`OT(
P0g*
P=g*
@eg*
0eg*
Peg*
`eg*
piS(
@xS(
phg*
01g*
PTg*
@3g*
P },
piS(
@xS(
 &},
@&},
`v!+
@w!+
@x!+
`(b,
`*},
 ,},
P,},
@J5.
@.},
piS(
@xS(
 (},
P3h*
piS(
@xS(
0Vh*
0Xh*
p h*
0,h*
@ h*
@!h*
@Lh*
P/h*
0 h*
` h*
 ,h*
0Lh*
 Vh*
0(},
@(},
`(},
p(},
 )},
0)},
0'j*
P)},
`)},
`)j*
 ?5.
P?5.
`?5.
`Dj*
 *},
 2j*
@*},
 Hj*
`*},
`OT(
PCi*
`OT(
0Ci*
 Ci*
@Ci*
P4j*
p	j*
0+},
@+},
`+},
`+},
 ,},
0,},
P,},
`,},
 -},
@J5.
PJ5.
 .},
@.},
P.},
p.},
0\j*
 Q},
p[j*
0Zj*
@Q},
P^j*
PZj*
`Q},
pZj*
p]j*
 _},
`_},
@`},
0a},
pa},
0b},
pb},
0c},
pc},
0d},
pd},
0e},
pe},
@f},
@g},
@h},
0i},
pi},
@ "+
0j},
@#"+
pj},
@%"+
0k},
@*"+
 l},
@-"+
`l},
@/"+
 m},
@2"+
`m},
@4"+
 n},
@7"+
`n},
@9"+
 o},
@<"+
`o},
@>"+
 p},
@A"+
`p},
@C"+
 q},
@F"+
`q},
@H"+
 r},
@K"+
`r},
@M"+
 s},
@P"+
`s},
@R"+
 t},
@U"+
`t},
@W"+
 u},
@Z"+
`u},
@\"+
 v},
@_"+
`v},
@a"+
 w},
@d"+
`w},
@f"+
@g"+
@x},
p:l*
p:l*
 _},
`_},
0Cl*
`^},
0Dl*
PDl*
0:l*
@:l*
P:l*
`:l*
0:l*
@:l*
P:l*
`:l*
`S},
pDl*
 :l*
 `},
 :l*
 T},
@`},
``},
p9l*
p9l*
 U},
0El*
PEl*
09l*
@9l*
P9l*
`9l*
09l*
@9l*
P9l*
`9l*
pEl*
0a},
 9l*
Pa},
0!n*
0 n*
 9l*
pa},
0&n*
 (n*
 )n*
@W},
p8l*
@1n*
p8l*
0Fl*
PFl*
08l*
@8l*
P8l*
`8l*
P=n*
@?n*
@@n*
08l*
@8l*
P8l*
`8l*
pFl*
0b},
 8l*
Pb},
p4m*
0'o*
 8l*
pb},
0Fo*
Pbo*
p?l*
@Z},
p7l*
 In*
p7l*
`?l*
0Gl*
PGl*
07l*
@7l*
P7l*
`7l*
 Nn*
07l*
@7l*
P?l*
P7l*
`7l*
pGl*
0c},
 7l*
Pc},
@?l*
 7l*
`\},
pc},
pZn*
p[n*
0?l*
p6l*
p1m*
p6l*
 ?l*
0Hl*
PHl*
06l*
@6l*
P6l*
`6l*
@1m*
06l*
@6l*
P6l*
`6l*
pHl*
0d},
 6l*
Pd},
 6l*
pd},
pln*
Pun*
p5l*
p5l*
0Il*
PIl*
05l*
@5l*
P5l*
`5l*
05l*
@5l*
P5l*
`5l*
pIl*
0e},
 5l*
Pe},
 5l*
 V},
pe},
`vn*
Pjn*
p4l*
p4l*
0Jl*
PJl*
 yq*
04l*
@4l*
P4l*
`4l*
 f},
@Oo*
04l*
@4l*
P4l*
`4l*
pJl*
@f},
 4l*
`f},
0-n*
pwm*
 4l*
 X},
 bq*
p3l*
p3l*
p>l*
0Kl*
PKl*
03l*
@3l*
P3l*
`3l*
 g},
03l*
@3l*
`>l*
P3l*
`3l*
pKl*
@g},
 3l*
`g},
p.m*
 3l*
@[},
P7m*
PNq*
p2l*
p2l*
P>l*
0Ll*
PLl*
02l*
@2l*
P2l*
`2l*
 h},
02l*
@2l*
@>l*
P2l*
`2l*
pLl*
PCq*
@h},
 2l*
`h},
0>l*
 2l*
p@l*
`wo*
 >l*
p1l*
p1l*
@S},
0Ml*
PMl*
@4q*
0i},
01l*
@1l*
P1l*
`1l*
Pi},
@,m*
01l*
@1l*
P1l*
`1l*
`T},
pMl*
pi},
 1l*
0Al*
 1l*
0,q*
PAl*
pAl*
p0l*
 nn*
p0l*
@V},
0Nl*
PNl*
0j},
00l*
@0l*
P0l*
`0l*
Pj},
pwn*
 in*
00l*
@0l*
P0l*
`0l*
pNl*
pj},
 0l*
 0l*
@X},
p/l*
pkn*
@hn*
p/l*
@Y},
0Ol*
POl*
0k},
0/l*
@/l*
P/l*
`/l*
Pk},
`k},
 @l*
`	o*
0/l*
@/l*
P/l*
`/l*
`Z},
pOl*
 /l*
 /l*
 \},
 l},
p.l*
@l},
p.l*
p=l*
0Pl*
PPl*
`l},
0.l*
@.l*
P.l*
`.l*
0.l*
@.l*
`=l*
P.l*
`.l*
@]},
pPl*
 .l*
P=l*
 .l*
@=l*
@^},
 m},
p-l*
@m},
p-l*
0=l*
0Ql*
PQl*
`m},
0-l*
@-l*
P-l*
`-l*
0-l*
@-l*
 =l*
P-l*
`-l*
@T},
pQl*
 -l*
@%n*
 'n*
 -l*
@U},
P0n*
 n},
p,l*
@n},
`<n*
@>n*
p,l*
 W},
0Rl*
PRl*
`n},
0,l*
@,l*
P,l*
`,l*
0,l*
@,l*
P,l*
`,l*
pRl*
 ,l*
 ,l*
0Hn*
`Y},
 o},
p+l*
@o},
0Mn*
  l*
p+l*
0Sl*
PSl*
`o},
0+l*
@+l*
P+l*
`+l*
0 l*
0+l*
@+l*
P+l*
`+l*
pSl*
 +l*
pYn*
@ l*
 +l*
`[},
 ]n*
P l*
@\},
 p},
p*l*
@p},
` l*
p*l*
p<l*
 ]},
0Tl*
PTl*
`p},
0*l*
@*l*
P*l*
`*l*
ptn*
p l*
0*l*
@*l*
`<l*
P*l*
`*l*
pTl*
 *l*
P<l*
 *l*
 S},
@<l*
 q},
p)l*
@q},
p)l*
0<l*
0Ul*
PUl*
 }p*
`q},
0)l*
@)l*
P)l*
`)l*
0)l*
@)l*
P)l*
`)l*
`W},
pUl*
 )l*
 <l*
 )l*
`X},
 mp*
 r},
p(l*
@r},
 3n*
p(l*
0Vl*
PVl*
`r},
0(l*
@(l*
P(l*
`(l*
02n*
0(l*
@(l*
P(l*
`(l*
pVl*
 (l*
 (l*
 |l*
 !l*
 ^},
 s},
p'l*
@s},
pzl*
0!l*
 |o*
p'l*
0Wl*
PWl*
PLp*
`s},
0'l*
@'l*
P'l*
`'l*
@!l*
0'l*
@'l*
P!l*
P'l*
`'l*
`V},
pWl*
 'l*
0Bl*
`!l*
p!l*
 'l*
`ul*
0>p*
 t},
p&l*
@t},
p&l*
 [},
0Xl*
PXl*
`t},
0&l*
@&l*
P&l*
`&l*
0&l*
@&l*
P&l*
`&l*
`]},
pXl*
 &l*
Ppl*
 &l*
p;l*
 &p*
 u},
p%l*
@u},
p%l*
`;l*
 Y},
0Yl*
PYl*
`u},
0%l*
@%l*
P%l*
`%l*
PBl*
pBl*
@kl*
0%l*
@%l*
P%l*
`%l*
pYl*
 %l*
 %l*
 sn*
 "l*
P;l*
 v},
p$l*
@v},
 yn*
0fl*
0"l*
p$l*
@;l*
0Zl*
PZl*
`v},
0$l*
@$l*
P$l*
`$l*
@"l*
0$l*
@$l*
0;l*
P$l*
`$l*
pZl*
 $l*
@rn*
P"l*
 ;l*
 $l*
 Z},
`qn*
 al*
`"l*
`U},
 w},
p#l*
@w},
p_l*
p"l*
p#l*
0[l*
P[l*
`w},
0#l*
@#l*
P#l*
`#l*
0#l*
@#l*
P#l*
`#l*
p[l*
 #l*
 #l*
@_},
pcj*
0ej*
pjj*
0lj*
pqj*
0sj*
pxj*
0zj*
 x},
@x},
Px},
piS(
@xS(
`j"+
`.~,
piS(
@xS(
`.~,
`.~,
`.~,
`.~,
`n"+
`\r*
pjr*
0t|,
@3~,
05~,
P7~,
P7~,
ps|,
 8~,
P7~,
Pt|,
P9~,
p9~,
`\r*
pjr*
Pr|,
 &v*
P&v*
pP~,
0r|,
 Uv*
p=~,
0Uv*
PUv*
0>~,
psv*
`\r*
pjr*
pUv*
`_v*
0s|,
 _v*
0?~,
 Wv*
 Yv*
@Yv*
`\r*
pjr*
Ps|,
0sv*
`mv*
pA~,
pr|,
psv*
`\r*
pjr*
0M~,
 Xw*
P-w*
p-w*
 -w*
0Yw*
PYw*
@kw*
Pkw*
@kw*
Pkw*
0F~,
@kw*
Pkw*
PF~,
`[w*
@kw*
Pkw*
pF~,
@kw*
Pkw*
@kw*
Pkw*
p]w*
@kw*
Pkw*
0K~,
PK~,
`\r*
pjr*
@3~,
0M~,
0N~,
PN~,
`\r*
pjr*
PP~,
@2x*
P2x*
`2x*
pP~,
pQ~,
 `x*
P4x*
 Tx*
PR~,
Pqx*
 S~,
`\r*
pjr*
`\r*
pjr*
P7~,
 >y*
0Uy*
psv*
`\r*
pjr*
psv*
`\r*
pjr*
P7~,
PX~,
pX~,
P7~,
P+z*
p6z*
0Z~,
`6z*
 7z*
PZ~,
P7~,
P\~,
p\~,
p:z*
@3~,
P7~,
@_~,
`_~,
`*~*
pa~,
0b~,
0d~,
 e~,
0;~*
@e~,
`0~*
`e~,
pf~,
p.~*
 .~*
0B~*
@/~*
02~*
P<~*
0h~,
 h~,
0i~,
Pi~,
pi~,
0m~,
@ #+
 n~,
@n~,
`n~,
@$#+
Pq~,
@(#+
@)#+
@+#+
0q~,
Pq~,
pq~,
0r~,
Pr~,
pr~,
Px~,
@.#+
@/#+
@2#+
@3#+
@5#+
0x~,
Px~,
px~,
0y~,
Py~,
py~,
@~~,
@~~,
`~~,
@C#+
@E#+
@U#+
 W#+
@X#+
 Y#+
`Y#+
@\#+
 ]#+
`]#+
@^#+
@_#+
 `#+
@`#+
@a#+
@y#+
@z#+
@{#+
@}#+
@	$+
@9$+
@:$+
@;$+
@=$+
@?$+
@@$+
@C$+
@H$+
@K$+
@L$+
@N$+
@O$+
@P$+
piS(
@xS(
piS(
@xS(
@0%+
`0%+
 1%+
@1%+
`1%+
02%+
P2%+
p2%+
@3%+
04%+
P4%+
 5%+
P5%+
09v&
 4v&
@h%+
@h](
 l](
`j%+
`(b,
@#&+
`OT(
`OT(
@+&+
p-&+
 2&+
@2&+
`2&+
@3&+
P4&+
p4&+
05&+
 6&+
P;&+
@A&+
@B&+
piS(
@xS(
piS(
@xS(
@C&+
 D&+
`D&+
piS(
@xS(
@I&+
`I&+
 M&+
`M&+
0#b,
@R&+
piS(
@xS(
piS(
@xS(
 S&+
 \&+
piS(
@xS(
piS(
@xS(
`.w&
 ]&+
 	'+
@ '+
@!'+
@"'+
@#'+
p.'+
0/'+
P/'+
p/'+
 0'+
@0'+
P0'+
p0'+
01'+
P1'+
@Kb,
@4'+
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@;'+
@Kb,
@Kb,
@Kb,
@Kb,
@@'+
@A'+
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
@Kb,
`V'+
@W'+
@X'+
@Z'+
@['+
@^'+
@a'+
@d'+
@g'+
 q'+
`(b,
`q'+
piS(
@xS(
`OT(
`OT(
piS(
@xS(
piS(
@xS(
piS(
@xS(
09v&
 4v&
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
 !(+
09v&
 4v&
 )(+
piS(
@xS(
@+(+
`+(+
 (},
`P(+
`Q(+
@R(+
@S(+
piS(
@xS(
@T(+
piS(
@xS(
piS(
@xS(
 c(+
`.w&
0/w&
@k(+
`.w&
0/w&
 w(+
@w(+
@x(+
 {(+
`{(+
piS(
@xS(
piS(
@xS(
piS(
@xS(
@ )+
@!)+
@")+
@#)+
@%)+
 &)+
`&)+
@()+
 *)+
P*)+
piS(
@xS(
piS(
@xS(
@6)+
@7)+
P=)+
`?)+
 B)+
@F)+
 G)+
09v&
 4v&
 J)+
@J)+
piS(
@xS(
`L)+
piS(
@xS(
`M)+
`N)+
piS(
@xS(
@e)+
 f)+
`f)+
`(b,
`(b,
@m)+
@n)+
piS(
@xS(
`OT(
`OT(
`OT(
`OT(
`o)+
piS(
@xS(
@v)+
@w)+
@x)+
@y)+
`{)+
@|)+
piS(
@xS(
piS(
@xS(
`(b,
`OT(
`OT(
`(b,
`OT(
`OT(
`(b,
`OT(
`OT(
piS(
@xS(
piS(
@xS(
`(b,
`OT(
`OT(
piS(
@xS(
piS(
@xS(
`(b,
`OT(
`OT(
@i{,
piS(
@xS(
piS(
@xS(
@ *+
 3*+
`3*+
P5*+
p5*+
p6*+
P:*+
 N*+
`N*+
`(b,
PPT(
`OT(
`\*+
PPT(
`OT(
@d*+
H)l$
8iy%
@Y~,
@ro,
`fc,
@	n,
@4h,
@Co,
pob,
0*`)
@+s,
@[Y,
@Jt,
@vd,
`v[,
@:j,
@|m,
`	d,
 c\,
@Xn,
 Lz&
@4Z,
@jf,
po`,
@:v,
@Su,
@4n,
@pm,
`L_,
@)z,
@Qm,
@{i,
 vn,
`s\,
@me,
@xp,
@U],
 Gx,
@=f,
@	~,
@yf,
 W],
@0\,
@ko,
@_e,
0_`,
`Rd,
PgZ,
@dk,
@'z,
 4],
P\z,
@:[,
`Ol,
@au,
P>[,
 W^,
0o`,
@NZ,
pL],
PGe,
@6n,
`xl,
@H\,
0p{,
 ~x,
@my,
@*X,
@Po,
@nu,
@ng,
@3q,
@!f,
@.z,
pL^,
@r^,
 /^,
@*k,
 V`,
pab,
@3N)
`Bl,
@{c,
`U^,
@sz,
@,4.
@J\,
@Ia,
@Oq,
04Z,
Pue,
@3v,
 $a,
 ^c,
P>^,
`@},
@8k,
 ?d,
@Fj,
 zp,
@Je,
@2d,
@7p,
@)b,
`S`,
p{')
 L!+
@E|,
@7f,
@9z,
@Hj,
@Uk,
@{k,
`=e,
@0p,
p z,
@6[,
`qy,
@Ln,
 !c,
 h],
 Qe,
@tf,
@do,
@De,
@Qz,
`m~,
@eX,
@^~,
 8Y,
@{u,
Ph^,
@%l,
`	|,
@)g,
 {e,
@/#+
@gb,
 8|,
@mj,
Pyz,
@Uj,
@zf,
`-z,
`gj,
@tu,
@wm,
@HL(
@d4.
`9l,
 @4.
@fz,
 ]^,
@pX,
@Kd,
`}],
`le,
@*Y,
@#j,
ph^,
@Wo,
@=_,
PLT*
@4_,
`~{,
pYY,
@Oo,
 Xe,
@J_,
@Bz,
@Vj,
@v^,
@Tq,
@oY,
`	>)
 DZ,
`7Y,
@Qr,
 Nx,
@ax,
@cm,
`$e,
 hj,
py_,
 7l,
`$[,
`Kn,
 o[,
@ud,
 d],
 yp,
@1_,
@,j,
@Q^,
@o^,
@?s,
@$h,
`]^,
@1g,
`J},
p3Y,
@sh,
`1c,
0.N)
@nz,
@@h,
@Ct,
 (4.
`<l,
`;l,
`B~,
`;\,
@1j,
@ui,
 Pc,
@#_,
@@m,
@L$+
@#g,
@cz,
 %],
@I\,
 6l,
@x{,
@L_,
`H^,
@r`,
@_Y,
@jb,
@.e,
@Mq,
@}g,
@ib,
@u{,
@w>)
ppZ,
@u_,
`ej,
@fo,
`vc,
@,],
 W`,
 p{,
@Yd,
`ia,
@/u,
 ?x,
@-4.
@Ox,
 r[,
@t[,
`!5.
@xw,
@%n,
 -|,
@Ne,
@<o,
`@l,
 =e,
@iN)
 Xc,
 dv,
`Nv,
@g`,
`R\,
P[X,
@$`)
 dc,
@&a,
0E\,
@5a,
`Jv,
`&a,
@+m,
`Zy,
 {z,
@R^,
@PY,
@dm,
 !q,
@Jw,
@vu,
@G|,
@5`,
@vz,
 iY,
Pad,
 X{,
@@|,
`mn,
P4$)
Ph{,
 -4.
@yp,
@|>)
@1m,
@mZ,
0!z,
`lc,
@qX,
@if,
@)s,
`:],
@$s,
 Vc,
@{Z,
@&],
@/c,
`4],
@6g,
`Qd,
@,m,
P6E*
@ie,
@pi,
`>y,
 8l,
@Fk,
@&f,
@1Z,
@mz,
`g~,
 h{,
@Av,
 %e,
`h\,
@3#+
@~Z,
`@b,
@is,
@uc,
PY],
Pob,
@5o,
@%v,
 7Z,
@,`,
@0b,
@wb,
@@z,
@Nk,
@wz,
 4l,
 ej,
@Tv,
 |p,
@3|,
@4c,
0s|,
`gc,
@9e,
`5b,
 \`,
@(4.
 X[,
@js,
@,d,
 C[,
@gw,
@	^,
@;~,
 ox,
@-{,
@za,
`ee,
0-Y,
@Nx,
0%`,
@EY,
`sb,
@4y,
@8g,
@7s,
0"],
@rh,
@]q,
0Wz,
P)],
 K\,
@{l,
@c>)
@[s,
@2Y,
pLd,
 H^,
`6Y,
@Wv,
`(e,
ph~,
 1X,
@E~,
 dZ,
@Of,
@Pm,
@,Y,
0z_,
@%t,
`f{,
@Kl,
@P{,
`#a,
@6X,
`W[,
@td,
@}z,
@Jb,
 J`,
@+f,
@_u,
@"g,
`~`,
@$a,
@Oh,
@o|,
`Xb,
 9X,
pay,
`Wb,
` y,
@Ru,
 ;`,
@`z,
@6w,
@@[,
@to,
P([,
Pr|,
@\\,
@B_,
@4{,
pKZ,
@Yu,
`We,
 up,
@Wm,
@!g,
@A],
@Gz,
@BY,
@re,
`hv,
`?},
@lb,
@ [,
0T\,
`3^,
@Xo,
p.'+
@mb,
`$d,
`S],
`2[,
p{y,
@'k,
 E`,
@~z,
PSN)
 Q(+
@?m,
@@n,
@&d,
0	Y,
0JZ,
 :Z,
@t\,
@!p,
@:t,
 Uc,
 /y,
@,~,
@QY,
@+l,
@Km,
0n`,
 DN)
@Vd,
@P`,
 G^,
pvY,
@ k,
`/Y,
@(Y,
@3b,
 ,y,
@gz,
Pay,
 Kv,
@"_,
@Jd,
`6x,
`]X,
 dj,
P!F(
 uv,
@=w,
@|b,
@?Y,
@0`,
`(|,
 M],
@C`,
@H_,
`Ca,
P0'+
@n;)
 o~,
@te,
`g{,
@|^,
p~v,
@ _,
 ee,
@,v,
@"d,
@f[,
@@y,
@em,
@"c,
@Tk,
pXZ,
@vZ,
@%j,
 `Z,
01'+
`*~,
p`h,
@@v,
 v_,
@V~,
@'a,
@ed,
@uw,
P%`,
`mc,
p Y,
@hb,
@VX,
@'d,
 hZ,
@be,
@Ef,
@]h,
@ja,
 EZ,
`o[,
`!z,
@ae,
P>],
`Wc,
`+c,
@8s,
@^x,
@!d,
`p~,
0`^,
@qk,
 bc,
@0Z,
@@\,
@D},
@qz,
`D~,
pBN)
@H~,
@	j,
`'a,
`!\,
@pz,
 A^,
@,q,
@7d,
@Bn,
@rq,
@Vq,
@mo,
p0'+
@+Z,
 'a,
`Ut,
 1c,
@^z,
`8|,
@k`,
@/a,
@Q\,
@-t,
`8\,
@ m,
@Mz,
@3f,
@k\,
@O],
@Hh,
``c,
`A|,
@Ah,
@cq,
@oy,
@Y>)
@^e,
@Pr,
@%o,
`	Z,
 "a,
  z,
 53.
@Ri,
@3`,
@(a,
 O},
@Sg,
 :x,
@Ho,
 .y,
`X[,
@Dk,
 cj,
@*[,
`9x,
@)Y,
@9m,
0_5.
`wn,
@xY,
@od,
@#q,
`A^,
`*c,
 >e,
`/y,
 Dx,
@f`,
@Tl,
 	d,
@bz,
@MY,
0r~,
@	e,
@vs,
@8x,
@:f,
`oc,
@Ud,
@:n,
@6r,
@r\,
@*^,
@k|,
P9[,
@[q,
@h^,
@*s,
 =x,
@p_,
 /],
@jw,
`Sc,
@{z,
@@^,
 [c,
pr~,
0!e,
 `:(
@{m,
@ e,
 A|,
P,|,
@*4.
PEl,
 =Y,
`@Y,
@Gx,
@o],
@.Z,
@|z,
@({,
pY`,
@o_,
@	},
@2q,
@q`,
0L[,
@t^,
@tZ,
@:q,
@Yk,
@\s,
@$j,
@AX,
`M],
 4~,
`h{,
`~n,
@so,
@.o,
@I~,
@R|,
`iZ,
@9v,
`Tb,
@}s,
@8z,
@K_,
 x],
 )N)
@vg,
@<d,
@`d,
@_[,
@k],
@Du,
`+~,
`=l,
@(u,
0h{,
@pf,
 tb,
@`i,
 J|,
 *4.
`g],
@*v,
@+`,
 J[,
@,^,
`'},
0vY,
@zZ,
P`^,
`35.
@ay,
@B\,
@L!+
@jY,
`hj,
@<t,
@8m,
@xm,
@ra,
@hg,
@<h,
`~w,
 g~ 
`<e,
`jc,
@Pb,
@}m,
 &a,
@KY,
@*_,
 9Z,
`dj,
@Pf,
`9y,
@Q_,
@Ve,
Pl],
 [X,
 hc,
@K`,
p!Y,
 0'+
`.y,
`@x,
 (w,
@}^,
@^o,
@\d,
`Fd,
 gc,
@df,
PLe,
@/[,
@Xj*
0oe,
`%a,
@Xi,
`-y,
@-r,
@Az,
PC\,
@&[,
@n^,
@G`,
@5i,
@0Y,
@&z,
@wy,
@jZ,
 |e,
@Qu,
`:^,
@|~,
0P],
 :],
 M\,
@ex,
`Xd,
@i[,
 S[,
@[~,
@P_,
 ax,
 |`,
`=N)
@/p,
@G_,
@>_,
0Vz,
 j4.
@ik,
@tj,
0ob,
@ t,
@'u,
@o\,
`Zc,
@lv,
@R[,
@Us,
 (a,
`tb,
`9Z,
`Nk,
`(a,
@L~,
p*^,
@&^,
@7g,
p.Y,
@$y,
@ z,
`Re,
@_d,
@+|,
@+h,
`x\,
@*p,
`ke,
 ([,
@<`,
@3m,
 9y,
@'|,
@9_,
@>s,
@Uf,
PY\,
 cc,
 hw,
@[j,
 +5.
@2k,
 yx,
 .d,
Pm|&
@ez,
@%|,
@3n,
@~y,
@bk,
@[l,
`t],
@{v,
 \k,
`vj,
@=|,
`Wd,
``w,
@$\,
@tk,
@-k,
@s^,
 ?l,
`%H(
 s`,
P%d,
`.5.
@_y,
@'r,
@Ls,
@mu,
@8v,
@O>)
@4e,
@rd,
@se,
@Ka,
`e{,
@%m,
0Ze,
@we,
@4d,
@Aa,
@f\,
 sw,
`oj,
`2z,
`yw,
`vp,
`sN)
`}c,
@Oj,
  ],
@{~,
@x_,
@ok,
 S],
pTd,
@T[,
 eY,
@GZ,
@?`,
@}~,
@Ms,
@&i,
`K},
 kZ,
@u`,
`l|,
0Xz,
@Xx,
Pp{,
@5z,
@Oz,
P/'+
@ig,
`1},
@zp,
 (|,
 }')
@Y_,
 Z|,
@Em,
@bv,
@7|,
@ln,
`fY,
@/g,
@.],
 I[,
@NN)
@f|,
@Ji,
@ \,
@'_,
@q|,
`P},
@?z,
@=p,
`rc,
@os,
 Od,
@rX,
@)a,
`on,
`Pc,
@CZ,
`?4.
 Ix,
@`g,
`-a,
`h~,
 Sb,
pTe,
@4~,
`J^,
@vl,
 3l,
 T^,
@_b,
@dY,
 fY,
@+X,
@pq,
@sj,
pN3.
@$`,
@C{,
@Ht,
@!_,
 Kb,
@T>)
@_i,
@Gn,
`Y^,
 5x,
@ZZ,
@!m,
`6~,
 Tc,
@|p,
 g4.
@li,
@+[,
@F_,
@+Y,
@G},
@hx,
@1],
 8x,
@$l,
@5e,
`cZ,
0.Y,
@Ay,
`bc,
`]v,
@9^,
`px,
@BX,
 f~ 
 /d,
@)4.
 B^,
 7c,
@={,
@*m,
P,)+
 Qd,
`(^,
@=z,
pT9(
`yb,
@ub,
@+q,
@Ae,
@Ek,
 \c,
`p{,
`[c,
 Zc,
 d4.
 5[,
@>k,
@0_,
 8Z,
@Rg,
@%i,
@K{,
@<z,
`D[,
`<\,
 ;l,
@8q,
@`l,
@]Y,
@,b,
@)p,
`%e,
@F`,
@{^,
@'f,
 )^,
@"u,
@cd,
@I{,
@3k,
@2s,
@'Z,
`FZ,
@&w,
@k[,
`:5.
@\[,
@<{,
@wZ,
@dq,
@kb,
 g_,
`r[,
@)|,
@A[,
0.|,
@#p,
@3j,
 (e,
@dy,
`h^,
@>m,
@"|,
@8d,
@/r,
`F|,
@4o,
 :l,
 U_,
@`y,
@Ym,
`\c,
`L},
@9k,
`4Z,
`Yc,
 =l,
`Rc,
@9q,
@P[,
 n`,
 Ha,
 _c,
`\v,
@Yb,
@z[,
`_c,
@+],
@T_,
@Bo,
@hz,
`5l,
@Ff,
`0y,
@OY,
 Ed,
@kY,
@Fh,
`dc,
 +c,
0@e,
 ,z,
@_],
0Te,
@Zb,
` 5.
@7_,
`:w,
@Fg,
 !`,
 lh,
`A4.
 Ga,
@y`,
Ph~,
@	`,
@wq,
`[v,
@,o,
 pc,
`4l,
@~Y,
@"p,
 `^,
`	{,
 ~},
@q^,
P.Z 
@An,
`eY,
@	z,
@Fq,
 ry,
P2X,
 .X,
`Jx,
 wY,
 s_,
@Ed,
PZY,
@#c,
 }e,
@ya,
pRz,
@Io,
`Ex,
@%a,
`6l,
@:e,
p%`,
@z^,
@&y,
 >l,
@c_,
`DZ,
@zi,
@	\,
pr|,
p4|,
`}e,
@0s,
@$m,
@ha,
@B{,
`!q,
@@5.
 FZ,
@:_,
@|_,
@%y,
@+z,
@K],
@1q,
`c],
 Qc,
@+4.
pxZ,
 R},
@:a,
@oZ,
@9w,
@Gd,
@M|,
 Re,
@5_,
P{z,
@It,
 s\,
@#e,
@ni,
@'`,
P>Z,
@.`,
`25.
@6_,
@mX,
 B4.
@7u,
@z`,
@ Z,
@i~ 
 ac,
@	t,
@Aq,
0ab,
@>|,
@3w,
@My,
@0'+
@0u,
@3z,
 Fa,
P.Y,
 Sc,
 K^,
p/'+
`]c,
` b,
`iY,
@4i,
@H[,
@Zu,
@nv,
@Zl,
`cX,
 qy,
`yY,
@)y,
@S~,
@R{,
@nl,
@Hq,
P-Y,
@O~,
 	{,
@1e,
`ec,
@-],
@0|,
@=k,
@Rx,
`xZ,
@LY,
@_j,
@uu,
@5t,
@If,
`c~,
@yk,
@>u,
@U[,
0|y,
`^c,
`za,
@Ns,
@Rk,
@ps,
@}Y,
@#\,
@b`,
@@`,
 0y,
@[g,
@mv,
@(p,
@m^,
@Xm,
@!u,
P8N)
 ^[,
 %a,
@1\,
pp{,
@im,
`Od,
@X\,
@]Z,
@ti,
@'o,
@xc,
 \^,
@~p,
@?f,
@Tf,
@=u,
06^,
 j~,
@fu,
@<^,
@rw,
@`^,
@uZ,
`ay,
`ax,
@[],
@p^,
 }n,
@|g,
`,y,
pxN)
`Oa,
@Ku,
 Z^,
`55.
`yZ,
 R\,
Po`,
@=a,
@=g,
`gY,
`>l,
P%H(
`;x,
 -Y,
@Oe,
phe,
`s`,
@*q,
@5r,
`N\,
@T*+
@MZ,
@f~,
@eo,
@zh,
 Qk,
 3\,
@FX,
Px[,
@e\,
@Tj,
@Ub,
`?l,
@#],
@by,
@ o,
@,_,
@iz,
0l\,
@ ~,
@^Z,
@md,
@qq,
@mY,
0{z,
 6z,
 Fd,
 Ce,
`\^,
Ps|,
@6p,
@hs,
@|l,
`W^,
@3_,
PvY,
 c~,
`7l,
@;x,
`-5.
`Z\,
 `c,
`#d,
 P},
`v_,
@SZ,
 L_,
@w~,
@S\,
@jk,
`}b,
@}v,
@kx,
`XN)
 @d,
@il,
pZ{,
@Pk,
`L\,
`pc,
@ih,
`Mx,
@Yw,
@:o,
`.^,
 }b,
@xz,
@1p,
@)_,
@TZ,
`pw,
@"b,
`KX,
 kc,
`hY,
@ny,
`EZ,
@=i,
 8c,
@,X,
@1v,
@;i,
@+_,
 	X,
@rz,
@_\,
@Rz,
@.t,
@;Y,
@rZ,
@nt,
@Hb,
@zy,
@RY,
`E`,
@}u,
0dN)
@Bx,
`/5.
 |w,
@~^,
@ |,
Pm|,
@Mh,
 cw,
@0d,
`QX,
`N^,
@7},
p!z,
@7e,
@E},
@nh,
@kz,
p>],
@~[,
@#|,
 ]c,
@Ii,
`wp,
@4\,
 g],
@hu,
`fj,
@m`,
@Gj,
@Zf,
@z],
Pb[,
@uf,
@QZ,
@?j,
@DX,
PYr,
 $e,
@e[,
@=c,
@Ci,
@Ck,
`Vb,
@Cr,
 <l,
@3o,
@_v,
@Sl,
`3],
@nZ,
@1f,
`kw,
@{[,
@az,
@B`,
@Lu,
@n`,
@l`,
@uy,
@(z,
`dZ,
@cs,
`xa,
`45.
@tp,
@?_,
@u^,
`65.
 Nv,
`i\,
` `,
@p\,
 hY,
@1|,
@Vh,
@ws,
@CX,
@Xu,
@\],
@6x,
`)e,
@{a,
 #\,
@Fs,
`ok,
@2j,
 1z,
`MZ,
 `#+
@bg,
@C],
@%~,
`pn,
Pd],
 uX,
@:~,
 Wc,
`N`,
@:z,
0=^,
 xy,
@Ea,
0J>)
`$a,
 mc,
`PZ,
@U^,
`7~,
@$Z,
`m],
 ;d,
`:Z,
@5n,
@_},
@w^,
`7z,
 D\,
@2^,
 We,
 mi,
@5u,
ps|,
@-Y,
 nw,
@iq,
`Hx,
@?q,
@zo,
`M~,
@@j,
@ d,
@y^,
`,5.
 nc,
0Yz,
@pe,
@^`,
@Nz,
@;],
@q],
 #Z,
@;r,
@>a,
@?w,
 gd,
@)k,
@gy,
@+^,
@PX,
@9j,
@sk,
 vc,
Pt|,
 ^\,
@Md,
@VZ,
@S_,
@M^,
@og,
@sd,
`*b,
@*g,
`^[,
@x`,
 ]X,
@^f,
@g~ 
`=\,
@Zg,
 y_)
@+v,
@gg,
@&m,
`f_,
@2`,
@@_,
@l~,
@-n,
@Bt,
@;_,
@_f,
@3h,
@]|,
`"a,
@AZ,
0r|,
@Dg,
@gu,
@bs,
 Rd,
@Uq,
`Z^,
 *b,
@fv,
`^\,
@p],
03e,
@bl,
@je,
`\`,
@}y,
 $d,
@Ux,
 	|,
@qm,
@	],
`8Z,
 f_,
 Bl,
0YY,
@<_,
@!Z,
@Kg,
0tY,
@ug,
@Lv,
 fc,
@nd,
`sp,
@	w,
`5\,
@<u,
@)Z,
`kc,
`T^,
@al,
 -y,
 tx,
p)],
`I~ 
 AY,
@]~,
ph{,
@0],
`gd,
`\|,
@F],
@m>)
@$v,
@5{,
@0^,
 	Z,
@~h,
pw_)
@(X,
`/d,
`7`,
pF[,
@Qw,
@Lm,
@up,
`I[,
`9E*
@>d,
`?d,
@Gs,
 gj,
`W`,
@@q,
 [^,
@/\,
@ f,
`7Z,
@^>)
 >^,
@Q[,
pvw,
@{f,
@Df,
@pd,
 2Z,
@._,
@M`,
@#h,
@_o,
`Ce,
@Nj,
@[`,
pb[,
`[^,
@t~,
@\^,
`%d,
`?\,
@4t,
`3l,
@1~,
0[[,
 A')
@eb,
 Y_,
@IX,
@*c,
@r>)
@3[,
@[k,
@6c,
@0g,
`:l,
 p~,
@Ts,
`2Z,
@Z5.
@Ez,
@ip,
@&X,
@fi,
@9s,
@_Z,
@*j,
@u],
`p|,
@U~,
07],
@9|,
@R_,
@Rb,
 ze,
@3X,
`0c,
@-`,
@8p,
`B4.
@He,
@Sy,
 }p,
P`Z,
@Tg,
 v~,
@.`)
`{a,
 `Y,
@T`,
@C_,
@{_,
`Yk,
@wg,
 }`,
@ag,
 LX,
@pa,
@jz,
 /c,
@{p,
@8f,
@"s,
@Yf,
 {a,
@aZ,
`I`,
@'i,
 5],
@gl,
 7`,
 K5.
@J{,
P-')
@uz,
`Ha,
@&l,
@Dz,
`ry,
@2f,
@H|,
 Yc,
`nc,
@I_,
@Yi,
`9d,
@,h,
@t`,
@|u,
@6u,
 h\,
 sb,
@v`,
@A5.
 vj,
@_w,
@0z,
`"Z,
`2\,
@4Y,
 Wb,
@=h,
@B],
@Ao,
 \|,
`05.
@Xy,
 5d,
@5^,
`1X,
@Di,
@Z^,
`cc,
@	y,
0"\,
`{e,
@Th,
@Cz,
@bx,
@|Y,
 oc,
@[b,
pa],
@2a,
@2v,
@C\,
@Br,
pZd,
@of,
@"a,
@~_,
@-_,
@WZ,
@8j,
@#a,
 -b,
 D[,
pne,
@=x,
0/'+
@xv,
@~q,
@Dr,
@'^,
`15.
PE\,
`@d,
@!k,
@%z,
@lo,
@(_,
 ia,
@)c,
@&t,
 zN)
 |a,
@Jm,
@&o,
ptD*
@Ik,
P1'+
 A4.
@J~,
@^d,
@Gw,
py~,
@d`,
 T|,
@_~,
@	_,
@%h,
@h>)
`kZ,
0IN)
 x\,
`RX,
`G~,
`d|,
@'t,
@Dm,
@.u,
@\h,
 ln,
@RZ,
@,|,
@Pc,
@At,
`#Z,
@`\,
 )4.
@Y{,
@^i,
 N\,
@+b,
@l{,
 dX,
@,t,
@>c,
@W\,
`Cx,
@"`,
@yq,
@Rm,
`hc,
 nv,
`u~,
@;{,
`H~ 
@c|,
`@4.
@;|,
0t|,
 u~,
P(^,
`>},
pfd,
@{],
@c`,
@6d,
`v(+
`xy,
@wc,
 #a,
@Fz,
@ak,
@fb,
@sZ,
@6i,
@Kv,
@vi,
@.{,
@?Z,
@{o,
@<b,
@(g,
@K[,
@ r,
@3Y,
 Lx,
@*Z,
@Eu,
 S`,
@>z,
`}p,
@+j,
PnN)
 >;)
0Y`,
 N^,
@D_,
 lZ,
`b\,
`V`,
@Eh,
`Kv,
@?v,
@&_,
PMg*
@f~ 
0[d,
p5|,
`tv,
@#w,
0I9(
@Nq,
@E],
@H],
@.[,
@Bi,
`Al,
@,i,
@}_,
@f_,
@	o,
@Vo,
 h[,
@Wi,
`6c,
@,f,
p#^,
`ic,
@&r,
@-o,
@(c,
`Xc,
@]k,
`)a,
@!^,
@Jo,
@;z,
@_z,
`5[,
@2m,
`Vc,
`x')
@G^,
@zb,
@Cu,
 lc,
@]o,
@YX,
@Lg,
@![,
@x^,
@8~,
p]N)
@Am,
 C3.
@O^,
Px],
`W],
@%q,
@@x,
@;n,
@ei,
 xb,
 jc,
0>Z,
@lY,
@Gh,
@(r,
@xq,
@xX,
`Ly,
 .Y,
@Jr,
`:`,
0F[,
`h],
`|e,
@Es,
 ec,
@/{,
@/_,
`fe,
 c4.
@`],
`8l,
@Pi,
@oz,
Pab,
 +4.
@$q,
@Mj,
@wX,
@Sw,
@O_,
@-i,
 _N)
`4x,
@{h,
 ic,
@nn,
@%H(
@P|,
@xs,
P|c,
@ i,
@Ex,
 {p,
@<i,
@;o,
@kq,
P z,
@vm,
@E_,
@hd*
@}p,
@~s,
@I^,
`%],
p2X,
 !\,
@1s,
@-c,
@Ir,
PxZ,
@bY,
 Bx,
 gY,
@4X,
@)u,
@Jk,
@zY,
@UZ,
0MZ,
@4r,
`sn,
`ze,
@V\,
@Cd,
@ly,
 fe,
@[Z,
@Ul,
 )e,
`b~,
 1`,
 ,4.
`C},
`zn,
@Ye,
@.r,
`B^,
@v],
`L!+
@I&+
`Q],
@hl,
`wU 
@:Y,
 9`,
`Qe,
@\q,
`ac,
@1Y,
@D{,
`-^,
@@],
@Mg,
 v[,
@`f,
@Ib,
@A_,
@f],
 b],
0'[,
@5Y,
`>x,
`:d,
@h{,
@ky,
@<[,
p2e,
@p{,
@Ju,
 nn,
0gZ,
P7^,
@~],
@nb,
@N],
@OZ,
@]e,
@.d,
@%_,
@/i,
`5d,
@s],
 /e,
@9f,
@ef,
@zk,
@Zs,
@*h,
@E^,
@tz,
@~g,
@>f,
PJZ,
@Qo,
@8],
`m\,
`n[,
 Al,
@mh,
`Qc,
@n],
@Yg,
@Lh,
`Zv,
@;t,
@Pz,
 [v,
0z{,
@g[,
`'(+
 (n,
@m[,
@8c,
`uX,
@5~,
0Zz,
`C[,
@Tj*
@iy,
`o~,
`Ov,
@bq,
`Uc,
 b~,
`R},
@jq,
@d[,
@ql,
 rc,
@#[,
@Gb,
@?g,
@3t,
`H`,
@qs,
 le,
@.k,
@gi,
@e~ 
@yo,
@}Z,
@xh,
@ u,
@IZ,
@R`,
@8b,
@8_,
@dz,
 ba,
@	l,
@Lx,
 5l,
@'y,
@Gq,
`cj,
`O},
@lz,
@>g,
@6e,
 9l,
@Q{,
@[x,
@Vw,
 Xd,
@kk,
`ew,
@!z,
@	v,
@jm,
@4`,
@Eg,
@pg,
@~b,
`Nx,
@a~,
@Ba,
05`)
@@s,
 '},
@z~,
`&},
@[^,
p9[,
PYY,
`lZ,
@)d,
@!r,
`9b,
 cZ,
`JX,
`A!+
 B|,
@6{,
@|[,
 Xb,
pgZ,
 Y[,
`@X,
@l^,
@om,
`=Y,
@I],
@Qi,
`j4.
@$_,
@*d,
@c4.
@]^,
@`u,
`/e,
@,e,
@#s,
 ]`,
@as,
 yn,
@Aj,
@2_,
P7`)
`Z|,
@Jx,
 7^,
`1`,
@&k,
@^m,
`zx,
 Rc,
@(d,
`B|,
@ol,
@T~,
@Kr,
@NY,
@g_,
0Ge,
@j[,
@rk,
@n\,
@yh,
@=r,
 G},
 fj,
`Tc,
@HX,
@\Z,
`8b,
@Ki,
@#v,
 ?b,
@O[,
@qd,
@D')
@Uh,
@.i,
@Ss,
@ou,
@bt,
 n[,
@<r,
@9n,
 @b,
0r\(
 2%*
pGX&
@[U&
pIJ(
0A*&
@v.*
0z%*
@PV 
@9**
PJy&
`a'&
P0{&
 6W(
0P_(
pO%&
 @#&
Pz(&
`G"*
0*^&
p^"&
p6+*
Pi-*
pJ6&
Psy&
0s%*
 aS(
p*P(
 2Z 
 ]`&
`3N(
p^$&
 hd*
`)J(
pK9&
pOS(
`+0&
 b9&
0Zc&
p]<'
pOT(
@c#*
Pjv&
`(W&
PPT(
P%,*
`W_(
P3Z 
PT{&
`;U&
 mg*
p['&
 1k*
@)[(
P%T(
`]|&
@z.*
 NS(
PC*&
 Oa&
pe;&
pP$&
 :U 
 `N&
`k`(
0hd*
`ez&
@,(&
`.F&
@0**
0lu(
@%f&
P1d&
@x')
 FI&
p>N&
P0>(
0EX&
 *(&
 UQ&
`2#*
p>8&
@My&
@Gt(
PPQ&
pLP(
Px')
 h,*
0[M&
`}\&
pq~&
PEd&
0zQ&
POL(
 kI(
p~T(
pxe*
Pt8&
`rV(
 v)&
 ;T(
@76&
`;5&
09Z 
pjT&
`#$*
0R&*
 1c&
PWS(
0<)&
 o4&
`J-&
@]e)
@d9&
p}/*
 g,&
@,6&
`ow&
`&;&
ptX(
0"a&
@z:(
`zR(
0ZN&
`LT(
@1{&
Ph[(
`5w&
`,N&
@nf*
`),*
`L-*
p_f*
0ob&
p+R&
p7$*
`]/*
@"[(
PdS(
PQ_&
p>T(
`+f*
`y/&
02(*
0{T*
 3T(
@mb&
PQ&*
 )]&
prU(
@1%*
p9"&
0}3&
p8e&
 H`&
0`w&
`&(*
pN~*
pjz&
0}:(
PL~*
@{1&
 1%*
pi]&
@A[(
 6&*
@rR&
 7$&
p"	*
@?[(
`n!&
@#8&
 :S&
`.6&
P	X&
 E/&
P1E*
pw	*
0aX&
@*w&
PCP(
p&$*
Pg%&
 {T(
0i6&
p,8&
@J4&
p-U&
PBT(
`0z&
0s**
p{=(
0O<'
0o5&
 -c&
 ;	*
P39&
0_,*
P~z&
`bw&
0|T(
 Hd&
P9d&
 AU 
0&)*
p1_&
`{D*
@I-*
Pz+*
P4+*
p\S(
@v\&
 j.*
P,^&
@&#*
@LJ(
 ]a&
 86&
@w**
` ^&
0.f&
0!Y&
 o<'
0Dv&
@`w&
`OJ(
PkH(
@n:&
0>%*
@4J(
0='*
@:y&
Pbw&
 ]f*
P ^(
P|V&
Pix&
PI[&
 }^&
 1(&
`xe&
`ZI(
@cS(
p0%&
`&%&
@2%*
`6U 
`g%&
0*$*
 z &
 Y^(
`N|&
`u]&
pzT(
P0g*
p^{&
p/T&
P	#&
`!Y(
@HQ&
PD#*
0]2&
0xS&
 QL(
p59&
0/H(
p	_&
 }'&
Pj[(
p+w&
P3**
 1$*
 LZ 
0C(*
P@9&
PZ.&
P$a&
p:Y&
Pqb&
`)$*
@$c&
0x+*
@5>(
`#Y(
py[(
PA#*
`LZ 
PK+*
 5P(
`0a&
PZ	*
 	\&
`o*&
 |(*
`dy&
@JM&
 iz&
@m$&
0uV&
@d$&
`1{&
`@Z(
pIZ 
 8y&
`P[(
PTt(
 	8&
`]-*
p?/*
0jK(
pMy&
Prx&
p$d*
PC/*
@q<'
`6W(
`W,*
 *X&
@[%&
`]U&
P\"&
 E%*
`.P(
@yR(
pM,*
0rJ(
P[X&
@>^(
@#$*
0b7&
`,P(
p\n*
@'	*
@Ny&
 d(&
06:&
0YZ 
@NR(
 1{&
`Ca&
PP'&
`R-&
`)U&
pjJ(
`E&*
P0{&
`q-&
 Ff*
`($*
pAv&
P]"&
0"A(
`$a(
0j(*
p_'&
pk~&
07Z 
@bf&
0PW(
 pU&
0\X&
 \,&
0Ge&
`ud&
P^8&
PfY(
P2'&
`U)*
`Bf*
0UL)
 gV&
PI9&
`9+*
P\y&
``4&
0C'&
p6/*
p]Y&
 =**
 @T(
 ;$*
 4<(
PFY(
p00&
@CP(
PMy&
`ZQ&
`	 *
Pqy&
p?a(
0(N(
pzW&
 +H(
 ZS(
0[,*
P%$*
p-$*
`YJ(
0W**
`D&*
`My&
@^Q&
@3'*
0b.&
`K&*
 of&
p`8&
@d#&
PDZ 
pNL)
`i-&
pY@(
P&w&
`B7&
@[U 
01{&
`lW&
0I~*
0h\&
`r**
 1Z 
`qz&
`!%*
0h](
P1>(
pU4&
 cy&
`y/*
PxX(
 y)&
`0H(
Pk6&
 O(*
p"0*
P\_&
0.S&
pC&*
P$\(
PpM&
PL.*
 )U 
0T$&
@Vb&
`t`(
0e+*
 IY(
P7f*
`RH(
@	]&
P4Z 
 e *
Pd7&
 d.&
po)*
PED&
0My&
PS4&
P!*&
p]b,
0123456789ABCDEF
11.0
a001
11.0
L!*+
h7*+
$!*+
0123456789ABCDEF
0123456789ABCDEF
0123456789ABCDEF
0123456789ABCDEF
U3UD3f
0123456789ABCDEF
										
  ##%%&&))**,,//1122447788;;==>>@@CCEEFFIIJJLLOOQQRRTTWWXX[[]]^^aabbddgghhkkmmnnppssuuvvyyzz||
P}^,
P|^,
P{^,
Pz^,
Py^,
Px^,
ph^,
`h^,
Pw^,
Pv^,
Ph^,
@h^,
Pu^,
PF_,
PE_,
PD_,
PK_,
PC_,
PJ_,
PB_,
PI_,
P<_,
P;_,
P:_,
P9_,
P8_,
P7_,
P6_,
P5_,
P4_,
P	_,
P3_,
P2_,
P1_,
P0_,
P/_,
P._,
P-_,
P,_,
PR_,
PT_,
PQ_,
 Y_,
P	`,
g4>4
f4>4
PEa,
0!c,
P|g,
Pug,
Png,
Pgg,
P`g,
PYg,
PRg,
PKg,
PDg,
P=g,
P6g,
P/g,
P(g,
P!g,
Pyf,
P^f,
PIf,
P=f,
P7f,
P1f,
P*h,
P#h,
PTh,
PLh,
PEh,
P~h,
Pxh,
Prh,
0lh,
Pih,
PTj,
PMj,
PFj,
P?j,
P8j,
P1j,
P*j,
P#j,
CV	)
Pzi,
Pti,
0mi,
Pei,
P^i,
PWi,
PPi,
PIi,
PBi,
P;i,
P4i,
BV	)
P,i,
P%i,
Pmj,
P$l,
5A:+
Pyk,
Pqk,
Pik,
Pak,
0\k,
pYk,
0Qk,
pNk,
PCk,
P=k,
P8k,
P2k,
P&k,
4A:+
Pnl,
Pgl,
P`l,
PZl,
PSl,
P{l,
Pvl,
1Mb5
P{m,
Pom,
Pcm,
P^m,
PWm,
PPm,
PJm,
P>m,
P8m,
P1m,
P*m,
0Mb5
P$m,
P@n,
P9n,
P3n,
P-n,
0(n,
P%n,
P6p,
P/p,
P(p,
P!p,
Pyo,
Pro,
Pko,
Pdo,
P]o,
PVo,
POo,
PHo,
PAo,
P:o,
P3o,
P,o,
P%o,
PPr,
PIr,
PBr,
P;r,
P4r,
P-r,
P&r,
5A:+
P~q,
Pwq,
Ppq,
Piq,
Pbq,
P[q,
PTq,
PMq,
PFq,
4A:+
P?q,
P8q,
P1q,
P*q,
P#q,
p!q,
PHt,
PAt,
P:t,
P3t,
P,t,
P%t,
P	t,
OW<)
S8H-
P}s,
Pvs,
Pos,
Phs,
Pas,
NW<)
PZs,
PSs,
PLs,
PEs,
P>s,
P7s,
P0s,
P)s,
P"s,
R8H-
P?v,
Aukp
P8v,
P1v,
P*v,
P#v,
GM&1
=333
@ukp
FM&1
P{u,
Ptu,
Pmu,
Pfu,
P_u,
PXu,
PQu,
PJu,
<333
PCu,
P<u,
P5u,
P.u,
P'u,
P u,
0dv,
Pfv,
p>y,
PXy,
PP{,
PI{,
PB{,
P;{,
P4{,
P-{,
pg{,
P	~,
3ilO
2ilO
0~},
`I~ 
0YZ 
 AU 
0|T(
 )U 
@[U 
`#E-
n#E-
 $E-
?$E-
N$E-
U$E-
h$E-
2%E-
H%E-
i%E-
'&E-
8&E-
W&E-
p&E-
8'E-
`'E-
 (E-
J(E-
Y(E-
x(E-
8)E-
(*E-
P*E-
x*E-
8+E-
[+E-
x+E-
#,E-
=,E-
O,E-
X,E-
 -E-
I-E-
^-E-
p-E-
(.E-
;.E-
O.E-
`.E-
0/E-
J/E-
d/E-
(0E-
P0E-
/1E-
H1E-
p1E-
82E-
X2E-
13E-
P3E-
@4E-
h4E-
;5E-
X5E-
U6E-
p6E-
X7E-
"8E-
?8E-
V8E-
l8E-
89E-
x9E-
_:E-
l:E-
,;E-
H;E-
p;E-
8<E-
2=E-
P=E-
|=E-
8>E-
X>E-
@?E-
h?E-
8@E-
p@E-
HAE-
~AE-
TBE-
hBE-
"CE-
7CE-
PCE-
hCE-
(DE-
`DE-
GEE-
hEE-
 FE-
HFE-
pFE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
`GE-
'HE-
@HE-
vHE-
<IE-
`IE-
:JE-
PJE-
xJE-
,KE-
@KE-
XKE-
;LE-
PLE-
iLE-
(ME-
|ME-
 NE-
HNE-
$OE-
9OE-
UOE-
gOE-
{OE-
 PE-
?PE-
XPE-
wPE-
2QE-
PQE-
vQE-
XRE-
)SE-
CSE-
hSE-
+TE-
HTE-
`TE-
 UE-
HUE-
8VE-
(WE-
JWE-
eWE-
(XE-
XXE-
BYE-
`YE-
*ZE-
<ZE-
RZE-
pZE-
 [E-
@[E-
p[E-
W\E-
p\E-
P]E-
`^E-
s^E-
8_E-
l_E-
0`E-
X`E-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
1aE-
PaE-
 bE-
6bE-
LbE-
ibE-
{bE-
@cE-
jcE-
(dE-
JdE-
bdE-
bdE-
bdE-
bdE-
8eE-
heE-
P	F-
J F-
_ F-
0!F-
b!F-
0"F-
X"F-
@#F-
h#F-
P$F-
X%F-
 &F-
`&F-
H'F-
x(F-
()F-
h)F-
`+F-
@,F-
`-F-
h/F-
H1F-
 2F-
X2F-
`3F-
H4F-
P5F-
H6F-
(7F-
(8F-
`9F-
PBF-
8CF-
0DF-
XDF-
0EF-
0FF-
hFF-
9GF-
PGF-
0HF-
THF-
pHF-
pJF-
(KF-
(LF-
xLF-
(MF-
 NF-
GNF-
hNF-
hOF-
LPF-
hPF-
xQF-
(RF-
pRF-
PSF-
XTF-
HUF-
@VF-
8WF-
xWF-
(XF-
XXF-
0YF-
XYF-
8ZF-
LZF-
aZF-
~ZF-
0[F-
X[F-
h[F-
8\F-
8]F-
P^F-
x^F-
0_F-
`_F-
@`F-
h`F-
8aF-
haF-
(bF-
`bF-
~ZF-
 cF-
HcF-
(dF-
HdF-
pdF-
(hF-
`hF-
8iF-
xiF-
HdF-
8jF-
0kF-
DlF-
]lF-
zlF-
PmF-
@nF-
hnF-
0oF-
XoF-
 qF-
 rF-
PrF-
PsF-
8tF-
`tF-
 uF-
`uF-
 vF-
XvF-
HwF-
OxF-
hxF-
8yF-
pyF-
XzF-
({F-
H{F-
x{F-
0}F-
@~F-
x~F-
pJF-
.gif
.jpg
.jpeg
.txt
$fI-
.html
/fI-
.xml
9fI-
 x4-
@w4-
`u4-
p}4-
pw4-
pw4-
0(5-
@&5-
pG5-
Pm5-
pD5-
PC5-
0q5-
`=5-
`=5-
p=5-
pG5-
Pm5-
pD5-
PC5-
0q5-
`=5-
`=5-
p=5-
<	J-
0	J-
@	J-
T	J-
Y	J-
^	J-
c	J-
g	J-
@}J-
l	J-
r	J-
y	J-
h	J-
3?J-
NOJ-
uMJ-
hMJ-
%TJ-
(>J-
2>J-
;>J-
D>J-
M>J-
X>J-
`>J-
i>J-
u>J-
E	L-
R>J-
.BJ-
3BJ-
jBJ-
PBJ-
hMJ-
TBJ-
XBJ-
XBJ-
fBJ-
nBJ-
sUK-
sUK-
)CJ-
=CJ-
NCJ-
QCJ-
hCJ-
hCJ-
nCJ-
nCJ-
yCJ-
yCJ-
`OJ-
%DJ-
-DJ-
6DJ-
?DJ-
HDJ-
QDJ-
ZDJ-
cDJ-
lDJ-
tDJ-
|DJ-
0EJ-
0EJ-
<EJ-
<EJ-
JEJ-
JEJ-
VEJ-
VEJ-
gEJ-
gEJ-
yEJ-
yEJ-
,FJ-
8FJ-
DFJ-
QFJ-
^FJ-
tFJ-
|FJ-
(GJ-
@GJ-
RGJ-
mGJ-
zGJ-
%HJ-
.HJ-
7HJ-
7HJ-
=HJ-
[HJ-
dHJ-
uHJ-
5IJ-
<IJ-
CIJ-
JIJ-
QIJ-
XIJ-
_IJ-
fIJ-
vIJ-
mIJ-
rIJ-
{IJ-
NMJ-
!JJ-
+JJ-
5JJ-
?JJ-
IJJ-
SJJ-
]JJ-
]JJ-
sJJ-
/KJ-
4KJ-
EKJ-
VKJ-
pKJ-
pKJ-
uKJ-
uKJ-
{KJ-
q\J-
)LJ-
3LJ-
PLJ-
VLJ-
tLJ-
zLJ-
	MJ-
-MJ-
EMJ-
UMJ-
lMJ-
zMJ-
$NJ-
$NJ-
1NJ-
1NJ-
<NJ-
<NJ-
LNJ-
LNJ-
\NJ-
\NJ-
dNJ-
dNJ-
jNJ-
jNJ-
qNJ-
qNJ-
~NJ-
!OJ-
0OJ-
EOJ-
ROJ-
hOJ-
qOJ-
{OJ-
$PJ-
4PJ-
;PJ-
NPJ-
TPJ-
ZPJ-
_PJ-
jPJ-
jPJ-
pPJ-
pPJ-
vPJ-
|PJ-
"QJ-
"QJ-
6QJ-
6QJ-
KQJ-
KQJ-
cQJ-
cQJ-
wQJ-
wQJ-
-RJ-
-RJ-
ERJ-
ERJ-
^RJ-
^RJ-
{RJ-
{RJ-
 SJ-
 SJ-
;SJ-
;SJ-
WSJ-
WSJ-
rSJ-
rSJ-
)TJ-
)TJ-
?TJ-
?TJ-
TTJ-
TTJ-
fTJ-
fTJ-
	UJ-
	UJ-
$UJ-
$UJ-
+UJ-
+UJ-
2UJ-
2UJ-
GUJ-
GUJ-
\UJ-
\UJ-
qUJ-
qUJ-
6VJ-
6VJ-
BVJ-
BVJ-
NVJ-
NVJ-
]VJ-
kVJ-
zVJ-
zVJ-
"WJ-
/WJ-
9WJ-
DWJ-
DWJ-
XWJ-
XWJ-
oWJ-
oWJ-
$XJ-
$XJ-
:XJ-
:XJ-
NXJ-
NXJ-
dXJ-
dXJ-
zXJ-
zXJ-
"YJ-
"YJ-
=YJ-
=YJ-
RYJ-
RYJ-
eYJ-
eYJ-
rYJ-
rYJ-
"ZJ-
"ZJ-
8ZJ-
8ZJ-
MZJ-
MZJ-
aZJ-
aZJ-
uZJ-
uZJ-
;[J-
;[J-
N[J-
N[J-
a[J-
a[J-
u[J-
u[J-
1\J-
1\J-
<\J-
<\J-
K\J-
K\J-
^\J-
n\J-
$]J-
8]J-
G]J-
\]J-
k]J-
#^J-
#^J-
(^J-
4^J-
@^J-
I^J-
R^J-
U^J-
3?J-
3?J-
e^J-
~^J-
3_J-
E_J-
Y_J-
3?J-
3?J-
d_J-
o_J-
z_J-
z_J-
&`J-
2`J-
>`J-
J`J-
V`J-
b`J-
n`J-
z`J-
"aJ-
.aJ-
BaJ-
XaJ-
laJ-
.bJ-
.bJ-
:bJ-
:bJ-
JbJ-
JbJ-
dbJ-
dbJ-
pbJ-
pbJ-
|bJ-
|bJ-
#cJ-
*cJ-
*cJ-
?cJ-
McJ-
McJ-
\cJ-
\cJ-
gcJ-
gcJ-
mcJ-
mcJ-
|oI-
|oI-
wcJ-
wcJ-
#dJ-
#dJ-
8dJ-
8dJ-
AdJ-
AdJ-
JdJ-
JdJ-
TdJ-
TdJ-
`dJ-
`dJ-
qdJ-
qdJ-
#eJ-
#eJ-
.eJ-
.eJ-
AeJ-
AeJ-
WeJ-
WeJ-
meJ-
meJ-
0fJ-
0fJ-
:fJ-
AfJ-
KfJ-
YfJ-
dfJ-
wfJ-
wfJ-
*gJ-
*gJ-
?gJ-
?gJ-
WgJ-
WgJ-
ogJ-
ogJ-
1hJ-
1hJ-
EhJ-
EhJ-
ZhJ-
ZhJ-
nhJ-
nhJ-
~hJ-
~hJ-
$iJ-
$iJ-
9iJ-
9iJ-
NiJ-
NiJ-
aiJ-
aiJ-
siJ-
siJ-
,jJ-
,jJ-
;jJ-
;jJ-
QjJ-
QjJ-
ejJ-
ejJ-
vjJ-
vjJ-
&kJ-
&kJ-
6kJ-
6kJ-
GkJ-
GkJ-
WkJ-
WkJ-
jkJ-
jkJ-
~kJ-
~kJ-
0lJ-
0lJ-
DlJ-
DlJ-
UlJ-
UlJ-
glJ-
glJ-
xlJ-
xlJ-
 mJ-
 mJ-
.mJ-
.mJ-
<mJ-
FmJ-
^mJ-
^mJ-
nmJ-
nmJ-
0nJ-
0nJ-
BnJ-
BnJ-
]nJ-
]nJ-
jnJ-
znJ-
&oJ-
&oJ-
8oJ-
8oJ-
KoJ-
_oJ-
soJ-
/pJ-
/pJ-
IpJ-
IpJ-
WpJ-
WpJ-
fpJ-
fpJ-
{pJ-
{pJ-
4qJ-
:qJ-
GqJ-
TqJ-
aqJ-
nqJ-
{qJ-
$rJ-
2rJ-
9rJ-
GrJ-
GrJ-
RrJ-
RrJ-
YrJ-
grJ-
-sJ-
8sJ-
PsJ-
[sJ-
ssJ-
~sJ-
TsJ-
wsJ-
 tJ-
 tJ-
+tJ-
+tJ-
6tJ-
6tJ-
AtJ-
AtJ-
LtJ-
LtJ-
WtJ-
WtJ-
btJ-
btJ-
mtJ-
mtJ-
xtJ-
xtJ-
!uJ-
!uJ-
+uJ-
+uJ-
5uJ-
5uJ-
?uJ-
?uJ-
IuJ-
IuJ-
SuJ-
SuJ-
]uJ-
]uJ-
guJ-
guJ-
quJ-
quJ-
{uJ-
{uJ-
(vJ-
(vJ-
?vJ-
?vJ-
VvJ-
VvJ-
mvJ-
mvJ-
-wJ-
<wJ-
SwJ-
dwJ-
~wJ-
0xJ-
AxJ-
RxJ-
cxJ-
txJ-
$yJ-
6yJ-
HyJ-
ZyJ-
lyJ-
~yJ-
*zJ-
<zJ-
VzJ-
[zJ-
`zJ-
izJ-
rzJ-
{zJ-
6{J-
6{J-
N{J-
N{J-
]{J-
]{J-
l{J-
l{J-
{{J-
{{J-
(|J-
(|J-
7|J-
7|J-
G|J-
G|J-
W|J-
W|J-
a|J-
a|J-
k|J-
k|J-
u|J-
.}J-
C}J-
U}J-
h}J-
h}J-
 ~J-
)~J-
A~J-
L~J-
f~J-
`!K-
  K-
@ac-
@bc-
@}J-
8%K-
x%K-
@&K-
x&K-
@	;-
@	;-
@	;-
P ;-
P ;-
P ;-
P ;-
P ;-
P ;-
 2;-
02;-
&?K-
1?K-
:?K-
:?K-
`?K-
`?K-
g?K-
h?K-
v?K-
sUK-
|UK-
(@K-
G@K-
AEK-
NEK-
`EK-
wEK-
WTK-
wTK-
.FK-
CFK-
\OK-
SFK-
CTK-
lOK-
iFK-
}EK-
3?J-
HFK-
3FK-
$FK-
|TK-
!GK-
hCJ-
MoK-
ptK-
kzK-
E~K-
Y~K-
v~K-
%}K-
8}K-
C}K-
N}K-
e}K-
z}K-
kwK-
` d-
 !d-
0A>-
@A>-
`A>-
@B>-
pB>-
pC>-
 G>-
`H>-
0I>-
 %d-
 &d-
@'d-
`(d-
 (d-
@)A-
P<A-
 8A-
P+A-
@<A-
P,A-
`,A-
p,A-
@+A-
p-A-
`1A-
`<A-
0CA-
PHA-
@?A-
 DA-
`@A-
 kA-
P_A-
0dA-
@dA-
`fA-
PdA-
@eA-
0kA-
pfA-
0mA-
`qA-
PmA-
`nA-
@}J-
`1d-
UeK-
@2d-
`3d-
}EK-
3?J-
|TK-
3FK-
$FK-
@6d-
 8d-
=PL-
hPL-
`?d-
@@d-
BQL-
`Bd-
{QL-
`Dd-
!RL-
3RL-
pAD-
hRL-
 Gd-
`Hd-
 SL-
`SL-
@Jd-
XVL-
`Kd-
@Ld-
?TL-
YTL-
`Md-
 Od-
LUL-
0AD-
mUL-
`Qd-
@Rd-
	VL-
>VL-
0f7-
0f7-
@a7-
 06-
pG6-
@H6-
pl6-
026-
@>6-
`.6-
 .6-
0.6-
@a7-
0f7-
pl6-
026-
pa7-
@a7-
pG6-
@H6-
pl6-
026-
@>6-
`.6-
 .6-
0.6-
@a7-
pG6-
@H6-
pl6-
026-
@>6-
`.6-
 .6-
0.6-
@a7-
pG6-
@H6-
pl6-
026-
@>6-
`.6-
 .6-
0.6-
@a7-
##K-
.#K-
0ZL-
~	J-
0ZL-
~	J-
w	J-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p#;-
`#;-
 #;-
0#;-
@#;-
 $;-
0$;-
@$;-
`$;-
p$;-
 E;-
 E;-
 E;-
`K;-
`N;-
 E;-
 E;-
 E;-
nVK-
I?K-
S?K-
!`J-
s3K-
7@K-
?@K-
U@K-
AEK-
NEK-
yFK-
%zK-
4zK-
PzK-
\zK-
xzK-
PB=-
0@=-
PD=-
 G=-
{pK-
O~K-
d~K-
n~K-
v~K-
9mJ-
w	J-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
p<;-
nVK-
`TD-
PUD-
pUD-
PWD-
pYD-
pcD-
PhD-
 pD-
0EJ-
$PL-
PPL-
]PL-
yPL-
0EJ-
1QL-
UQL-
jQL-
jQL-
jQL-
ERL-
LRL-
SRL-
[RL-
bRL-
:SL-
ESL-
ISL-
~SL-
~SL-
-TL-
7TL-
0EJ-
rTL-
jQL-
,UL-
?UL-
[UL-
aUL-
_UL-
~SL-
$VL-
4VL-
pMD-
`TD-
PUD-
pUD-
PWD-
pYD-
pcD-
PhD-
 pD-
pO$-
 1=-
@.B-
?\$-
,J*-
y=$-
09:-
`,B-
,8!-
 +B-
POA-
i""-
Yl&-
@dc-
fO!-
:r1-
$I(-
 we-
z,'-
 S=-
p(B-
?>/-
 c2-
@cc-
p*;-
v)0-
P1=-
P.B-
S!/-
'W)-
D9'-
N?0-
KU1-
P)B-
yx#-
O<#-
01=-
0n>-
	t%-
DD_DBG_LOG_ATTR_WRITE_OP
DD_DBG_LOG_ATTR_COMPRESSION_ENABLED
DD_DBG_LOG_ATTR_ASYNC_BUFFER_SIZE
DD_DBG_LOG_ATTR_ASYNC_CHUNK_SIZE
DD_DBG_LOG_ATTR_ASYNC_FLUSH_INTERVAL
DD_DBG_LOG_ATTR_MAX_LOG_FILE_SIZE
DD_DBG_LOG_ATTR_MAX_NUM_LOG_FILES
`J6-
@\6-
pa6-
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
666666666666666666666666666666666666666666666666
@1J-
`1J-
 2J-
H2J-
p2J-
!,K-
03J-
`3J-
(4J-
P4J-
x4J-
05J-
P5J-
p5J-
(6J-
H6J-
h6J-
 7J-
H7J-
p7J-
08J-
P8J-
x8J-
- J-
< J-
V J-
h J-
y J-
(!J-
@!J-
X!J-
j!J-
@9J-
4$J-
H$J-
-"J-
<"J-
J"J-
W"J-
m"J-
.#J-
>#J-
V#J-
h9J-
p#J-
0$J-
D$J-
Z$J-
n$J-
r$J-
$%J-
0%J-
<%J-
I%J-
W%J-
r%J-
|%J-
$&J-
<&J-
N&J-
[&J-
e&J-
s&J-
-'J-
C'J-
`'J-
r'J-
 (J-
3(J-
K(J-
b(J-
l(J-
|(J-
-)J-
K)J-
`)J-
w)J-
8:J-
`:J-
,*J-
A*J-
N*J-
d*J-
 ;J-
@;J-
3+J-
`;J-
G+J-
_+J-
q+J-
0,J-
J,J-
[,J-
o,J-
8<J-
`<J-
7-J-
@-J-
I-J-
a-J-
x-J-
 .J-
0.J-
K.J-
f.J-
t.J-
4/J-
G/J-
_/J-
w/J-
+0J-
I0J-
e0J-
z0J-
 L8-
0L8-
pp8-
`h8-
pl8-
Pn8-
\#K-
 'K-
P):-
P!:-
3'K-
G'K-
@0:-
@0:-
PF:-
pE:-
@G:-
@I:-
`M:-
PN:-
 L:-
PL:-
0U:-
0R:-
 X:-
P^:-
0^:-
]wI-
c	L-
&+K-
.+K-
6+K-
?+K-
H+K-
Q+K-
\+K-
c+K-
k+K-
s+K-
}+K-
1,K-
B,K-
H,K-
W,K-
o,K-
)-K-
C-K-
Z-K-
v-K-
3.K-
C.K-
Q.K-
_.K-
l.K-
,2K-
<2K-
L2K-
]2K-
w2K-
"3K-
;3K-
P3K-
c3K-
w3K-
!4K-
04K-
G4K-
\4K-
o4K-
}4K-
85K-
Q5K-
j5K-
- J-
y5K-
0<K-
!6K-
:6K-
P6K-
_6K-
p6K-
}6K-
.7K-
B7K-
`7K-
t7K-
#8K-
98K-
R8K-
d8K-
z8K-
,9K-
A9K-
R9K-
d9K-
x9K-
+:K-
@:K-
X:K-
u:K-
X<K-
';K-
=;K-
V;K-
g;K-
u;K-
@o;-
0p;-
 ~;-
@o;-
0p;-
 ~;-
eHK-
sHK-
L2K-
 WK-
#IK-
1IK-
@WK-
@IK-
SIK-
mIK-
/JK-
?JK-
XJK-
hJK-
{JK-
hWK-
)KK-
<KK-
UKK-
pKK-
*LK-
;LK-
PLK-
\LK-
rLK-
oNK-
}4K-
&MK-
:MK-
OMK-
gMK-
{MK-
6NK-
FNK-
WNK-
jNK-
0XK-
XXK-
xXK-
 OK-
<OK-
:6K-
MOK-
XOK-
hOK-
|OK-
0PK-
<PK-
HPK-
QPK-
ePK-
{PK-
"QK-
5QK-
FQK-
TQK-
mQK-
~QK-
)RK-
:RK-
HRK-
[RK-
iRK-
yRK-
'SK-
ESK-
_SK-
rSK-
"TK-
2TK-
?TK-
STK-
dTK-
sTK-
%UK-
8UK-
GUK-
UUK-
aUK-
oUK-
xUK-
	VK-
!VK-
1VK-
?VK-
QVK-
_VK-
tVK-
k[K-
}[K-
.\K-
B\K-
]\K-
o\K-
|\K-
	]K-
 ]K-
;]K-
C]K-
O]K-
W]K-
h]K-
y]K-
&^K-
8^K-
G^K-
Z^K-
k^K-
y^K-
 _K-
*_K-
8_K-
M_K-
`_K-
w_K-
$aK-
8aK-
IaK-
G4K-
ZaK-
waK-
MOK-
!bK-
*bK-
>bK-
WbK-
pbK-
0cK-
BcK-
_cK-
|cK-
&dK-
AdK-
SdK-
cdK-
tdK-
&eK-
:eK-
MeK-
^eK-
meK-
|eK-
`9d-
0:d-
h;d-
 7d-
`8d-
4pK-
BpK-
XpK-
jpK-
,qK-
>qK-
ZqK-
pqK-
/rK-
?rK-
YrK-
hrK-
rLK-
&sK-
8sK-
MsK-
[sK-
nsK-
@yK-
hyK-
"tK-
4tK-
y5K-
KtK-
<OK-
^tK-
ltK-
}tK-
.uK-
AuK-
RuK-
luK-
{uK-
$vK-
2vK-
CvK-
XvK-
kvK-
|vK-
+wK-
?wK-
GwK-
XwK-
gwK-
|wK-
!xK-
0xK-
AxK-
TxK-
fxK-
|xK-
%}K-
8}K-
C}K-
N}K-
e}K-
z}K-
 ~=-
P|=-
@}=-
%KK-
%VK-
 WK-
*LK-
;LK-
}4K-
&MK-
xHK-
MsK-
}4K-
MsK-
j5K-
<OK-
l}C.we
SK?Nv
'nU_O_M
uT_Rm#
'`ax
#ETHw
dlCz 
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
`H?f
F/p^
+QQ 3K%
0A/8
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
`H?f
F/p^
+QQ 3K%
0A/8
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
PHe-
0He-
pGe-
PGe-
0Ge-
`9e-
@=e-
@?e-
@Be-
`Be-
`Fe-
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz./
H,K-
L2K-
\4K-
,2K-
\4K-
@RA-
 XA-
\4K-
,2K-
`,K-
2	L-
I	L-
T	L-
_	L-
j	L-
}	L-
3?J-
@ye-
                    
|PJ-
pOL-
 &D-
p	g-
@'g-
p.g-
@	h-
@ h-
@#h-
 &h-
`&h-
 ,h-
`,h-
bQf-
 )U 
piS(
@xS(
piS(
@xS(
p53.
 >3.
@>3.
`>3.
 ?3.
@?3.
`?3.
 @3.
@@3.
`@3.
 A3.
@A3.
`A3.
 B3.
@B3.
`B3.
0N3.
 N3.
0N3.
piS(
@xS(
0N3.
0N3.
0N3.
PN3.
piS(
@xS(
PN3.
PN3.
PN3.
 V3.
@V3.
`V3.
 W3.
@W3.
`W3.
 X3.
@X3.
`X3.
 Y3.
@Y3.
`Y3.
 Z3.
@Z3.
`Z3.
 [3.
@[3.
`[3.
 \3.
@\3.
`\3.
 ]3.
@]3.
`]3.
 ^3.
@^3.
`^3.
 _3.
@_3.
`_3.
 `3.
@`3.
``3.
PN3.
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
PN3.
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
PN3.
piS(
@xS(
piS(
@xS(
PN3.
piS(
@xS(
piS(
@xS(
PN3.
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
PN3.
`(b,
piS(
@xS(
`OT(
`OT(
piS(
@xS(
 D4.
 D4.
0D4.
PD4.
pD4.
0E4.
PE4.
pE4.
0F4.
PF4.
pF4.
0G4.
PG4.
pG4.
`O4.
PN3.
`(b,
@Q4.
 S4.
@T4.
 S4.
@T4.
 U4.
@Q4.
piS(
@xS(
@Q4.
@Q4.
@Q4.
@Q4.
`OT(
 R4.
`OT(
 R4.
 R4.
 R4.
@R4.
piS(
@xS(
@R4.
@R4.
@R4.
@R4.
`R4.
pR4.
 S4.
@S4.
@S4.
@T4.
`T4.
`T4.
 U4.
0U4.
PU4.
pU4.
 l4.
 l4.
0l4.
Pl4.
pl4.
0m4.
Pm4.
pm4.
PN3.
@q4.
piS(
@xS(
 q4.
piS(
@xS(
 q4.
 q4.
 q4.
@q4.
`q4.
p}4.
p}4.
 ~4.
@~4.
`~4.
`(b,
piS(
@xS(
p0I(
piS(
@xS(
p0I(
piS(
@xS(
piS(
@xS(
piS(
@xS(
piS(
@xS(
 ;5.
@;5.
`;5.
 ?5.
@?5.
P?5.
`?5.
 C5.
@D5.
`E5.
`F5.
 G5.
 H5.
@I5.
@J5.
0J5.
@J5.
PJ5.
 L5.
`L5.
 M5.
`M5.
 N5.
0P5.
piS(
@xS(
0P5.
0P5.
0P5.
PP5.
0T5.
PT5.
pT5.
 W5.
@W5.
`W5.
p\5.
0]5.
P]5.
P_5.
p_5.
0d5.
pd5.
 53.
`q3.
@+4.
 H3.
`B4.
`D5.
0_5.
`N4.
@G5.
`v3.
 s3.
 B4.
@w3.
`b5.
@`5.
`I5.
`25.
@*4.
`H4.
 K5.
`D3.
 e3.
@H5.
`c3.
@83.
 j3.
@A5.
`05.
@N5.
`[5.
 k3.
@C5.
 g3.
 L3.
@,4.
@<5.
`15.
`a3.
@P4.
 *4.
 84.
 A4.
`s3.
 34.
 N4.
@M5.
 O4.
`H~ 
 75.
`p3.
`35.
 =4.
`55.
Pd5.
`94.
`@4.
 )4.
`n3.
@d4.
`I4.
 M4.
 95.
`o3.
@p4.
 r3.
`d3.
 j4.
 @4.
`M3.
`k3.
 c3.
 i3.
 E3.
`C4.
 (4.
 b3.
`E3.
`G3.
`I3.
`r3.
@-4.
`-5.
 m3.
@63.
`l3.
 C3.
 L4.
 a3.
`/5.
`/4.
 +5.
@o4.
 p3.
 C4.
`!5.
@=5.
 d3.
`L3.
 u3.
`h3.
 M3.
 c4.
 G3.
 J3.
`J3.
 -4.
`.5.
 (5.
`f3.
`g3.
`M4.
`j3.
0T5.
 n3.
@>5.
`65.
 K4.
 S5.
`b3.
@L5.
 .4.
`H3.
`45.
@\5.
@f5.
 H4.
 +4.
`u3.
@}4.
@(4.
`e3.
 &5.
@\4.
 #5.
@24.
 ,4.
 %5.
`h4.
`k4.
 k4.
 $5.
@f4.
`?4.
`44.
@O5.
 h3.
 g4.
@n4.
`*5.
`,5.
 J4.
`"5.
@[4.
pN3.
 :5.
@r4.
 t3.
`J4.
`S5.
 F5.
@)4.
 D3.
 )5.
@<4.
 d4.
@^5.
 '5.
 o3.
`:5.
`m3.
@74.
`K4.
 F3.
 l3.
`i3.
`I~ 
@|4.
 b5.
 v3.
`R5.
@V5.
 K3.
 85.
 I3.
 f3.
`F3.
 E5.
`j4.
`A4.
@c4.
`t3.
P.Z 
@Z5.
`L4.
 q3.
`K3.
 I4.
` 5.
@@5.
 LZ 
 )U 
0YZ 
0a3.
0H4.
P<5.
0S5.
pEY.
0FY.
XFY.
8GY.
`GY.
8HY.
hHY.
 IY.
HIY.
pIY.
0JY.
XJY.
 KY.
PKY.
8LY.
XLY.
 MY.
PMY.
xMY.
HNY.
pNY.
(OY.
HOY.
8PY.
hPY.
 QY.
@QY.
hQY.
HRY.
 SY.
`SY.
HTY.
8UY.
0VY.
`VY.
PWY.
HXY.
hXY.
(YY.
PYY.
xYY.
 ZY.
HZY.
 [Y.
P[Y.
@\Y.
p\Y.
 ]Y.
@]Y.
`]Y.
8^Y.
0_Y.
p_Y.
 `Y.
P`Y.
p`Y.
 aY.
XaY.
 bY.
`bY.
0cY.
XcY.
8dY.
`dY.
 eY.
peY.
(fY.
PfY.
0gY.
PgY.
pgY.
 hY.
PhY.
`iY.
`jY.
hkY.
0lY.
`lY.
(mY.
hmY.
8nY.
hnY.
(oY.
hoY.
HpY.
PqY.
8rY.
XrY.
xrY.
 sY.
HsY.
psY.
0tY.
`tY.
0uY.
`uY.
0vY.
pvY.
0wY.
XwY.
xwY.
 xY.
@xY.
hxY.
 yY.
HyY.
pyY.
pEY.
0FY.
XFY.
8GY.
`GY.
8HY.
hHY.
 IY.
HIY.
pIY.
0JY.
XJY.
 KY.
PKY.
8LY.
XLY.
 MY.
PMY.
xMY.
HNY.
pNY.
(OY.
HOY.
8PY.
hPY.
 QY.
@QY.
hQY.
HRY.
 SY.
`SY.
HTY.
8UY.
0VY.
`VY.
PWY.
HXY.
hXY.
(YY.
PYY.
xYY.
 ZY.
HZY.
 [Y.
P[Y.
@\Y.
p\Y.
 ]Y.
@]Y.
`]Y.
8^Y.
0_Y.
p_Y.
 `Y.
P`Y.
p`Y.
 aY.
XaY.
 bY.
`bY.
0cY.
XcY.
8dY.
`dY.
 eY.
peY.
(fY.
PfY.
0gY.
PgY.
pgY.
 hY.
PhY.
`iY.
`jY.
hkY.
0lY.
`lY.
(mY.
hmY.
8nY.
hnY.
(oY.
hoY.
HpY.
PqY.
8rY.
XrY.
xrY.
 sY.
HsY.
psY.
0tY.
`tY.
0uY.
`uY.
0vY.
pvY.
0wY.
XwY.
xwY.
 xY.
@xY.
hxY.
 yY.
HyY.
pyY.
@w>.
Pw>.
`w>.
pw>.
!dZ.
)dZ.
0dZ.
8dZ.
AdZ.
IdZ.
VdZ.
_dZ.
gdZ.
pdZ.
}dZ.
#eZ.
+eZ.
6eZ.
=eZ.
IeZ.
SeZ.
]eZ.
eeZ.
qeZ.
zeZ.
)fZ.
0fZ.
<fZ.
KfZ.
XfZ.
dfZ.
nfZ.
vfZ.
~fZ.
PEF.
@@F.
@@F.
@@F.
By\.
iw\.
\w\.
XeZ.
wt\.
>X\.
G]\.
$j\.
-j\.
9j\.
Gj\.
Rj\.
Xj\.
ej\.
sj\.
{j\.
"l\.
'l\.
^l\.
Dl\.
\w\.
Hl\.
Ll\.
Ll\.
Zl\.
bl\.
wl\.
:5Z.
1m\.
Bm\.
Em\.
\m\.
\m\.
bm\.
bm\.
mm\.
mm\.
~m\.
~m\.
Ty\.
	n\.
!n\.
*n\.
3n\.
<n\.
En\.
Nn\.
Wn\.
`n\.
hn\.
pn\.
xn\.
$o\.
$o\.
0o\.
0o\.
>o\.
>o\.
Jo\.
Jo\.
[o\.
[o\.
mo\.
mo\.
 p\.
,p\.
8p\.
Ep\.
wt\.
Rp\.
hp\.
pp\.
{p\.
:#\.
4q\.
Fq\.
aq\.
nq\.
"r\.
+r\.
+r\.
1r\.
Or\.
Xr\.
ir\.
)s\.
0s\.
7s\.
>s\.
Es\.
Ls\.
Ss\.
Zs\.
js\.
as\.
fs\.
os\.
Bw\.
{s\.
)t\.
3t\.
=t\.
Gt\.
Qt\.
Qt\.
1#\.
gt\.
st\.
|t\.
&#\.
#u\.
(u\.
9u\.
Ju\.
du\.
du\.
iu\.
iu\.
ou\.
zu\.
	v\.
'v\.
Dv\.
Jv\.
hv\.
nv\.
tv\.
!w\.
9w\.
Iw\.
`w\.
nw\.
|w\.
%x\.
%x\.
0x\.
0x\.
@x\.
@x\.
Px\.
Px\.
Xx\.
Xx\.
^x\.
^x\.
ex\.
ex\.
rx\.
|x\.
$y\.
9y\.
Fy\.
\y\.
ey\.
oy\.
(z\.
/z\.
Bz\.
Hz\.
Nz\.
Sz\.
^z\.
^z\.
dz\.
dz\.
jz\.
pz\.
wz\.
wz\.
*{\.
*{\.
?{\.
?{\.
W{\.
W{\.
k{\.
k{\.
!|\.
!|\.
9|\.
9|\.
R|\.
R|\.
o|\.
o|\.
/}\.
/}\.
K}\.
K}\.
f}\.
f}\.
3~\.
3~\.
H~\.
H~\.
Z~\.
Z~\.
s~\.
s~\.
/M[.
/M[.
>X\.
G]\.
< \.
@#v.
@$v.
0&M.
0=M.
 =M.
`%M.
p%M.
0%M.
0/M.
0&M.
0=M.
 =M.
`%M.
p%M.
0%M.
`.N.
`.N.
`.N.
0%N.
0%N.
0%N.
0%N.
05N.
p3N.
05N.
05N.
05N.
P5N.
P:N.
P5N.
P:N.
P:N.
`7N.
P:N.
@6N.
P:N.
P5N.
P:N.
@Qv.
peO.
\m\.
@`v.
 gv.
 hv.
0 `.
Y `.
Z9`.
p'R.
P(R.
p)R.
0*R.
p*R.
weZ.
@JU.
 WU.
0NU.
`PU.
0WU.
 RU.
 SU.
pSU.
@WU.
pbU.
PlU.
0mU.
PeU.
pfU.
 	V.
 }v.
06V.
`-V.
P2V.
06V.
`-V.
P2V.
 	w.
@ w.
 !w.
`"w.
 $w.
@&w.
 'w.
 (w.
`*w.
@,w.
0#F.
`&F.
`&F.
@*F.
`&F.
@,F.
p*F.
@(H.
 (H.
@%H.
P#H.
`#H.
 #H.
0#H.
`yw.
@(H.
 (H.
@%H.
P#H.
`#H.
 #H.
0#H.
`yw.
@(H.
 (H.
@%H.
P#H.
`#H.
 #H.
0#H.
`yw.
@(H.
 (H.
PxJ.
`xJ.
`yw.
@(H.
 (H.
PxJ.
`xJ.
@(H.
 (H.
PxJ.
`xJ.
@(H.
 (H.
PxJ.
`xJ.
P'H.
`yw.
@(H.
 (H.
PxJ.
`xJ.
P'H.
@(H.
 (H.
PxJ.
`xJ.
P'H.
@(H.
 (H.
PxJ.
`xJ.
`yw.
@(H.
 (H.
PxJ.
`xJ.
@(H.
 (H.
PxJ.
`xJ.
pyJ.
PxJ.
`xJ.
@xJ.
pyJ.
PxJ.
`xJ.
@xJ.
pyJ.
PxJ.
`xJ.
@xJ.
@KK.
p\K.
p,K.
P-K.
@ K.
PxJ.
@KK.
p\K.
p,K.
P-K.
@ K.
PxJ.
@KK.
p\K.
p,K.
P-K.
@ K.
PxJ.
@KK.
p\K.
p,K.
P-K.
@ K.
PxJ.
@KK.
p\K.
p,K.
P-K.
@ K.
PxJ.
@KK.
p\K.
p,K.
P-K.
@ K.
PxJ.
@KK.
p\K.
p,K.
P-K.
@ K.
PxJ.
@KK.
p\K.
p,K.
P-K.
@ K.
PxJ.
@KK.
p\K.
p,K.
P-K.
@ K.
PxJ.
`O].
@N].
@L].
 J].
@I].
`H].
@E].
 B].
@A].
`@].
`?].
`>].
 =].
P	].
@;].
x	].
 7].
 6].
 5].
`2].
@-].
 +].
`*].
 '].
@&].
@%].
@$].
` ].
`O].
@Ov.
@Ov.
@Ov.
@Ov.
@Ov.
O~Y.
@Ov.
@Ov.
@Ov.
@Ov.
@Ov.
@Ov.
@Ov.
O~Y.
@Ov.
@Ov.
@Ov.
O~Y.
@Ov.
@Ov.
@Ov.
O~Y.
@Ov.
@Ov.
@Ov.
@Ov.
@Ov.
`LN.
 KN.
`LN.
 KN.
`LN.
 KN.
`LN.
 KN.
`LN.
 KN.
`LN.
 KN.
`LN.
 KN.
`LN.
 KN.
`LN.
 KN.
`LN.
 KN.
@;N.
P;N.
`;N.
0<N.
@<N.
P<N.
 <N.
@<N.
P<N.
X/\.
@Xv.
@Tv.
p$\.
@Xv.
p$\.
;#`.
@Xv.
@Xv.
@Yv.
@Wv.
@Yv.
b-\.
@\v.
@]v.
@^v.
@_v.
@Xv.
@Xv.
@\v.
@\v.
@\v.
`iv.
@\v.
@cv.
@\v.
@dv.
~4`.
 iv.
`hv.
`gv.
`fv.
 fv.
 jv.
p$\.
@Xv.
 kv.
`jv.
@Yv.
@Yv.
 lv.
@\v.
`lv.
@Yv.
@Yv.
< `.
K `.
p$\.
@Xv.
@Xv.
 qv.
`qv.
@Xv.
 rv.
`rv.
0)U.
`)U.
 .U.
@.U.
 /U.
P/U.
00U.
01U.
@2U.
@7U.
P7U.
@<U.
`FU.
O~Y.
@Ov.
@Ov.
@Ov.
@Ov.
@Xv.
@Ov.
O~Y.
@Ov.
@Ov.
p$\.
@Xv.
p$\.
@Xv.
@Yv.
@Yv.
p$\.
@Xv.
75\.
 yW.
pyW.
@Xv.
@{W.
@Xv.
@{W.
@Zv.
@Nv.
@Nv.
i3\.
$o\.
$o\.
i3\.
@Xv.
$o\.
p$\.
hFw.
`hv.
`Nw.
@Uv.
`F`.
 lv.
@Tv.
`iv.
`MG.
`jv.
0$G.
`gv.
 |x.
@\v.
`ev.
0BG.
@_v.
00G.
`rP.
 rv.
@Zv.
 |v.
@Vv.
`tw.
 nG.
@FO.
p7G.
pLG.
 uw.
@!v.
PrG.
@^v.
PbG.
 bT.
@Mv.
`]G.
PNw.
@jZ.
@#G.
@Nv.
`1G.
 	G.
08G.
@Xv.
@UO.
$|x.
@TG.
pwG.
@{G.
4qw.
 fv.
 ZG.
0qw.
`:G.
@mx.
 oG.
`kv.
@kG.
@=G.
`lv.
@Yv.
 ^G.
0(G.
@]v.
`fv.
(|x.
`5G.
 jG.
 aG.
0sG.
@JG.
@"v.
@!U.
Pju.
 qv.
`|G.
@Wv.
@mC.
 kv.
 LG.
p#G.
`;?.
 jv.
0fG.
@cv.
p-G.
@Pv.
@qw.
 &G.
`|v.
pNG.
@dv.
@Rv.
`CG.
pqG.
pbG.
prP.
PeG.
&);.
6);.
F);.
V);.
f);.
v);.
&*;.
6*;.
F*;.
V*;.
f*;.
v*;.
&+;.
6+;.
F+;.
V+;.
f+;.
v+;.
&,;.
6,;.
F,;.
V,;.
f,;.
v,;.
&-;.
6-;.
F-;.
V-;.
f-;.
v-;.
&.;.
6.;.
F.;.
V.;.
f.;.
v.;.
&/;.
6/;.
F/;.
V/;.
f/;.
v/;.
&0;.
60;.
F0;.
V0;.
f0;.
v0;.
&1;.
61;.
F1;.
V1;.
f1;.
v1;.
&2;.
62;.
F2;.
V2;.
f2;.
v2;.
&3;.
63;.
F3;.
V3;.
f3;.
v3;.
&4;.
64;.
F4;.
V4;.
f4;.
v4;.
&5;.
65;.
F5;.
V5;.
f5;.
v5;.
&6;.
66;.
F6;.
V6;.
f6;.
v6;.
&7;.
67;.
F7;.
V7;.
f7;.
v7;.
&8;.
68;.
F8;.
3.3.0.0-536404
/ddboost_precert.ini
/DDLog/ddboost_precert.ini
@|x.
#5Z.
-5Z.
35Z.
<5Z.
B5Z.
J5Z.
0p@.
 p@.
`g@.
0c@.
Q#\.
g#\.
x#\.
"$\.
7$\.
G$\.
V$\.
h$\.
z$\.
 4\.
+%\.
H%\.
^%\.
n%\.
~%\.
.&\.
A&\.
R&\.
l&\.
v&\.
,1\.
&'\.
='\.
V'\.
q'\.
8I\.
,(\.
<(\.
Z(\.
`I\.
o(\.
0)\.
M)\.
k)\.
@J\.
**\.
C*\.
\*\.
l*\.
/+\.
hJ\.
4+\.
I+\.
Z+\.
q+\.
2,\.
K,\.
],\.
x,\.
)-\.
>-\.
R-\.
g-\.
~-\.
	.\.
".\.
7.\.
I.\.
^.\.
m.\.
}.\.
'/\.
(K\.
4/\.
E/\.
c/\.
t/\.
XK\.
xK\.
)0\.
C0\.
 L\.
X0\.
l0\.
HL\.
'1\.
81\.
M1\.
d1\.
{1\.
pL\.
42\.
O2\.
b2\.
y2\.
8M\.
`M\.
63\.
R3\.
(N\.
m3\.
PN\.
pN\.
+4\.
G4\.
a4\.
z4\.
 O\.
HO\.
#5\.
:5\.
pO\.
U5\.
m5\.
(P\.
PP\.
pP\.
0Q\.
XQ\.
.6\.
A6\.
S6\.
a6\.
t6\.
07\.
D7\.
R7\.
e7\.
}7\.
48\.
@8\.
S8\.
l8\.
*;\.
	9\.
(9\.
69\.
C9\.
Y9\.
m9\.
 :\.
8:\.
 R\.
R:\.
g:\.
x:\.
HR\.
hR\.
&;\.
<;\.
P;\.
i;\.
{;\.
m;\.
&<\.
2<\.
><\.
K<\.
Y<\.
t<\.
~<\.
&=\.
>=\.
R=\.
d=\.
q=\.
{=\.
.>\.
C>\.
_>\.
u>\.
'?\.
<?\.
R?\.
e?\.
}?\.
+@\.
H@\.
_@\.
}@\.
@S\.
hS\.
'A\.
BA\.
QA\.
fA\.
#B\.
-B\.
:B\.
QB\.
ZB\.
tB\.
8T\.
!C\.
>C\.
UC\.
qC\.
`T\.
	D\.
2D\.
LD\.
eD\.
~D\.
@U\.
`U\.
 E\.
7E\.
SE\.
oE\.
'F\.
7F\.
RF\.
mF\.
{F\.
	G\.
"G\.
;G\.
NG\.
fG\.
~G\.
'H\.
@H\.
^H\.
gH\.
wV\.
|V\.
W[\.
m[\.
'[\.
$W\.
7W\.
FW\.
&]\.
7X\.
RW\.
gW\.
}W\.
/X\.
EX\.
WX\.
iX\.
~X\.
/Y\.
;Y\.
PY\.
cY\.
vY\.
* \.
6^\.
R^\.
m^\.
+Z\.
AZ\.
WZ\.
kZ\.
~Z\.
2[\.
D[\.
U[\.
k[\.
)\\.
:\\.
K\\.
`\\.
y\\.
4]\.
N]\.
g]\.
4^\.
P^\.
k^\.
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
666666666666666666666666666666666666666666666666(	`.
 [M.
P[M.
pbM.
 dM.
0aM.
`aM.
PiM.
`jM.
PhM.
pnM.
PmM.
 pM.
 lM.
ej\.
<9\.
R7\.
@vv.
@~v.
@{v.
`}v.
puv.
`%v.
 wv.
`zv.
 mv.
R7\.
R7\.
p-P.
`.P.
0/P.
07P.
`/P.
0!`.
B!`.
\!`.
y!`.
1"`.
D"`.
S"`.
h"`.
w"`.
0#`.
D#`.
X#`.
g#`.
y#`.
8$`.
X$`.
h$`.
x$`.
(%`.
;%`.
P%`.
d%`.
y%`.
	&`.
,&`.
>&`.
 /`.
H/`.
T&`.
q&`.
h/`.
*'`.
D'`.
T'`.
i'`.
q'`.
N0\.
1(`.
F(`.
V(`.
f(`.
w(`.
/)`.
J)`.
h)`.
u)`.
j)`.
(*`.
=*`.
J*`.
d*`.
:+`.
W+`.
q+`.
(,`.
C,`.
[,`.
m,`.
w,`.
,-`.
?-`.
Y-`.
00`.
P0`.
p0`.
(1`.
H1`.
h1`.
s-`.
(.`.
=.`.
Y.`.
m.`.
83`.
Q3`.
`3`.
s3`.
"4`.
04`.
B4`.
P4`.
e4`.
q4`.
55`.
J5`.
a5`.
x5`.
/6`.
G6`.
^6`.
o6`.
$7`.
:7`.
U7`.
q7`.
!8`.
=8`.
S8`.
m8`.
l}C.we
SK?Nv
'nU_O_M
uT_Rm#
'`ax
#ETHw
dlCz 
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
`H?f
F/p^
+QQ 3K%
0A/8
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
`H?f
F/p^
+QQ 3K%
0A/8
Hp!v
kNGY|(
	wl]azW
6.F^
Qf(I
~^bv
Qmm5
#9`.
p;x.
P;x.
(9`.
0;x.
-9`.
0;x.
29`.
0;x.
79`.
<9`.
p:x.
A9`.
P:x.
`0x.
`2x.
`5x.
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz./
u9`.
$:`.
5:`.
E:`.
T:`.
_:`.
g:`.
z:`.
@r`.
Mr`.
\r`.
lr`.
{r`.
-s`.
As`.
^s`.
es`.
|s`.
)t`.
0t`.
;t`.
Nt`.
Zt`.
jt`.
zt`.
'u`.
7u`.
Iu`.
Xu`.
qu`.
7y`.
Gy`.
Zy`.
uy`.
	z`.
$z`.
8z`.
Rz`.
fz`.
~z`.
#{`.
>{`.
P{`.
f{`.
x{`.
!|`.
4|`.
E|`.
U|`.
f|`.
#}`.
8}`.
P}`.
h}`.
,~`.
@~`.
V~`.
o~`.
07T.
l8\.
~z`.
f{`.
W|`.
h|`.
 @V.
S6\.
p|V.
`|V.
0|V.
P|V.
>/\.
`ox.
                    
`px.
pz\.
 g~ 
@g~ 
 )U 
10.8.4.106
/home/kos/kashya/archive/cst/libCSP-XML.so
/home/kos/kashya/archive/cst/libosysrtxml.so
/home/kos/kashya/archive/cst/libCSP-lb.so
/lib/x86_64-linux-gnu/libncurses.so.5
/lib/x86_64-linux-gnu/libtinfo.so.5
/lib/x86_64-linux-gnu/libaudit.so.1
/usr/lib/x86_64-linux-gnu/libssl.so.1.0.0
/usr/kashya/lib/libasan.so.1
/usr/lib/x86_64-linux-gnu/libkrb5support.so.0
/lib/x86_64-linux-gnu/libkeyutils.so.1
/usr/lib/x86_64-linux-gnu/libkrb5.so.3
/usr/lib/x86_64-linux-gnu/libk5crypto.so.3
/usr/lib/libstorcore64.so
/usr/lib/libstorpds64.so
/lib/x86_64-linux-gnu/libz.so.1
/lib/x86_64-linux-gnu/libutil.so.1
/home/kos/kashya/archive/cst/libCSP.so
/home/kos/kashya/archive/cst/libCSP-RT.so
/home/kos/boost/libboost_chrono.so.1.61.0
/home/kos/kashya/archive/clp/libelmtracesd3_4_0.so
/home/kos/kashya/archive/clp/libelmtvcsd3_4_0.so
/lib/x86_64-linux-gnu/libpam.so.0
/lib/x86_64-linux-gnu/libcrypt.so.1
/usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0
/home/kos/kashya/archive/clp/libelmcsd3_4_0.so
/lib/x86_64-linux-gnu/libaio.so.1
/home/kos/boost/libboost_thread.so.1.61.0
/home/kos/boost/libboost_timer.so.1.61.0
/usr/lib/libOpenIPMI.so.0
/usr/lib/libOpenIPMIposix.so.0
/usr/lib/libOpenIPMIutils.so.0
/home/kos/kashya/archive/cst/libCSP-C.so
/home/kos/kashya/archive/cst/libCSPJNIWrappers.so
/home/kos/kashya/archive/cst/libCST-Admin.so
/home/kos/kashya/archive/lib/libmpi_tls_fips-release.so
/home/kos/kashya/archive/lib/libmpi_tls_sw-release.so
/home/kos/kashya/archive/lib/libngs-release.so
/usr/kashya/lib/libcurl.so.4
/home/kos/kashya/archive/lib/libcrypto_services-release.so
/usr/kashya/lib/libxmlrpc_util.so.3
/usr/kashya/lib/libxmlrpc_xmlparse.so.3
/usr/kashya/lib/libxmlrpc_xmltok.so.3
@(#) [libsymapi] T8.4-2350 (Rev 0.350) Copyright (c) [1997-2017] EMC Corporation. All Rights Reserved.$
/usr/lib/libsymapi64.so
/usr/kashya/lib/libxmlrpc.so.3
/usr/kashya/lib/libxmlrpc_client.so.3
/lib/x86_64-linux-gnu/libresolv.so.2
/lib/x86_64-linux-gnu/libcom_err.so.2
/usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2
/home/kos/boost/libboost_system.so.1.61.0
/lib/x86_64-linux-gnu/libdl.so.2
/lib/x86_64-linux-gnu/librt.so.1
/lib/x86_64-linux-gnu/libpthread.so.0
/lib/x86_64-linux-gnu/libc.so.6
/usr/kashya/lib/libewoc.so
/usr/kashya/lib/libstdc++.so.6
8o~ 
/lib/x86_64-linux-gnu/libm.so.6
/lib/x86_64-linux-gnu/libgcc_s.so.1
/home/kos/kashya/archive/lib/libtransmitter-release.so
/home/kos/kashya/archive/lib/libtransmitter_versions-release.so
/home/kos/kashya/archive/lib/libxparam-release.so
/home/kos/kashya/archive/lib/libreceiver_versions-release.so
/home/kos/kashya/archive/lib/libreplication_libs-release.so
/home/kos/kashya/archive/lib/libsymm_splitter-release.so
/home/kos/kashya/archive/lib/libmpi_kashya_global-release.so
/usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0
/home/kos/kashya/archive/lib/libreceiver-release.so
/usr/kashya/lib/libddvdisk.so
0Td-
/home/kos/kashya/archive/lib/libewoc_rp-release.so
/usr/kashya/lib/libjemalloc.so.1
0.w.
/home/kos/kashya/archive/lib/libarray_infra-release.so
/home/kos/boost/libboost_serialization.so.1.61.0
/home/kos/boost/libboost_wserialization.so.1.61.0
/usr/kashya/lib/libACE.so.6.3.3
/usr/kashya/lib/libDDBoost.so
linux-vdso.so.1
result.log.latest
/usr/lib/python2.7/plat-x86_64-linux-gnu
/usr/lib/python2.7/dist-packages
kages
/usr/lib/python2.7
/usr/lib/python2.7/encodings
NBZ 
/usr/lib/python2.7/
@I~ 
0#~ 
0#~ 
+HZ 
+HZ 
+HZ 
2026
@I~ 
5770
@I~ 
`I~ 
0#~ 
NBZ 
@I~ 
0#~ 
0#~ 
@I~ 
0#~ 
@I~ 
Core writer child starting dump with nice=-9
5770
0#~ 
1000
-03-
0#~ 
0#~ 
shya/arc
/libCSP-
Process 5770 - Signal 11 caught. Starting core dump.
(0g$
H)l$
z6W(
(0g$
(0g$
@I~ 
5770
2026
g run_event_loopcalling run_evenUTC
(0x1f1f99f3d17c5330)_KBox2),ip=N11924484912_KBox2:  switchTo_Get
SXPFD
EXPF
@I~ 
@I~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
0#~ 
Wx)m-:
+x86_64
/home/kos/kashya/archive/bin/release/replication
kvol=@/home/kos/kvol.txt boxRole=1
CONSOLE=/dev/console
HOST=RecoverPoint-0x1f1f99f3d17c5330-RPA2
DDV_COMPATIBLE_WITH_ALL_DDOS_VERSION=1
SHELL=/bin/sh
TERM=linux
OLDPWD=/home/kos/control
crashkernel=64M
GROUP=root
USER=root
LD_LIBRARY_PATH=/home/kos/kashya/archive/lib:/home/kos/kashya/archive/clp:/home/kos/kashya/archive/cst:/usr/kashya/lib:/usr/kashya/lib.3.4:/home/kos/boost:/lib:/usr/lib:/usr/local/lib:/usr/kashya/java/jre/lib/amd64:/usr/kashya/java/jre/lib/amd64/client:/usr/kashya/java/jre/lib/amd64/server::./
SM_IGNORE_OS_VERSION=1
INIT_VERSION=sysvinit-2.88
HOSTTYPE=x86_64-linux
COLUMNS=80
PATH=/sbin:/usr/sbin:/bin:/usr/bin
runlevel=2
RUNLEVEL=2
PWD=/home/kos/replication
JAVA_HOME=/usr/kashya/java/jre
VERBOSE=no
intel_iommu=off
previous=N
PREVLEVEL=N
LINES=25
TWEAK_FILENAME=tweak.params
JDK_HOME=/usr/kashya/java/jre
SHLVL=8
HOME=/
OSTYPE=linux
BOOT_IMAGE=/vmlinuz-3.14.29-k11
VENDOR=unknown
LOGNAME=root
MACHTYPE=x86_64
TWEAK_PATH=/home/kos/kbox/src/initialization/tweak_params
_=/home/kos/kashya/archive/bin/release/replication
/home/kos/kashya/archive/bin/release/replication
__vdso_clock_gettime
__vdso_gettimeofday
__vdso_time
__vdso_getcpu
linux-vdso.so.1
LINUX_2.6
Linux
rmH)
r6H)
rNI)
GCC: (GNU) 4.9.2
GCC: (GNU) 4.9.2
.shstrtab
.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_d
.note
.eh_frame_hdr
.eh_frame
.dynamic
.data
.discard
.altinstructions
.altinstr_replacement
.text
.comment
